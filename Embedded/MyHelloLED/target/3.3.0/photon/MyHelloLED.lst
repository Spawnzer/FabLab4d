
c:/Users/AlexandreDubreau/Documents/Embedded/MyHelloLED/target/3.3.0/photon/MyHelloLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003514  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3530  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  20000000  080a3534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004d4  20000074  20000074  00030074  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a35a8  080a35a8  000235a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a35d0  080a35d0  000235d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000cf1cf  00000000  00000000  000235d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00012c1d  00000000  00000000  000f27a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0001b7bc  00000000  00000000  001053c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002388  00000000  00000000  00120b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00004e88  00000000  00000000  00122f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002ae42  00000000  00000000  00127d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00033af7  00000000  00000000  00152bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000b5433  00000000  00000000  001866c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00005c90  00000000  00000000  0023baf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fe85 	bl	80a2d3c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fea7 	bl	80a2d8c <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a3534 	.word	0x080a3534
 80a004c:	20000074 	.word	0x20000074
 80a0050:	20000074 	.word	0x20000074
 80a0054:	20000545 	.word	0x20000545
 80a0058:	20000545 	.word	0x20000545

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 f84b 	bl	80a20f8 <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42ac      	cmp	r4, r5
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a3510 	.word	0x080a3510
 80a0080:	080a3530 	.word	0x080a3530

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b880 	b.w	80a0188 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f8b7 	bl	80a01fc <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f001 bfe9 	b.w	80a2068 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f000 be73 	b.w	80a0d80 <malloc>

080a009a <_Znaj>:
 80a009a:	f000 be71 	b.w	80a0d80 <malloc>

080a009e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 80a009e:	f000 be77 	b.w	80a0d90 <free>
	...

080a00a4 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a4:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80a00a6:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a8:	4a02      	ldr	r2, [pc, #8]	; (80a00b4 <__cxa_pure_virtual+0x10>)
 80a00aa:	4903      	ldr	r1, [pc, #12]	; (80a00b8 <__cxa_pure_virtual+0x14>)
 80a00ac:	f000 fdb4 	bl	80a0c18 <panic_>
  while (1);
 80a00b0:	e7fe      	b.n	80a00b0 <__cxa_pure_virtual+0xc>
 80a00b2:	bf00      	nop
 80a00b4:	080a09b1 	.word	0x080a09b1
 80a00b8:	080a30b8 	.word	0x080a30b8

080a00bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00bc:	7800      	ldrb	r0, [r0, #0]
 80a00be:	fab0 f080 	clz	r0, r0
 80a00c2:	0940      	lsrs	r0, r0, #5
 80a00c4:	4770      	bx	lr

080a00c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c6:	2301      	movs	r3, #1
 80a00c8:	7003      	strb	r3, [r0, #0]
 80a00ca:	4770      	bx	lr

080a00cc <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 80a00cc:	4770      	bx	lr

080a00ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
 80a00ce:	6a00      	ldr	r0, [r0, #32]
 80a00d0:	6803      	ldr	r3, [r0, #0]
 80a00d2:	68db      	ldr	r3, [r3, #12]
 80a00d4:	4718      	bx	r3
	...

080a00d8 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 80a00d8:	b510      	push	{r4, lr}
 80a00da:	4604      	mov	r4, r0
 80a00dc:	4b09      	ldr	r3, [pc, #36]	; (80a0104 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 80a00de:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 80a00e0:	f001 f926 	bl	80a1330 <_ZN5spark10LogManager8instanceEv>
 80a00e4:	4621      	mov	r1, r4
 80a00e6:	f001 fb96 	bl	80a1816 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 80a00ea:	f002 f90b 	bl	80a2304 <_Z16_fetch_usbserialv>
 80a00ee:	f002 f8ef 	bl	80a22d0 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 80a00f2:	4620      	mov	r0, r4
 80a00f4:	4b04      	ldr	r3, [pc, #16]	; (80a0108 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 80a00f6:	f840 3b04 	str.w	r3, [r0], #4
 80a00fa:	f001 fa29 	bl	80a1550 <_ZN5spark6detail9LogFilterD1Ev>
    }
 80a00fe:	4620      	mov	r0, r4
 80a0100:	bd10      	pop	{r4, pc}
 80a0102:	bf00      	nop
 80a0104:	080a3124 	.word	0x080a3124
 80a0108:	080a310c 	.word	0x080a310c

080a010c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 80a010c:	b510      	push	{r4, lr}
 80a010e:	4604      	mov	r4, r0
    }
 80a0110:	f7ff ffe2 	bl	80a00d8 <_ZN5spark16SerialLogHandlerD1Ev>
 80a0114:	4620      	mov	r0, r4
 80a0116:	2124      	movs	r1, #36	; 0x24
 80a0118:	f7ff ffc1 	bl	80a009e <_ZdlPvj>
 80a011c:	4620      	mov	r0, r4
 80a011e:	bd10      	pop	{r4, pc}

080a0120 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 80a0120:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80a0122:	f04f 0c20 	mov.w	ip, #32
 80a0126:	2300      	movs	r3, #0
inline void spark::Logger::info(const char *fmt, ...) const {
 80a0128:	b500      	push	{lr}
 80a012a:	b08c      	sub	sp, #48	; 0x30
 80a012c:	aa0d      	add	r2, sp, #52	; 0x34
 80a012e:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 80a0132:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a0136:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 80a013a:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a013c:	6801      	ldr	r1, [r0, #0]
 80a013e:	aa04      	add	r2, sp, #16
 80a0140:	201e      	movs	r0, #30
 80a0142:	f000 fd71 	bl	80a0c28 <log_message_v>
}
 80a0146:	b00c      	add	sp, #48	; 0x30
 80a0148:	f85d eb04 	ldr.w	lr, [sp], #4
 80a014c:	b003      	add	sp, #12
 80a014e:	4770      	bx	lr

080a0150 <_Z9myHandlerPKcS0_>:
int cnt;
system_tick_t alertTime;
system_tick_t validityPeriod = 2000;   // in ms

void myHandler(const char *event, const char *data)
{  
 80a0150:	b508      	push	{r3, lr}
  Log.info("event=%s data=%s", event, (data ? data : "NULL"));
 80a0152:	4b08      	ldr	r3, [pc, #32]	; (80a0174 <_Z9myHandlerPKcS0_+0x24>)
{  
 80a0154:	4602      	mov	r2, r0
  Log.info("event=%s data=%s", event, (data ? data : "NULL"));
 80a0156:	2900      	cmp	r1, #0
 80a0158:	bf18      	it	ne
 80a015a:	460b      	movne	r3, r1
 80a015c:	4806      	ldr	r0, [pc, #24]	; (80a0178 <_Z9myHandlerPKcS0_+0x28>)
 80a015e:	4907      	ldr	r1, [pc, #28]	; (80a017c <_Z9myHandlerPKcS0_+0x2c>)
 80a0160:	f7ff ffde 	bl	80a0120 <_ZNK5spark6Logger4infoEPKcz>
  isAlertOn = true;
 80a0164:	2201      	movs	r2, #1
 80a0166:	4b06      	ldr	r3, [pc, #24]	; (80a0180 <_Z9myHandlerPKcS0_+0x30>)
 80a0168:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a016a:	f000 fc29 	bl	80a09c0 <HAL_Timer_Get_Milli_Seconds>
  alertTime = millis();
 80a016e:	4b05      	ldr	r3, [pc, #20]	; (80a0184 <_Z9myHandlerPKcS0_+0x34>)
 80a0170:	6018      	str	r0, [r3, #0]
}
 80a0172:	bd08      	pop	{r3, pc}
 80a0174:	080a30cd 	.word	0x080a30cd
 80a0178:	200000cc 	.word	0x200000cc
 80a017c:	080a30d2 	.word	0x080a30d2
 80a0180:	20000083 	.word	0x20000083
 80a0184:	20000078 	.word	0x20000078

080a0188 <setup>:

void setup() {
 80a0188:	b537      	push	{r0, r1, r2, r4, r5, lr}
  isAlertOn = false;  
 80a018a:	2400      	movs	r4, #0
 80a018c:	4b13      	ldr	r3, [pc, #76]	; (80a01dc <setup+0x54>)
   accelerometer.init();
  display.setBrightness(0xff);                   //set the diplay to maximum brightness  
 80a018e:	4d14      	ldr	r5, [pc, #80]	; (80a01e0 <setup+0x58>)
   accelerometer.init();
 80a0190:	4814      	ldr	r0, [pc, #80]	; (80a01e4 <setup+0x5c>)
  isAlertOn = false;  
 80a0192:	701c      	strb	r4, [r3, #0]
   accelerometer.init();
 80a0194:	f000 fac0 	bl	80a0718 <_ZN7MMA76604initEv>
  display.setBrightness(0xff);                   //set the diplay to maximum brightness  
 80a0198:	4628      	mov	r0, r5
 80a019a:	21ff      	movs	r1, #255	; 0xff
 80a019c:	f000 f9b4 	bl	80a0508 <_ZN13TM1637Display13setBrightnessEh>
  display.showNumberDec(1234, true, 4, 0);       // just a display test
 80a01a0:	2304      	movs	r3, #4
 80a01a2:	2201      	movs	r2, #1
 80a01a4:	f240 41d2 	movw	r1, #1234	; 0x4d2
 80a01a8:	4628      	mov	r0, r5
 80a01aa:	9400      	str	r4, [sp, #0]
 80a01ac:	f000 fa52 	bl	80a0654 <_ZN13TM1637Display13showNumberDecEibhh>
  delay(1000); 
 80a01b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a01b4:	f001 ff18 	bl	80a1fe8 <delay>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 80a01b8:	2301      	movs	r3, #1
 80a01ba:	4622      	mov	r2, r4
 80a01bc:	e9cd 4400 	strd	r4, r4, [sp]
 80a01c0:	4909      	ldr	r1, [pc, #36]	; (80a01e8 <setup+0x60>)
 80a01c2:	480a      	ldr	r0, [pc, #40]	; (80a01ec <setup+0x64>)
 80a01c4:	f000 fdcc 	bl	80a0d60 <spark_subscribe>
  Particle.subscribe("Alert", myHandler);        //subscribe to the Alert event
  Log.info("Started");
 80a01c8:	4909      	ldr	r1, [pc, #36]	; (80a01f0 <setup+0x68>)
 80a01ca:	480a      	ldr	r0, [pc, #40]	; (80a01f4 <setup+0x6c>)
 80a01cc:	f7ff ffa8 	bl	80a0120 <_ZNK5spark6Logger4infoEPKcz>
  leds.init();
 80a01d0:	4809      	ldr	r0, [pc, #36]	; (80a01f8 <setup+0x70>)
}
 80a01d2:	b003      	add	sp, #12
 80a01d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  leds.init();
 80a01d8:	f000 bba8 	b.w	80a092c <_ZN12ChainableLED4initEv>
 80a01dc:	20000083 	.word	0x20000083
 80a01e0:	20000080 	.word	0x20000080
 80a01e4:	20000074 	.word	0x20000074
 80a01e8:	080a0151 	.word	0x080a0151
 80a01ec:	080a30e3 	.word	0x080a30e3
 80a01f0:	080a30e9 	.word	0x080a30e9
 80a01f4:	200000cc 	.word	0x200000cc
 80a01f8:	20000084 	.word	0x20000084

080a01fc <loop>:

void loop() {
 80a01fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  
      /*if (cnt == 9999) {cnt = 0;}
      cnt++;*/
        
  int8_t x = 0;
 80a0200:	2400      	movs	r4, #0
void loop() {
 80a0202:	b085      	sub	sp, #20
  int8_t z = 0;
  //int i = 0;
  int a = 0;
  int c = 0;
  int lc = 0; 
  accelerometer.getXYZ(&x, &y, &z);
 80a0204:	4849      	ldr	r0, [pc, #292]	; (80a032c <loop+0x130>)
 80a0206:	f10d 030f 	add.w	r3, sp, #15
 80a020a:	f10d 020e 	add.w	r2, sp, #14
 80a020e:	f10d 010d 	add.w	r1, sp, #13
  int8_t x = 0;
 80a0212:	f88d 400d 	strb.w	r4, [sp, #13]
  int8_t y = 0;
 80a0216:	f88d 400e 	strb.w	r4, [sp, #14]
  int8_t z = 0;
 80a021a:	f88d 400f 	strb.w	r4, [sp, #15]
  //float ax, ay, az;
  
  //cnt = ((x%10) * 100) + ((y%10) * 10) + (z%10);
  while(1)
  {
    accelerometer.getXYZ(&x, &y, &z);
 80a021e:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80a032c <loop+0x130>
  accelerometer.getXYZ(&x, &y, &z);
 80a0222:	f000 fa88 	bl	80a0736 <_ZN7MMA76606getXYZEPaS0_S0_>
    delay(1000);
    Log.info("X: %d", x);
 80a0226:	f8df a108 	ldr.w	sl, [pc, #264]	; 80a0330 <loop+0x134>
  int8_t baseX = x;
 80a022a:	f99d 600d 	ldrsb.w	r6, [sp, #13]
  int8_t baseY = y;
 80a022e:	f99d 700e 	ldrsb.w	r7, [sp, #14]
  int8_t baseZ = z;
 80a0232:	f99d 800f 	ldrsb.w	r8, [sp, #15]
    Log.info("X: %d", x);
 80a0236:	4d3f      	ldr	r5, [pc, #252]	; (80a0334 <loop+0x138>)
    accelerometer.getXYZ(&x, &y, &z);
 80a0238:	f10d 030f 	add.w	r3, sp, #15
 80a023c:	f10d 020e 	add.w	r2, sp, #14
 80a0240:	f10d 010d 	add.w	r1, sp, #13
 80a0244:	4648      	mov	r0, r9
 80a0246:	f000 fa76 	bl	80a0736 <_ZN7MMA76606getXYZEPaS0_S0_>
    delay(1000);
 80a024a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a024e:	f001 fecb 	bl	80a1fe8 <delay>
    Log.info("X: %d", x);
 80a0252:	4651      	mov	r1, sl
 80a0254:	4628      	mov	r0, r5
 80a0256:	f99d 200d 	ldrsb.w	r2, [sp, #13]
 80a025a:	f7ff ff61 	bl	80a0120 <_ZNK5spark6Logger4infoEPKcz>
    Log.info("Y: %d", y); 
 80a025e:	4628      	mov	r0, r5
 80a0260:	f99d 200e 	ldrsb.w	r2, [sp, #14]
 80a0264:	4934      	ldr	r1, [pc, #208]	; (80a0338 <loop+0x13c>)
 80a0266:	f7ff ff5b 	bl	80a0120 <_ZNK5spark6Logger4infoEPKcz>
    Log.info("Z: %d", z);
 80a026a:	4628      	mov	r0, r5
 80a026c:	f99d 200f 	ldrsb.w	r2, [sp, #15]
 80a0270:	4932      	ldr	r1, [pc, #200]	; (80a033c <loop+0x140>)
 80a0272:	f7ff ff55 	bl	80a0120 <_ZNK5spark6Logger4infoEPKcz>
    x > baseX ? deltaX = x - baseX : deltaX = baseX - x;
 80a0276:	f99d 300d 	ldrsb.w	r3, [sp, #13]
 80a027a:	b2f0      	uxtb	r0, r6
 80a027c:	42b3      	cmp	r3, r6
    y > baseY ? deltaY = y - baseY : deltaY = baseY - y;
 80a027e:	f99d 200e 	ldrsb.w	r2, [sp, #14]
 80a0282:	f89d 100e 	ldrb.w	r1, [sp, #14]
    x > baseX ? deltaX = x - baseX : deltaX = baseX - x;
 80a0286:	bfcc      	ite	gt
 80a0288:	1a1b      	subgt	r3, r3, r0
 80a028a:	1ac3      	suble	r3, r0, r3
 80a028c:	b258      	sxtb	r0, r3
    y > baseY ? deltaY = y - baseY : deltaY = baseY - y;
 80a028e:	42ba      	cmp	r2, r7
 80a0290:	b2fb      	uxtb	r3, r7
 80a0292:	bfcc      	ite	gt
 80a0294:	1acb      	subgt	r3, r1, r3
 80a0296:	1a5b      	suble	r3, r3, r1
    z > baseZ ? deltaZ = z - baseZ : deltaZ = baseZ - z;
 80a0298:	f99d c00f 	ldrsb.w	ip, [sp, #15]
    y > baseY ? deltaY = y - baseY : deltaY = baseY - y;
 80a029c:	b259      	sxtb	r1, r3
    z > baseZ ? deltaZ = z - baseZ : deltaZ = baseZ - z;
 80a029e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80a02a2:	45c4      	cmp	ip, r8
 80a02a4:	fa5f f288 	uxtb.w	r2, r8
 80a02a8:	bfcb      	itete	gt
 80a02aa:	1a9b      	subgt	r3, r3, r2
 80a02ac:	1ad2      	suble	r2, r2, r3
 80a02ae:	b25b      	sxtbgt	r3, r3
 80a02b0:	b253      	sxtble	r3, r2
    deltaX > deltaY ? (deltaX > deltaZ ? a = deltaX : a = deltaZ) : (deltaY > deltaZ ? a = deltaY : a = deltaZ);
 80a02b2:	4288      	cmp	r0, r1
 80a02b4:	dd21      	ble.n	80a02fa <loop+0xfe>
 80a02b6:	4283      	cmp	r3, r0
 80a02b8:	bfb8      	it	lt
 80a02ba:	4603      	movlt	r3, r0
    a <= 10 ? leds.setColorRGB(0, 0, 255, 0): (a <= 20 ? leds.setColorRGB(0, 255, 140, 0): leds.setColorRGB(0, 255, 0, 0));  
 80a02bc:	f04f 0b00 	mov.w	fp, #0
 80a02c0:	2b0a      	cmp	r3, #10
 80a02c2:	f8cd b000 	str.w	fp, [sp]
 80a02c6:	dc1c      	bgt.n	80a0302 <loop+0x106>
 80a02c8:	23ff      	movs	r3, #255	; 0xff
 80a02ca:	465a      	mov	r2, fp
 80a02cc:	4659      	mov	r1, fp
 80a02ce:	481c      	ldr	r0, [pc, #112]	; (80a0340 <loop+0x144>)
 80a02d0:	f000 fae4 	bl	80a089c <_ZN12ChainableLED11setColorRGBEhhhh>
    a <= 10 ? c = 0: (a <= 20 ? c = 1 : c = 2); 
    c == lc ? cnt++ : cnt = 0;
 80a02d4:	45a3      	cmp	fp, r4
 80a02d6:	bf18      	it	ne
 80a02d8:	2100      	movne	r1, #0
 80a02da:	4b1a      	ldr	r3, [pc, #104]	; (80a0344 <loop+0x148>)
    lc = c;
    display.showNumberDec(cnt, true, 4, 0);
 80a02dc:	f04f 0201 	mov.w	r2, #1
    c == lc ? cnt++ : cnt = 0;
 80a02e0:	bf08      	it	eq
 80a02e2:	6819      	ldreq	r1, [r3, #0]
    display.showNumberDec(cnt, true, 4, 0);
 80a02e4:	4818      	ldr	r0, [pc, #96]	; (80a0348 <loop+0x14c>)
    c == lc ? cnt++ : cnt = 0;
 80a02e6:	bf08      	it	eq
 80a02e8:	3101      	addeq	r1, #1
 80a02ea:	6019      	str	r1, [r3, #0]
    display.showNumberDec(cnt, true, 4, 0);
 80a02ec:	2300      	movs	r3, #0
 80a02ee:	9300      	str	r3, [sp, #0]
 80a02f0:	2304      	movs	r3, #4
 80a02f2:	f000 f9af 	bl	80a0654 <_ZN13TM1637Display13showNumberDecEibhh>
    accelerometer.getXYZ(&x, &y, &z);
 80a02f6:	465c      	mov	r4, fp
 80a02f8:	e79e      	b.n	80a0238 <loop+0x3c>
    deltaX > deltaY ? (deltaX > deltaZ ? a = deltaX : a = deltaZ) : (deltaY > deltaZ ? a = deltaY : a = deltaZ);
 80a02fa:	428b      	cmp	r3, r1
 80a02fc:	bfb8      	it	lt
 80a02fe:	460b      	movlt	r3, r1
 80a0300:	e7dc      	b.n	80a02bc <loop+0xc0>
    a <= 10 ? leds.setColorRGB(0, 0, 255, 0): (a <= 20 ? leds.setColorRGB(0, 255, 140, 0): leds.setColorRGB(0, 255, 0, 0));  
 80a0302:	2b14      	cmp	r3, #20
 80a0304:	dc08      	bgt.n	80a0318 <loop+0x11c>
 80a0306:	4659      	mov	r1, fp
 80a0308:	238c      	movs	r3, #140	; 0x8c
 80a030a:	22ff      	movs	r2, #255	; 0xff
 80a030c:	480c      	ldr	r0, [pc, #48]	; (80a0340 <loop+0x144>)
 80a030e:	f000 fac5 	bl	80a089c <_ZN12ChainableLED11setColorRGBEhhhh>
    a <= 10 ? c = 0: (a <= 20 ? c = 1 : c = 2); 
 80a0312:	f04f 0b01 	mov.w	fp, #1
 80a0316:	e7dd      	b.n	80a02d4 <loop+0xd8>
    a <= 10 ? leds.setColorRGB(0, 0, 255, 0): (a <= 20 ? leds.setColorRGB(0, 255, 140, 0): leds.setColorRGB(0, 255, 0, 0));  
 80a0318:	465b      	mov	r3, fp
 80a031a:	4659      	mov	r1, fp
 80a031c:	22ff      	movs	r2, #255	; 0xff
 80a031e:	4808      	ldr	r0, [pc, #32]	; (80a0340 <loop+0x144>)
 80a0320:	f000 fabc 	bl	80a089c <_ZN12ChainableLED11setColorRGBEhhhh>
    a <= 10 ? c = 0: (a <= 20 ? c = 1 : c = 2); 
 80a0324:	f04f 0b02 	mov.w	fp, #2
 80a0328:	e7d4      	b.n	80a02d4 <loop+0xd8>
 80a032a:	bf00      	nop
 80a032c:	20000074 	.word	0x20000074
 80a0330:	080a30f1 	.word	0x080a30f1
 80a0334:	200000cc 	.word	0x200000cc
 80a0338:	080a30f7 	.word	0x080a30f7
 80a033c:	080a30fd 	.word	0x080a30fd
 80a0340:	20000084 	.word	0x20000084
 80a0344:	2000007c 	.word	0x2000007c
 80a0348:	20000080 	.word	0x20000080

080a034c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a034c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 80a034e:	2614      	movs	r6, #20
 80a0350:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a0354:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a0356:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a035a:	42ae      	cmp	r6, r5
 80a035c:	d004      	beq.n	80a0368 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 80a035e:	4628      	mov	r0, r5
 80a0360:	f000 fd70 	bl	80a0e44 <_ZN6StringD1Ev>
 80a0364:	3514      	adds	r5, #20
 80a0366:	e7f8      	b.n	80a035a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80a0368:	6820      	ldr	r0, [r4, #0]
 80a036a:	f000 fd11 	bl	80a0d90 <free>
    AllocatorT::free(data_);
}
 80a036e:	4620      	mov	r0, r4
 80a0370:	bd70      	pop	{r4, r5, r6, pc}

080a0372 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 80a0372:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a0374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0376:	4604      	mov	r4, r0
 80a0378:	460d      	mov	r5, r1
 80a037a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80a037c:	d916      	bls.n	80a03ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 80a037e:	4290      	cmp	r0, r2
 80a0380:	d215      	bcs.n	80a03ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 80a0382:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 80a0386:	1a75      	subs	r5, r6, r1
 80a0388:	f1a1 0714 	sub.w	r7, r1, #20
 80a038c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 80a038e:	42b7      	cmp	r7, r6
 80a0390:	d01c      	beq.n	80a03cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 80a0392:	b12c      	cbz	r4, 80a03a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 80a0394:	4631      	mov	r1, r6
 80a0396:	4620      	mov	r0, r4
 80a0398:	f000 fdbb 	bl	80a0f12 <_ZN6StringC1EOS_>
 80a039c:	7c33      	ldrb	r3, [r6, #16]
 80a039e:	7423      	strb	r3, [r4, #16]
 80a03a0:	4630      	mov	r0, r6
 80a03a2:	f000 fd4f 	bl	80a0e44 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 80a03a6:	3e14      	subs	r6, #20
 80a03a8:	3c14      	subs	r4, #20
 80a03aa:	e7f0      	b.n	80a038e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80a03ac:	d00e      	beq.n	80a03cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 80a03ae:	42b5      	cmp	r5, r6
 80a03b0:	d00c      	beq.n	80a03cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 80a03b2:	b12c      	cbz	r4, 80a03c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 80a03b4:	4629      	mov	r1, r5
 80a03b6:	4620      	mov	r0, r4
 80a03b8:	f000 fdab 	bl	80a0f12 <_ZN6StringC1EOS_>
 80a03bc:	7c2b      	ldrb	r3, [r5, #16]
 80a03be:	7423      	strb	r3, [r4, #16]
 80a03c0:	4628      	mov	r0, r5
 80a03c2:	f000 fd3f 	bl	80a0e44 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80a03c6:	3514      	adds	r5, #20
 80a03c8:	3414      	adds	r4, #20
 80a03ca:	e7f0      	b.n	80a03ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 80a03cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a03ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 80a03ce:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a03d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 80a03d4:	e9c0 3300 	strd	r3, r3, [r0]
 80a03d8:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a03da:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a03dc:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a03de:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a03e0:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a03e2:	dd24      	ble.n	80a042e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 80a03e4:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 80a03e8:	fb08 f007 	mul.w	r0, r8, r7
 80a03ec:	f000 fcc8 	bl	80a0d80 <malloc>
            if (!d) {
 80a03f0:	4605      	mov	r5, r0
 80a03f2:	b1e0      	cbz	r0, 80a042e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 80a03f4:	e9d4 1200 	ldrd	r1, r2, [r4]
 80a03f8:	fb08 1202 	mla	r2, r8, r2, r1
 80a03fc:	f7ff ffb9 	bl	80a0372 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80a0400:	6820      	ldr	r0, [r4, #0]
 80a0402:	f000 fcc5 	bl	80a0d90 <free>
        data_ = d;
 80a0406:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 80a0408:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 80a040a:	e9d6 7300 	ldrd	r7, r3, [r6]
 80a040e:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 80a0412:	45b8      	cmp	r8, r7
 80a0414:	d009      	beq.n	80a042a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 80a0416:	4639      	mov	r1, r7
 80a0418:	4628      	mov	r0, r5
 80a041a:	f000 fd94 	bl	80a0f46 <_ZN6StringC1ERKS_>
 80a041e:	7c3b      	ldrb	r3, [r7, #16]
 80a0420:	3514      	adds	r5, #20
 80a0422:	f805 3c04 	strb.w	r3, [r5, #-4]
 80a0426:	3714      	adds	r7, #20
 80a0428:	e7f3      	b.n	80a0412 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 80a042a:	6873      	ldr	r3, [r6, #4]
 80a042c:	6063      	str	r3, [r4, #4]
}
 80a042e:	4620      	mov	r0, r4
 80a0430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0434 <_GLOBAL__sub_I_display>:
  Log.info("AX: %f", ax);
  Log.info("AY: %f", ay);
  Log.info("AZ: %f", az);*/


}
 80a0434:	b570      	push	{r4, r5, r6, lr}
TM1637Display display(CLK,DIO);
 80a0436:	2205      	movs	r2, #5
}
 80a0438:	b08c      	sub	sp, #48	; 0x30
TM1637Display display(CLK,DIO);
 80a043a:	2104      	movs	r1, #4
 80a043c:	4821      	ldr	r0, [pc, #132]	; (80a04c4 <_GLOBAL__sub_I_display+0x90>)
 80a043e:	f000 f84d 	bl	80a04dc <_ZN13TM1637DisplayC1Ehh>
ChainableLED leds(D2, D3, NUM_LEDS);
 80a0442:	2203      	movs	r2, #3
 80a0444:	2102      	movs	r1, #2
 80a0446:	2301      	movs	r3, #1
 80a0448:	481f      	ldr	r0, [pc, #124]	; (80a04c8 <_GLOBAL__sub_I_display+0x94>)
 80a044a:	f000 f9c4 	bl	80a07d6 <_ZN12ChainableLEDC1Ehhh>
        capacity_(0) {
 80a044e:	2300      	movs	r3, #0
 80a0450:	e9cd 3300 	strd	r3, r3, [sp]
 80a0454:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 80a0456:	f001 ff55 	bl	80a2304 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 80a045a:	4c1c      	ldr	r4, [pc, #112]	; (80a04cc <_GLOBAL__sub_I_display+0x98>)
 80a045c:	4605      	mov	r5, r0
 80a045e:	4626      	mov	r6, r4
 80a0460:	4669      	mov	r1, sp
 80a0462:	a803      	add	r0, sp, #12
 80a0464:	f7ff ffb3 	bl	80a03ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 80a0468:	a903      	add	r1, sp, #12
 80a046a:	a806      	add	r0, sp, #24
 80a046c:	f7ff ffaf 	bl	80a03ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 80a0470:	4b17      	ldr	r3, [pc, #92]	; (80a04d0 <_GLOBAL__sub_I_display+0x9c>)
 80a0472:	a906      	add	r1, sp, #24
 80a0474:	f846 3b04 	str.w	r3, [r6], #4
 80a0478:	a809      	add	r0, sp, #36	; 0x24
 80a047a:	f7ff ffa8 	bl	80a03ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a047e:	aa09      	add	r2, sp, #36	; 0x24
 80a0480:	211e      	movs	r1, #30
 80a0482:	4630      	mov	r0, r6
 80a0484:	f001 faaa 	bl	80a19dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a0488:	a809      	add	r0, sp, #36	; 0x24
 80a048a:	f7ff ff5f 	bl	80a034c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 80a048e:	a806      	add	r0, sp, #24
 80a0490:	f7ff ff5c 	bl	80a034c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a0494:	4b0f      	ldr	r3, [pc, #60]	; (80a04d4 <_GLOBAL__sub_I_display+0xa0>)
 80a0496:	a803      	add	r0, sp, #12
 80a0498:	6023      	str	r3, [r4, #0]
 80a049a:	6225      	str	r5, [r4, #32]
 80a049c:	f7ff ff56 	bl	80a034c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a04a0:	4b0d      	ldr	r3, [pc, #52]	; (80a04d8 <_GLOBAL__sub_I_display+0xa4>)
 80a04a2:	6023      	str	r3, [r4, #0]
        Serial.begin();
 80a04a4:	f001 ff2e 	bl	80a2304 <_Z16_fetch_usbserialv>
 80a04a8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a04ac:	f001 ff0c 	bl	80a22c8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 80a04b0:	f000 ff3e 	bl	80a1330 <_ZN5spark10LogManager8instanceEv>
 80a04b4:	4621      	mov	r1, r4
 80a04b6:	f001 f969 	bl	80a178c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
 80a04ba:	4668      	mov	r0, sp
 80a04bc:	f7ff ff46 	bl	80a034c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 80a04c0:	b00c      	add	sp, #48	; 0x30
 80a04c2:	bd70      	pop	{r4, r5, r6, pc}
 80a04c4:	20000080 	.word	0x20000080
 80a04c8:	20000084 	.word	0x20000084
 80a04cc:	2000008c 	.word	0x2000008c
 80a04d0:	080a310c 	.word	0x080a310c
 80a04d4:	080a31e8 	.word	0x080a31e8
 80a04d8:	080a3124 	.word	0x080a3124

080a04dc <_ZN13TM1637DisplayC1Ehh>:
  0b01111001,    // E
  0b01110001     // F
  };


TM1637Display::TM1637Display(uint8_t pinClk, uint8_t pinDIO)
 80a04dc:	b510      	push	{r4, lr}
 80a04de:	4604      	mov	r4, r0
 80a04e0:	4608      	mov	r0, r1
{
	// Copy the pin numbers
	m_pinClk = pinClk;
	m_pinDIO = pinDIO;
 80a04e2:	7062      	strb	r2, [r4, #1]
	m_pinClk = pinClk;
 80a04e4:	7021      	strb	r1, [r4, #0]
	
	// Set the pin direction and default value.
	// Both pins are set as inputs, allowing the pull-up resistors to pull them up
    pinMode(m_pinClk, INPUT);
 80a04e6:	2100      	movs	r1, #0
 80a04e8:	f002 fb48 	bl	80a2b7c <pinMode>
    pinMode(m_pinDIO,INPUT);
 80a04ec:	7860      	ldrb	r0, [r4, #1]
 80a04ee:	2100      	movs	r1, #0
 80a04f0:	f002 fb44 	bl	80a2b7c <pinMode>
	digitalWrite(m_pinClk, LOW);
 80a04f4:	7820      	ldrb	r0, [r4, #0]
 80a04f6:	2100      	movs	r1, #0
 80a04f8:	f002 fb51 	bl	80a2b9e <digitalWrite>
	digitalWrite(m_pinDIO, LOW);
 80a04fc:	7860      	ldrb	r0, [r4, #1]
 80a04fe:	2100      	movs	r1, #0
 80a0500:	f002 fb4d 	bl	80a2b9e <digitalWrite>
}
 80a0504:	4620      	mov	r0, r4
 80a0506:	bd10      	pop	{r4, pc}

080a0508 <_ZN13TM1637Display13setBrightnessEh>:

void TM1637Display::setBrightness(uint8_t brightness)
{
	m_brightness = brightness;
 80a0508:	7081      	strb	r1, [r0, #2]
}
 80a050a:	4770      	bx	lr

080a050c <_ZN13TM1637Display5startEv>:
{
	delayMicroseconds(50);
}
   
void TM1637Display::start()
{
 80a050c:	b508      	push	{r3, lr}
  pinMode(m_pinDIO, OUTPUT);
 80a050e:	2101      	movs	r1, #1
 80a0510:	7840      	ldrb	r0, [r0, #1]
 80a0512:	f002 fb33 	bl	80a2b7c <pinMode>
  bitDelay();
}
 80a0516:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a051a:	2032      	movs	r0, #50	; 0x32
 80a051c:	f000 ba48 	b.w	80a09b0 <HAL_Delay_Microseconds>

080a0520 <_ZN13TM1637Display4stopEv>:
   
void TM1637Display::stop()
{
 80a0520:	b510      	push	{r4, lr}
 80a0522:	4604      	mov	r4, r0
	pinMode(m_pinDIO, OUTPUT);
 80a0524:	2101      	movs	r1, #1
 80a0526:	7840      	ldrb	r0, [r0, #1]
 80a0528:	f002 fb28 	bl	80a2b7c <pinMode>
 80a052c:	2032      	movs	r0, #50	; 0x32
 80a052e:	f000 fa3f 	bl	80a09b0 <HAL_Delay_Microseconds>
	bitDelay();
	pinMode(m_pinClk, INPUT);
 80a0532:	2100      	movs	r1, #0
 80a0534:	7820      	ldrb	r0, [r4, #0]
 80a0536:	f002 fb21 	bl	80a2b7c <pinMode>
 80a053a:	2032      	movs	r0, #50	; 0x32
 80a053c:	f000 fa38 	bl	80a09b0 <HAL_Delay_Microseconds>
	bitDelay();
	pinMode(m_pinDIO, INPUT);
 80a0540:	7860      	ldrb	r0, [r4, #1]
 80a0542:	2100      	movs	r1, #0
 80a0544:	f002 fb1a 	bl	80a2b7c <pinMode>
	bitDelay();
}
 80a0548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a054c:	2032      	movs	r0, #50	; 0x32
 80a054e:	f000 ba2f 	b.w	80a09b0 <HAL_Delay_Microseconds>

080a0552 <_ZN13TM1637Display9writeByteEh>:
  
bool TM1637Display::writeByte(uint8_t b)
{
 80a0552:	b570      	push	{r4, r5, r6, lr}
 80a0554:	4604      	mov	r4, r0
 80a0556:	460e      	mov	r6, r1
 80a0558:	2508      	movs	r5, #8
  uint8_t data = b;

  // 8 Data Bits
  for(uint8_t i = 0; i < 8; i++) {
    // CLK low
    pinMode(m_pinClk, OUTPUT);
 80a055a:	2101      	movs	r1, #1
 80a055c:	7820      	ldrb	r0, [r4, #0]
 80a055e:	f002 fb0d 	bl	80a2b7c <pinMode>
 80a0562:	2032      	movs	r0, #50	; 0x32
 80a0564:	f000 fa24 	bl	80a09b0 <HAL_Delay_Microseconds>
    bitDelay();
    
	// Set data bit
    if (data & 0x01)
 80a0568:	f016 0f01 	tst.w	r6, #1
      pinMode(m_pinDIO, INPUT);
 80a056c:	bf14      	ite	ne
 80a056e:	2100      	movne	r1, #0
    else
      pinMode(m_pinDIO, OUTPUT);
 80a0570:	2101      	moveq	r1, #1
 80a0572:	7860      	ldrb	r0, [r4, #1]
 80a0574:	f002 fb02 	bl	80a2b7c <pinMode>
 80a0578:	2032      	movs	r0, #50	; 0x32
 80a057a:	f000 fa19 	bl	80a09b0 <HAL_Delay_Microseconds>
    
    bitDelay();
	
	// CLK high
    pinMode(m_pinClk, INPUT);
 80a057e:	2100      	movs	r1, #0
 80a0580:	7820      	ldrb	r0, [r4, #0]
 80a0582:	f002 fafb 	bl	80a2b7c <pinMode>
  for(uint8_t i = 0; i < 8; i++) {
 80a0586:	3d01      	subs	r5, #1
 80a0588:	2032      	movs	r0, #50	; 0x32
 80a058a:	f000 fa11 	bl	80a09b0 <HAL_Delay_Microseconds>
 80a058e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    bitDelay();
    data = data >> 1;
 80a0592:	ea4f 0656 	mov.w	r6, r6, lsr #1
  for(uint8_t i = 0; i < 8; i++) {
 80a0596:	d1e0      	bne.n	80a055a <_ZN13TM1637Display9writeByteEh+0x8>
  }
  
  // Wait for acknowledge
  // CLK to zero
  pinMode(m_pinClk, OUTPUT);
 80a0598:	2101      	movs	r1, #1
 80a059a:	7820      	ldrb	r0, [r4, #0]
 80a059c:	f002 faee 	bl	80a2b7c <pinMode>
  pinMode(m_pinDIO, INPUT);
 80a05a0:	4629      	mov	r1, r5
 80a05a2:	7860      	ldrb	r0, [r4, #1]
 80a05a4:	f002 faea 	bl	80a2b7c <pinMode>
 80a05a8:	2032      	movs	r0, #50	; 0x32
 80a05aa:	f000 fa01 	bl	80a09b0 <HAL_Delay_Microseconds>
  bitDelay();
  
  // CLK to high
  pinMode(m_pinClk, INPUT);
 80a05ae:	4629      	mov	r1, r5
 80a05b0:	7820      	ldrb	r0, [r4, #0]
 80a05b2:	f002 fae3 	bl	80a2b7c <pinMode>
 80a05b6:	2032      	movs	r0, #50	; 0x32
 80a05b8:	f000 f9fa 	bl	80a09b0 <HAL_Delay_Microseconds>
  bitDelay();
  uint8_t ack = digitalRead(m_pinDIO);
 80a05bc:	7860      	ldrb	r0, [r4, #1]
 80a05be:	f002 fb07 	bl	80a2bd0 <digitalRead>
  if (ack == 0)
 80a05c2:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 80a05c6:	d103      	bne.n	80a05d0 <_ZN13TM1637Display9writeByteEh+0x7e>
    pinMode(m_pinDIO, OUTPUT);
 80a05c8:	2101      	movs	r1, #1
 80a05ca:	7860      	ldrb	r0, [r4, #1]
 80a05cc:	f002 fad6 	bl	80a2b7c <pinMode>
 80a05d0:	2032      	movs	r0, #50	; 0x32
 80a05d2:	f000 f9ed 	bl	80a09b0 <HAL_Delay_Microseconds>
	
	
  bitDelay();
  pinMode(m_pinClk, OUTPUT);
 80a05d6:	2101      	movs	r1, #1
 80a05d8:	7820      	ldrb	r0, [r4, #0]
 80a05da:	f002 facf 	bl	80a2b7c <pinMode>
 80a05de:	2032      	movs	r0, #50	; 0x32
 80a05e0:	f000 f9e6 	bl	80a09b0 <HAL_Delay_Microseconds>
  bitDelay();
  
  return ack;
}
 80a05e4:	1e28      	subs	r0, r5, #0
 80a05e6:	bf18      	it	ne
 80a05e8:	2001      	movne	r0, #1
 80a05ea:	bd70      	pop	{r4, r5, r6, pc}

080a05ec <_ZN13TM1637Display11setSegmentsEPKhhh>:
{
 80a05ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a05ee:	4604      	mov	r4, r0
 80a05f0:	461e      	mov	r6, r3
 80a05f2:	4617      	mov	r7, r2
 80a05f4:	460d      	mov	r5, r1
	start();
 80a05f6:	f7ff ff89 	bl	80a050c <_ZN13TM1637Display5startEv>
	writeByte(TM1637_I2C_COMM1);
 80a05fa:	2140      	movs	r1, #64	; 0x40
 80a05fc:	4620      	mov	r0, r4
 80a05fe:	f7ff ffa8 	bl	80a0552 <_ZN13TM1637Display9writeByteEh>
	stop();
 80a0602:	4620      	mov	r0, r4
 80a0604:	f7ff ff8c 	bl	80a0520 <_ZN13TM1637Display4stopEv>
	start();
 80a0608:	4620      	mov	r0, r4
 80a060a:	f7ff ff7f 	bl	80a050c <_ZN13TM1637Display5startEv>
	writeByte(TM1637_I2C_COMM2 + (pos & 0x03));
 80a060e:	f006 0103 	and.w	r1, r6, #3
 80a0612:	3940      	subs	r1, #64	; 0x40
 80a0614:	4620      	mov	r0, r4
 80a0616:	b2c9      	uxtb	r1, r1
 80a0618:	f7ff ff9b 	bl	80a0552 <_ZN13TM1637Display9writeByteEh>
	for (uint8_t k=0; k < length; k++) 
 80a061c:	442f      	add	r7, r5
 80a061e:	42bd      	cmp	r5, r7
 80a0620:	d005      	beq.n	80a062e <_ZN13TM1637Display11setSegmentsEPKhhh+0x42>
	  writeByte(segments[k]);
 80a0622:	4620      	mov	r0, r4
 80a0624:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0628:	f7ff ff93 	bl	80a0552 <_ZN13TM1637Display9writeByteEh>
	for (uint8_t k=0; k < length; k++) 
 80a062c:	e7f7      	b.n	80a061e <_ZN13TM1637Display11setSegmentsEPKhhh+0x32>
	stop();
 80a062e:	4620      	mov	r0, r4
 80a0630:	f7ff ff76 	bl	80a0520 <_ZN13TM1637Display4stopEv>
	start();
 80a0634:	4620      	mov	r0, r4
 80a0636:	f7ff ff69 	bl	80a050c <_ZN13TM1637Display5startEv>
	writeByte(TM1637_I2C_COMM3 + (m_brightness & 0x0f));
 80a063a:	78a1      	ldrb	r1, [r4, #2]
 80a063c:	4620      	mov	r0, r4
 80a063e:	f001 010f 	and.w	r1, r1, #15
 80a0642:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80a0646:	f7ff ff84 	bl	80a0552 <_ZN13TM1637Display9writeByteEh>
	stop();
 80a064a:	4620      	mov	r0, r4
}
 80a064c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	stop();
 80a0650:	f7ff bf66 	b.w	80a0520 <_ZN13TM1637Display4stopEv>

080a0654 <_ZN13TM1637Display13showNumberDecEibhh>:
{
 80a0654:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a0658:	ac01      	add	r4, sp, #4
 80a065a:	4615      	mov	r5, r2
	bool leading = true;
 80a065c:	f04f 0c01 	mov.w	ip, #1
{
 80a0660:	461a      	mov	r2, r3
 80a0662:	46a0      	mov	r8, r4
 80a0664:	2300      	movs	r3, #0
		    digits[k] = encodeDigit(d);
 80a0666:	f04f 0a3f 	mov.w	sl, #63	; 0x3f
 80a066a:	4f16      	ldr	r7, [pc, #88]	; (80a06c4 <_ZN13TM1637Display13showNumberDecEibhh+0x70>)

uint8_t TM1637Display::encodeDigit(uint8_t digit)
{
	return digitToSegment[digit & 0x0f];
 80a066c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80a06c8 <_ZN13TM1637Display13showNumberDecEibhh+0x74>
	    int divisor = divisors[4 - 1 - k];
 80a0670:	f857 e904 	ldr.w	lr, [r7], #-4
		int d = num / divisor;
 80a0674:	fb91 f6fe 	sdiv	r6, r1, lr
		if (d == 0) {
 80a0678:	b9c6      	cbnz	r6, 80a06ac <_ZN13TM1637Display13showNumberDecEibhh+0x58>
		  if (leading_zero || !leading || (k == 3))
 80a067a:	b925      	cbnz	r5, 80a0686 <_ZN13TM1637Display13showNumberDecEibhh+0x32>
 80a067c:	f1bc 0f00 	cmp.w	ip, #0
 80a0680:	d001      	beq.n	80a0686 <_ZN13TM1637Display13showNumberDecEibhh+0x32>
 80a0682:	2b03      	cmp	r3, #3
 80a0684:	d110      	bne.n	80a06a8 <_ZN13TM1637Display13showNumberDecEibhh+0x54>
		    digits[k] = encodeDigit(d);
 80a0686:	f884 a000 	strb.w	sl, [r4]
	for(int8_t k = 0; k < 4; k++) {
 80a068a:	3301      	adds	r3, #1
 80a068c:	2b04      	cmp	r3, #4
 80a068e:	f104 0401 	add.w	r4, r4, #1
 80a0692:	d1ed      	bne.n	80a0670 <_ZN13TM1637Display13showNumberDecEibhh+0x1c>
	setSegments(digits + (4 - length), length, pos);
 80a0694:	f1c2 0104 	rsb	r1, r2, #4
 80a0698:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80a069c:	4441      	add	r1, r8
 80a069e:	f7ff ffa5 	bl	80a05ec <_ZN13TM1637Display11setSegmentsEPKhhh>
}
 80a06a2:	b002      	add	sp, #8
 80a06a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		    digits[k] = 0;
 80a06a8:	7025      	strb	r5, [r4, #0]
 80a06aa:	e7ee      	b.n	80a068a <_ZN13TM1637Display13showNumberDecEibhh+0x36>
	return digitToSegment[digit & 0x0f];
 80a06ac:	f006 0c0f 	and.w	ip, r6, #15
			digits[k] = encodeDigit(d);
 80a06b0:	f819 c00c 	ldrb.w	ip, [r9, ip]
 80a06b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80a06b8:	f884 c000 	strb.w	ip, [r4]
			leading = false;
 80a06bc:	f04f 0c00 	mov.w	ip, #0
 80a06c0:	e7e3      	b.n	80a068a <_ZN13TM1637Display13showNumberDecEibhh+0x36>
 80a06c2:	bf00      	nop
 80a06c4:	080a3150 	.word	0x080a3150
 80a06c8:	080a3134 	.word	0x080a3134

080a06cc <_ZN7MMA76605writeEhh>:

#include "MMA7660-Accelerometer.h"

/*Function: Write a byte to the register of the MMA7660*/
void MMA7660::write(uint8_t _register, uint8_t _data)
{
 80a06cc:	b538      	push	{r3, r4, r5, lr}
 80a06ce:	4614      	mov	r4, r2
 80a06d0:	460d      	mov	r5, r1
    Wire.begin();
 80a06d2:	f002 faf5 	bl	80a2cc0 <_Z19__fetch_global_Wirev>
 80a06d6:	f001 ff0b 	bl	80a24f0 <_ZN7TwoWire5beginEv>
    Wire.beginTransmission(MMA7660_ADDR);
 80a06da:	f002 faf1 	bl	80a2cc0 <_Z19__fetch_global_Wirev>
 80a06de:	214c      	movs	r1, #76	; 0x4c
 80a06e0:	f001 ff3c 	bl	80a255c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(_register);
 80a06e4:	f002 faec 	bl	80a2cc0 <_Z19__fetch_global_Wirev>
 80a06e8:	6803      	ldr	r3, [r0, #0]
 80a06ea:	4629      	mov	r1, r5
 80a06ec:	689b      	ldr	r3, [r3, #8]
 80a06ee:	4798      	blx	r3
    Wire.write(_data);
 80a06f0:	f002 fae6 	bl	80a2cc0 <_Z19__fetch_global_Wirev>
 80a06f4:	6803      	ldr	r3, [r0, #0]
 80a06f6:	4621      	mov	r1, r4
 80a06f8:	689b      	ldr	r3, [r3, #8]
 80a06fa:	4798      	blx	r3
    Wire.endTransmission();
 80a06fc:	f002 fae0 	bl	80a2cc0 <_Z19__fetch_global_Wirev>
}
 80a0700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
 80a0704:	f001 bf31 	b.w	80a256a <_ZN7TwoWire15endTransmissionEv>

080a0708 <_ZN7MMA76607setModeEh>:
    setMode(MMA7660_STAND_BY);
    setSampleRate(AUTO_SLEEP_32);
    setMode(MMA7660_ACTIVE);
}
void MMA7660::setMode(uint8_t mode)
{
 80a0708:	460a      	mov	r2, r1
    write(MMA7660_MODE,mode);
 80a070a:	2107      	movs	r1, #7
 80a070c:	f7ff bfde 	b.w	80a06cc <_ZN7MMA76605writeEhh>

080a0710 <_ZN7MMA766013setSampleRateEh>:
}
void MMA7660::setSampleRate(uint8_t rate)
{
 80a0710:	460a      	mov	r2, r1
    write(MMA7660_SR,rate);
 80a0712:	2108      	movs	r1, #8
 80a0714:	f7ff bfda 	b.w	80a06cc <_ZN7MMA76605writeEhh>

080a0718 <_ZN7MMA76604initEv>:
{
 80a0718:	b510      	push	{r4, lr}
 80a071a:	4604      	mov	r4, r0
    setMode(MMA7660_STAND_BY);
 80a071c:	2100      	movs	r1, #0
 80a071e:	f7ff fff3 	bl	80a0708 <_ZN7MMA76607setModeEh>
    setSampleRate(AUTO_SLEEP_32);
 80a0722:	4620      	mov	r0, r4
 80a0724:	2102      	movs	r1, #2
 80a0726:	f7ff fff3 	bl	80a0710 <_ZN7MMA766013setSampleRateEh>
    setMode(MMA7660_ACTIVE);
 80a072a:	4620      	mov	r0, r4
}
 80a072c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    setMode(MMA7660_ACTIVE);
 80a0730:	2101      	movs	r1, #1
 80a0732:	f7ff bfe9 	b.w	80a0708 <_ZN7MMA76607setModeEh>

080a0736 <_ZN7MMA76606getXYZEPaS0_S0_>:
}
/*Function: Get the contents of the registers in the MMA7660*/
/*          so as to calculate the acceleration.            */
void MMA7660::getXYZ(int8_t *x,int8_t *y,int8_t *z)
{
 80a0736:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a073a:	461d      	mov	r5, r3
    unsigned char val[3];
    int count = 0;
    int timeout = 0;

    val[0] = val[1] = val[2] = 64;
 80a073c:	2340      	movs	r3, #64	; 0x40
{
 80a073e:	460f      	mov	r7, r1
 80a0740:	4616      	mov	r6, r2
    val[0] = val[1] = val[2] = 64;
 80a0742:	2466      	movs	r4, #102	; 0x66
 80a0744:	f88d 3006 	strb.w	r3, [sp, #6]
 80a0748:	f88d 3005 	strb.w	r3, [sp, #5]
 80a074c:	f88d 3004 	strb.w	r3, [sp, #4]
    while(Wire.available() > 0)
 80a0750:	f002 fab6 	bl	80a2cc0 <_Z19__fetch_global_Wirev>
 80a0754:	6803      	ldr	r3, [r0, #0]
 80a0756:	691b      	ldr	r3, [r3, #16]
 80a0758:	4798      	blx	r3
 80a075a:	2800      	cmp	r0, #0
 80a075c:	dd09      	ble.n	80a0772 <_ZN7MMA76606getXYZEPaS0_S0_+0x3c>
    {
        Wire.read();
 80a075e:	f002 faaf 	bl	80a2cc0 <_Z19__fetch_global_Wirev>
 80a0762:	6803      	ldr	r3, [r0, #0]
 80a0764:	695b      	ldr	r3, [r3, #20]
 80a0766:	4798      	blx	r3
        delay(1);
 80a0768:	2001      	movs	r0, #1
 80a076a:	f001 fc3d 	bl	80a1fe8 <delay>
        if(timeout++ > 100) break;
 80a076e:	3c01      	subs	r4, #1
 80a0770:	d1ee      	bne.n	80a0750 <_ZN7MMA76606getXYZEPaS0_S0_+0x1a>
    }

    Wire.requestFrom(MMA7660_ADDR,3);
 80a0772:	f002 faa5 	bl	80a2cc0 <_Z19__fetch_global_Wirev>
 80a0776:	2203      	movs	r2, #3
 80a0778:	214c      	movs	r1, #76	; 0x4c
 80a077a:	f001 fee8 	bl	80a254e <_ZN7TwoWire11requestFromEhj>
    int count = 0;
 80a077e:	f04f 0800 	mov.w	r8, #0
 80a0782:	ac01      	add	r4, sp, #4
    while(Wire.available())
 80a0784:	f002 fa9c 	bl	80a2cc0 <_Z19__fetch_global_Wirev>
 80a0788:	6803      	ldr	r3, [r0, #0]
 80a078a:	691b      	ldr	r3, [r3, #16]
 80a078c:	4798      	blx	r3
 80a078e:	b180      	cbz	r0, 80a07b2 <_ZN7MMA76606getXYZEPaS0_S0_+0x7c>
    {
        if(count < 3)
 80a0790:	f1b8 0f02 	cmp.w	r8, #2
 80a0794:	dc09      	bgt.n	80a07aa <_ZN7MMA76606getXYZEPaS0_S0_+0x74>
        {
            while ( val[count] > 63 )  // reload the damn thing it is bad
 80a0796:	7823      	ldrb	r3, [r4, #0]
 80a0798:	2b3f      	cmp	r3, #63	; 0x3f
 80a079a:	d906      	bls.n	80a07aa <_ZN7MMA76606getXYZEPaS0_S0_+0x74>
            {
              val[count] = Wire.read();
 80a079c:	f002 fa90 	bl	80a2cc0 <_Z19__fetch_global_Wirev>
 80a07a0:	6803      	ldr	r3, [r0, #0]
 80a07a2:	695b      	ldr	r3, [r3, #20]
 80a07a4:	4798      	blx	r3
 80a07a6:	7020      	strb	r0, [r4, #0]
            while ( val[count] > 63 )  // reload the damn thing it is bad
 80a07a8:	e7f5      	b.n	80a0796 <_ZN7MMA76606getXYZEPaS0_S0_+0x60>
            }
        }
        count++;
 80a07aa:	f108 0801 	add.w	r8, r8, #1
 80a07ae:	3401      	adds	r4, #1
    while(Wire.available())
 80a07b0:	e7e8      	b.n	80a0784 <_ZN7MMA76606getXYZEPaS0_S0_+0x4e>
    }
    *x = ((char)(val[0]<<2))/4;
 80a07b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a07b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80a07ba:	703b      	strb	r3, [r7, #0]
    *y = ((char)(val[1]<<2))/4;
 80a07bc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a07c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80a07c4:	7033      	strb	r3, [r6, #0]
    *z = ((char)(val[2]<<2))/4;
 80a07c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a07ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80a07ce:	702b      	strb	r3, [r5, #0]
}
 80a07d0:	b002      	add	sp, #8
 80a07d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a07d6 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
 80a07d6:	b510      	push	{r4, lr}
 80a07d8:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
 80a07da:	7001      	strb	r1, [r0, #0]
 80a07dc:	7042      	strb	r2, [r0, #1]
 80a07de:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
 80a07e0:	2101      	movs	r1, #1
 80a07e2:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80a07e6:	f002 fa99 	bl	80a2d1c <calloc>
 80a07ea:	6060      	str	r0, [r4, #4]
}
 80a07ec:	4620      	mov	r0, r4
 80a07ee:	bd10      	pop	{r4, pc}

080a07f0 <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
 80a07f0:	b510      	push	{r4, lr}
 80a07f2:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
 80a07f4:	2100      	movs	r1, #0
 80a07f6:	7800      	ldrb	r0, [r0, #0]
 80a07f8:	f002 f9d1 	bl	80a2b9e <digitalWrite>
 80a07fc:	2014      	movs	r0, #20
 80a07fe:	f000 f8d7 	bl	80a09b0 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
 80a0802:	7820      	ldrb	r0, [r4, #0]
 80a0804:	2101      	movs	r1, #1
 80a0806:	f002 f9ca 	bl	80a2b9e <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
 80a080a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a080e:	2014      	movs	r0, #20
 80a0810:	f000 b8ce 	b.w	80a09b0 <HAL_Delay_Microseconds>

080a0814 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
 80a0814:	b570      	push	{r4, r5, r6, lr}
 80a0816:	4606      	mov	r6, r0
 80a0818:	460c      	mov	r4, r1
 80a081a:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
 80a081c:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
 80a081e:	bf4c      	ite	mi
 80a0820:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
 80a0822:	2100      	movpl	r1, #0
            digitalWrite(_data_pin, HIGH);
 80a0824:	7870      	ldrb	r0, [r6, #1]
            digitalWrite(_data_pin, LOW);
 80a0826:	f002 f9ba 	bl	80a2b9e <digitalWrite>
    for (byte i=0; i<8; i++)
 80a082a:	3d01      	subs	r5, #1
        clk();
 80a082c:	4630      	mov	r0, r6
 80a082e:	f7ff ffdf 	bl	80a07f0 <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
 80a0832:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
 80a0834:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
 80a0838:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
 80a083a:	d1ef      	bne.n	80a081c <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
 80a083c:	bd70      	pop	{r4, r5, r6, pc}

080a083e <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
 80a083e:	f013 0f80 	tst.w	r3, #128	; 0x80
{
 80a0842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0844:	460d      	mov	r5, r1
 80a0846:	4616      	mov	r6, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
 80a0848:	bf14      	ite	ne
 80a084a:	21c0      	movne	r1, #192	; 0xc0
 80a084c:	21e0      	moveq	r1, #224	; 0xe0
{
 80a084e:	4604      	mov	r4, r0
 80a0850:	461f      	mov	r7, r3
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
 80a0852:	065a      	lsls	r2, r3, #25
 80a0854:	bf58      	it	pl
 80a0856:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
 80a085a:	0633      	lsls	r3, r6, #24
 80a085c:	bf58      	it	pl
 80a085e:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
 80a0862:	0670      	lsls	r0, r6, #25
 80a0864:	bf58      	it	pl
 80a0866:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
 80a086a:	062a      	lsls	r2, r5, #24
 80a086c:	bf58      	it	pl
 80a086e:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
 80a0872:	066b      	lsls	r3, r5, #25
 80a0874:	bf58      	it	pl
 80a0876:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
 80a087a:	4620      	mov	r0, r4
 80a087c:	f7ff ffca 	bl	80a0814 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
 80a0880:	4639      	mov	r1, r7
 80a0882:	4620      	mov	r0, r4
 80a0884:	f7ff ffc6 	bl	80a0814 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
 80a0888:	4631      	mov	r1, r6
 80a088a:	4620      	mov	r0, r4
 80a088c:	f7ff ffc2 	bl	80a0814 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
 80a0890:	4629      	mov	r1, r5
 80a0892:	4620      	mov	r0, r4
}
 80a0894:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    sendByte(red);
 80a0898:	f7ff bfbc 	b.w	80a0814 <_ZN12ChainableLED8sendByteEh>

080a089c <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
 80a089c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a08a0:	4604      	mov	r4, r0
 80a08a2:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
 80a08a4:	2100      	movs	r1, #0
{
 80a08a6:	4690      	mov	r8, r2
 80a08a8:	4699      	mov	r9, r3
 80a08aa:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
 80a08ae:	f7ff ffb1 	bl	80a0814 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a08b2:	2100      	movs	r1, #0
 80a08b4:	4620      	mov	r0, r4
 80a08b6:	f7ff ffad 	bl	80a0814 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a08ba:	2100      	movs	r1, #0
 80a08bc:	4620      	mov	r0, r4
 80a08be:	f7ff ffa9 	bl	80a0814 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a08c2:	2100      	movs	r1, #0
 80a08c4:	4620      	mov	r0, r4
 80a08c6:	f7ff ffa5 	bl	80a0814 <_ZN12ChainableLED8sendByteEh>
 80a08ca:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
 80a08cc:	78a3      	ldrb	r3, [r4, #2]
 80a08ce:	b2f5      	uxtb	r5, r6
 80a08d0:	42ab      	cmp	r3, r5
 80a08d2:	d919      	bls.n	80a0908 <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
 80a08d4:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        if (i == led)
 80a08d8:	42af      	cmp	r7, r5
            _led_state[i*3 + _CL_GREEN] = green;
 80a08da:	f100 0201 	add.w	r2, r0, #1
            _led_state[i*3 + _CL_BLUE] = blue;
 80a08de:	f100 0302 	add.w	r3, r0, #2
        if (i == led)
 80a08e2:	d108      	bne.n	80a08f6 <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
            _led_state[i*3 + _CL_RED] = red;
 80a08e4:	6861      	ldr	r1, [r4, #4]
 80a08e6:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
 80a08ea:	6861      	ldr	r1, [r4, #4]
 80a08ec:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
 80a08f0:	6861      	ldr	r1, [r4, #4]
 80a08f2:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
 80a08f6:	6861      	ldr	r1, [r4, #4]
 80a08f8:	3601      	adds	r6, #1
 80a08fa:	5ccb      	ldrb	r3, [r1, r3]
 80a08fc:	5c8a      	ldrb	r2, [r1, r2]
 80a08fe:	5c09      	ldrb	r1, [r1, r0]
 80a0900:	4620      	mov	r0, r4
 80a0902:	f7ff ff9c 	bl	80a083e <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
 80a0906:	e7e1      	b.n	80a08cc <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
 80a0908:	4620      	mov	r0, r4
 80a090a:	2100      	movs	r1, #0
 80a090c:	f7ff ff82 	bl	80a0814 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a0910:	4620      	mov	r0, r4
 80a0912:	2100      	movs	r1, #0
 80a0914:	f7ff ff7e 	bl	80a0814 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a0918:	4620      	mov	r0, r4
 80a091a:	2100      	movs	r1, #0
 80a091c:	f7ff ff7a 	bl	80a0814 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a0920:	4620      	mov	r0, r4
}
 80a0922:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
 80a0926:	2100      	movs	r1, #0
 80a0928:	f7ff bf74 	b.w	80a0814 <_ZN12ChainableLED8sendByteEh>

080a092c <_ZN12ChainableLED4initEv>:
{
 80a092c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a092e:	4604      	mov	r4, r0
    pinMode(_data_pin, OUTPUT);
 80a0930:	2500      	movs	r5, #0
    pinMode(_clk_pin, OUTPUT);
 80a0932:	2101      	movs	r1, #1
 80a0934:	7800      	ldrb	r0, [r0, #0]
 80a0936:	f002 f921 	bl	80a2b7c <pinMode>
    pinMode(_data_pin, OUTPUT);
 80a093a:	2101      	movs	r1, #1
 80a093c:	7860      	ldrb	r0, [r4, #1]
 80a093e:	f002 f91d 	bl	80a2b7c <pinMode>
        setColorRGB(i, 0, 0, 0);
 80a0942:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
 80a0944:	78a3      	ldrb	r3, [r4, #2]
 80a0946:	b2e9      	uxtb	r1, r5
 80a0948:	428b      	cmp	r3, r1
 80a094a:	d907      	bls.n	80a095c <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
 80a094c:	2300      	movs	r3, #0
 80a094e:	4620      	mov	r0, r4
 80a0950:	461a      	mov	r2, r3
 80a0952:	9600      	str	r6, [sp, #0]
 80a0954:	f7ff ffa2 	bl	80a089c <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
 80a0958:	3501      	adds	r5, #1
 80a095a:	e7f3      	b.n	80a0944 <_ZN12ChainableLED4initEv+0x18>
}
 80a095c:	b002      	add	sp, #8
 80a095e:	bd70      	pop	{r4, r5, r6, pc}

080a0960 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0960:	b508      	push	{r3, lr}
 80a0962:	4b02      	ldr	r3, [pc, #8]	; (80a096c <HAL_Pin_Mode+0xc>)
 80a0964:	681b      	ldr	r3, [r3, #0]
 80a0966:	689b      	ldr	r3, [r3, #8]
 80a0968:	9301      	str	r3, [sp, #4]
 80a096a:	bd08      	pop	{r3, pc}
 80a096c:	080601b0 	.word	0x080601b0

080a0970 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0970:	b508      	push	{r3, lr}
 80a0972:	4b02      	ldr	r3, [pc, #8]	; (80a097c <HAL_Get_Pin_Mode+0xc>)
 80a0974:	681b      	ldr	r3, [r3, #0]
 80a0976:	68db      	ldr	r3, [r3, #12]
 80a0978:	9301      	str	r3, [sp, #4]
 80a097a:	bd08      	pop	{r3, pc}
 80a097c:	080601b0 	.word	0x080601b0

080a0980 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0980:	b508      	push	{r3, lr}
 80a0982:	4b02      	ldr	r3, [pc, #8]	; (80a098c <HAL_GPIO_Write+0xc>)
 80a0984:	681b      	ldr	r3, [r3, #0]
 80a0986:	691b      	ldr	r3, [r3, #16]
 80a0988:	9301      	str	r3, [sp, #4]
 80a098a:	bd08      	pop	{r3, pc}
 80a098c:	080601b0 	.word	0x080601b0

080a0990 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a0990:	b508      	push	{r3, lr}
 80a0992:	4b02      	ldr	r3, [pc, #8]	; (80a099c <HAL_GPIO_Read+0xc>)
 80a0994:	681b      	ldr	r3, [r3, #0]
 80a0996:	695b      	ldr	r3, [r3, #20]
 80a0998:	9301      	str	r3, [sp, #4]
 80a099a:	bd08      	pop	{r3, pc}
 80a099c:	080601b0 	.word	0x080601b0

080a09a0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a09a0:	b508      	push	{r3, lr}
 80a09a2:	4b02      	ldr	r3, [pc, #8]	; (80a09ac <HAL_RNG_GetRandomNumber+0xc>)
 80a09a4:	681b      	ldr	r3, [r3, #0]
 80a09a6:	685b      	ldr	r3, [r3, #4]
 80a09a8:	9301      	str	r3, [sp, #4]
 80a09aa:	bd08      	pop	{r3, pc}
 80a09ac:	0806019c 	.word	0x0806019c

080a09b0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a09b0:	b508      	push	{r3, lr}
 80a09b2:	4b02      	ldr	r3, [pc, #8]	; (80a09bc <HAL_Delay_Microseconds+0xc>)
 80a09b4:	681b      	ldr	r3, [r3, #0]
 80a09b6:	68db      	ldr	r3, [r3, #12]
 80a09b8:	9301      	str	r3, [sp, #4]
 80a09ba:	bd08      	pop	{r3, pc}
 80a09bc:	0806019c 	.word	0x0806019c

080a09c0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a09c0:	b508      	push	{r3, lr}
 80a09c2:	4b02      	ldr	r3, [pc, #8]	; (80a09cc <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a09c4:	681b      	ldr	r3, [r3, #0]
 80a09c6:	695b      	ldr	r3, [r3, #20]
 80a09c8:	9301      	str	r3, [sp, #4]
 80a09ca:	bd08      	pop	{r3, pc}
 80a09cc:	0806019c 	.word	0x0806019c

080a09d0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a09d0:	b508      	push	{r3, lr}
 80a09d2:	4b02      	ldr	r3, [pc, #8]	; (80a09dc <os_mutex_recursive_create+0xc>)
 80a09d4:	681b      	ldr	r3, [r3, #0]
 80a09d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a09d8:	9301      	str	r3, [sp, #4]
 80a09da:	bd08      	pop	{r3, pc}
 80a09dc:	080601d0 	.word	0x080601d0

080a09e0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a09e0:	b508      	push	{r3, lr}
 80a09e2:	4b02      	ldr	r3, [pc, #8]	; (80a09ec <os_mutex_recursive_destroy+0xc>)
 80a09e4:	681b      	ldr	r3, [r3, #0]
 80a09e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a09e8:	9301      	str	r3, [sp, #4]
 80a09ea:	bd08      	pop	{r3, pc}
 80a09ec:	080601d0 	.word	0x080601d0

080a09f0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a09f0:	b508      	push	{r3, lr}
 80a09f2:	4b02      	ldr	r3, [pc, #8]	; (80a09fc <os_mutex_recursive_lock+0xc>)
 80a09f4:	681b      	ldr	r3, [r3, #0]
 80a09f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a09f8:	9301      	str	r3, [sp, #4]
 80a09fa:	bd08      	pop	{r3, pc}
 80a09fc:	080601d0 	.word	0x080601d0

080a0a00 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a0a00:	b508      	push	{r3, lr}
 80a0a02:	4b02      	ldr	r3, [pc, #8]	; (80a0a0c <os_mutex_recursive_unlock+0xc>)
 80a0a04:	681b      	ldr	r3, [r3, #0]
 80a0a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0a08:	9301      	str	r3, [sp, #4]
 80a0a0a:	bd08      	pop	{r3, pc}
 80a0a0c:	080601d0 	.word	0x080601d0

080a0a10 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 80a0a10:	b508      	push	{r3, lr}
 80a0a12:	4b02      	ldr	r3, [pc, #8]	; (80a0a1c <hal_usart_end+0xc>)
 80a0a14:	681b      	ldr	r3, [r3, #0]
 80a0a16:	6a1b      	ldr	r3, [r3, #32]
 80a0a18:	9301      	str	r3, [sp, #4]
 80a0a1a:	bd08      	pop	{r3, pc}
 80a0a1c:	080601c4 	.word	0x080601c4

080a0a20 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0a20:	b508      	push	{r3, lr}
 80a0a22:	4b02      	ldr	r3, [pc, #8]	; (80a0a2c <hal_usart_write+0xc>)
 80a0a24:	681b      	ldr	r3, [r3, #0]
 80a0a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0a28:	9301      	str	r3, [sp, #4]
 80a0a2a:	bd08      	pop	{r3, pc}
 80a0a2c:	080601c4 	.word	0x080601c4

080a0a30 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0a30:	b508      	push	{r3, lr}
 80a0a32:	4b02      	ldr	r3, [pc, #8]	; (80a0a3c <hal_usart_available+0xc>)
 80a0a34:	681b      	ldr	r3, [r3, #0]
 80a0a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0a38:	9301      	str	r3, [sp, #4]
 80a0a3a:	bd08      	pop	{r3, pc}
 80a0a3c:	080601c4 	.word	0x080601c4

080a0a40 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0a40:	b508      	push	{r3, lr}
 80a0a42:	4b02      	ldr	r3, [pc, #8]	; (80a0a4c <hal_usart_read+0xc>)
 80a0a44:	681b      	ldr	r3, [r3, #0]
 80a0a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0a48:	9301      	str	r3, [sp, #4]
 80a0a4a:	bd08      	pop	{r3, pc}
 80a0a4c:	080601c4 	.word	0x080601c4

080a0a50 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0a50:	b508      	push	{r3, lr}
 80a0a52:	4b02      	ldr	r3, [pc, #8]	; (80a0a5c <hal_usart_peek+0xc>)
 80a0a54:	681b      	ldr	r3, [r3, #0]
 80a0a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0a58:	9301      	str	r3, [sp, #4]
 80a0a5a:	bd08      	pop	{r3, pc}
 80a0a5c:	080601c4 	.word	0x080601c4

080a0a60 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0a60:	b508      	push	{r3, lr}
 80a0a62:	4b02      	ldr	r3, [pc, #8]	; (80a0a6c <hal_usart_flush+0xc>)
 80a0a64:	681b      	ldr	r3, [r3, #0]
 80a0a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0a68:	9301      	str	r3, [sp, #4]
 80a0a6a:	bd08      	pop	{r3, pc}
 80a0a6c:	080601c4 	.word	0x080601c4

080a0a70 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a0a70:	b508      	push	{r3, lr}
 80a0a72:	4b02      	ldr	r3, [pc, #8]	; (80a0a7c <hal_usart_is_enabled+0xc>)
 80a0a74:	681b      	ldr	r3, [r3, #0]
 80a0a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0a78:	9301      	str	r3, [sp, #4]
 80a0a7a:	bd08      	pop	{r3, pc}
 80a0a7c:	080601c4 	.word	0x080601c4

080a0a80 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0a80:	b508      	push	{r3, lr}
 80a0a82:	4b02      	ldr	r3, [pc, #8]	; (80a0a8c <hal_usart_available_data_for_write+0xc>)
 80a0a84:	681b      	ldr	r3, [r3, #0]
 80a0a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0a88:	9301      	str	r3, [sp, #4]
 80a0a8a:	bd08      	pop	{r3, pc}
 80a0a8c:	080601c4 	.word	0x080601c4

080a0a90 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 80a0a90:	b508      	push	{r3, lr}
 80a0a92:	4b02      	ldr	r3, [pc, #8]	; (80a0a9c <hal_usart_begin_config+0xc>)
 80a0a94:	681b      	ldr	r3, [r3, #0]
 80a0a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0a98:	9301      	str	r3, [sp, #4]
 80a0a9a:	bd08      	pop	{r3, pc}
 80a0a9c:	080601c4 	.word	0x080601c4

080a0aa0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 80a0aa0:	b508      	push	{r3, lr}
 80a0aa2:	4b02      	ldr	r3, [pc, #8]	; (80a0aac <hal_usart_init_ex+0xc>)
 80a0aa4:	681b      	ldr	r3, [r3, #0]
 80a0aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0aa8:	9301      	str	r3, [sp, #4]
 80a0aaa:	bd08      	pop	{r3, pc}
 80a0aac:	080601c4 	.word	0x080601c4

080a0ab0 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a0ab0:	b508      	push	{r3, lr}
 80a0ab2:	4b02      	ldr	r3, [pc, #8]	; (80a0abc <hal_i2c_begin+0xc>)
 80a0ab4:	681b      	ldr	r3, [r3, #0]
 80a0ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0ab8:	9301      	str	r3, [sp, #4]
 80a0aba:	bd08      	pop	{r3, pc}
 80a0abc:	080601ac 	.word	0x080601ac

080a0ac0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a0ac0:	b508      	push	{r3, lr}
 80a0ac2:	4b02      	ldr	r3, [pc, #8]	; (80a0acc <hal_i2c_begin_transmission+0xc>)
 80a0ac4:	681b      	ldr	r3, [r3, #0]
 80a0ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0ac8:	9301      	str	r3, [sp, #4]
 80a0aca:	bd08      	pop	{r3, pc}
 80a0acc:	080601ac 	.word	0x080601ac

080a0ad0 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a0ad0:	b508      	push	{r3, lr}
 80a0ad2:	4b02      	ldr	r3, [pc, #8]	; (80a0adc <hal_i2c_end_transmission+0xc>)
 80a0ad4:	681b      	ldr	r3, [r3, #0]
 80a0ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0ad8:	9301      	str	r3, [sp, #4]
 80a0ada:	bd08      	pop	{r3, pc}
 80a0adc:	080601ac 	.word	0x080601ac

080a0ae0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0ae0:	b508      	push	{r3, lr}
 80a0ae2:	4b02      	ldr	r3, [pc, #8]	; (80a0aec <hal_i2c_write+0xc>)
 80a0ae4:	681b      	ldr	r3, [r3, #0]
 80a0ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0ae8:	9301      	str	r3, [sp, #4]
 80a0aea:	bd08      	pop	{r3, pc}
 80a0aec:	080601ac 	.word	0x080601ac

080a0af0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0af0:	b508      	push	{r3, lr}
 80a0af2:	4b02      	ldr	r3, [pc, #8]	; (80a0afc <hal_i2c_available+0xc>)
 80a0af4:	681b      	ldr	r3, [r3, #0]
 80a0af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0af8:	9301      	str	r3, [sp, #4]
 80a0afa:	bd08      	pop	{r3, pc}
 80a0afc:	080601ac 	.word	0x080601ac

080a0b00 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0b00:	b508      	push	{r3, lr}
 80a0b02:	4b02      	ldr	r3, [pc, #8]	; (80a0b0c <hal_i2c_read+0xc>)
 80a0b04:	681b      	ldr	r3, [r3, #0]
 80a0b06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0b08:	9301      	str	r3, [sp, #4]
 80a0b0a:	bd08      	pop	{r3, pc}
 80a0b0c:	080601ac 	.word	0x080601ac

080a0b10 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0b10:	b508      	push	{r3, lr}
 80a0b12:	4b02      	ldr	r3, [pc, #8]	; (80a0b1c <hal_i2c_peek+0xc>)
 80a0b14:	681b      	ldr	r3, [r3, #0]
 80a0b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0b18:	9301      	str	r3, [sp, #4]
 80a0b1a:	bd08      	pop	{r3, pc}
 80a0b1c:	080601ac 	.word	0x080601ac

080a0b20 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0b20:	b508      	push	{r3, lr}
 80a0b22:	4b02      	ldr	r3, [pc, #8]	; (80a0b2c <hal_i2c_flush+0xc>)
 80a0b24:	681b      	ldr	r3, [r3, #0]
 80a0b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0b28:	9301      	str	r3, [sp, #4]
 80a0b2a:	bd08      	pop	{r3, pc}
 80a0b2c:	080601ac 	.word	0x080601ac

080a0b30 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0b30:	b508      	push	{r3, lr}
 80a0b32:	4b02      	ldr	r3, [pc, #8]	; (80a0b3c <hal_i2c_is_enabled+0xc>)
 80a0b34:	681b      	ldr	r3, [r3, #0]
 80a0b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0b38:	9301      	str	r3, [sp, #4]
 80a0b3a:	bd08      	pop	{r3, pc}
 80a0b3c:	080601ac 	.word	0x080601ac

080a0b40 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0b40:	b508      	push	{r3, lr}
 80a0b42:	4b03      	ldr	r3, [pc, #12]	; (80a0b50 <hal_i2c_init+0x10>)
 80a0b44:	681b      	ldr	r3, [r3, #0]
 80a0b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0b4a:	9301      	str	r3, [sp, #4]
 80a0b4c:	bd08      	pop	{r3, pc}
 80a0b4e:	0000      	.short	0x0000
 80a0b50:	080601ac 	.word	0x080601ac

080a0b54 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 80a0b54:	b508      	push	{r3, lr}
 80a0b56:	4b03      	ldr	r3, [pc, #12]	; (80a0b64 <hal_i2c_request_ex+0x10>)
 80a0b58:	681b      	ldr	r3, [r3, #0]
 80a0b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0b5e:	9301      	str	r3, [sp, #4]
 80a0b60:	bd08      	pop	{r3, pc}
 80a0b62:	0000      	.short	0x0000
 80a0b64:	080601ac 	.word	0x080601ac

080a0b68 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0b68:	b508      	push	{r3, lr}
 80a0b6a:	4b02      	ldr	r3, [pc, #8]	; (80a0b74 <hal_spi_init+0xc>)
 80a0b6c:	681b      	ldr	r3, [r3, #0]
 80a0b6e:	69db      	ldr	r3, [r3, #28]
 80a0b70:	9301      	str	r3, [sp, #4]
 80a0b72:	bd08      	pop	{r3, pc}
 80a0b74:	080601b4 	.word	0x080601b4

080a0b78 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a0b78:	b508      	push	{r3, lr}
 80a0b7a:	4b02      	ldr	r3, [pc, #8]	; (80a0b84 <hal_spi_is_enabled+0xc>)
 80a0b7c:	681b      	ldr	r3, [r3, #0]
 80a0b7e:	6a1b      	ldr	r3, [r3, #32]
 80a0b80:	9301      	str	r3, [sp, #4]
 80a0b82:	bd08      	pop	{r3, pc}
 80a0b84:	080601b4 	.word	0x080601b4

080a0b88 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0b88:	b508      	push	{r3, lr}
 80a0b8a:	4b02      	ldr	r3, [pc, #8]	; (80a0b94 <HAL_USB_USART_Init+0xc>)
 80a0b8c:	681b      	ldr	r3, [r3, #0]
 80a0b8e:	681b      	ldr	r3, [r3, #0]
 80a0b90:	9301      	str	r3, [sp, #4]
 80a0b92:	bd08      	pop	{r3, pc}
 80a0b94:	080601d8 	.word	0x080601d8

080a0b98 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0b98:	b508      	push	{r3, lr}
 80a0b9a:	4b02      	ldr	r3, [pc, #8]	; (80a0ba4 <HAL_USB_USART_Begin+0xc>)
 80a0b9c:	681b      	ldr	r3, [r3, #0]
 80a0b9e:	685b      	ldr	r3, [r3, #4]
 80a0ba0:	9301      	str	r3, [sp, #4]
 80a0ba2:	bd08      	pop	{r3, pc}
 80a0ba4:	080601d8 	.word	0x080601d8

080a0ba8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 80a0ba8:	b508      	push	{r3, lr}
 80a0baa:	4b02      	ldr	r3, [pc, #8]	; (80a0bb4 <HAL_USB_USART_End+0xc>)
 80a0bac:	681b      	ldr	r3, [r3, #0]
 80a0bae:	689b      	ldr	r3, [r3, #8]
 80a0bb0:	9301      	str	r3, [sp, #4]
 80a0bb2:	bd08      	pop	{r3, pc}
 80a0bb4:	080601d8 	.word	0x080601d8

080a0bb8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0bb8:	b508      	push	{r3, lr}
 80a0bba:	4b02      	ldr	r3, [pc, #8]	; (80a0bc4 <HAL_USB_USART_Available_Data+0xc>)
 80a0bbc:	681b      	ldr	r3, [r3, #0]
 80a0bbe:	691b      	ldr	r3, [r3, #16]
 80a0bc0:	9301      	str	r3, [sp, #4]
 80a0bc2:	bd08      	pop	{r3, pc}
 80a0bc4:	080601d8 	.word	0x080601d8

080a0bc8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0bc8:	b508      	push	{r3, lr}
 80a0bca:	4b02      	ldr	r3, [pc, #8]	; (80a0bd4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0bcc:	681b      	ldr	r3, [r3, #0]
 80a0bce:	695b      	ldr	r3, [r3, #20]
 80a0bd0:	9301      	str	r3, [sp, #4]
 80a0bd2:	bd08      	pop	{r3, pc}
 80a0bd4:	080601d8 	.word	0x080601d8

080a0bd8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0bd8:	b508      	push	{r3, lr}
 80a0bda:	4b02      	ldr	r3, [pc, #8]	; (80a0be4 <HAL_USB_USART_Receive_Data+0xc>)
 80a0bdc:	681b      	ldr	r3, [r3, #0]
 80a0bde:	699b      	ldr	r3, [r3, #24]
 80a0be0:	9301      	str	r3, [sp, #4]
 80a0be2:	bd08      	pop	{r3, pc}
 80a0be4:	080601d8 	.word	0x080601d8

080a0be8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0be8:	b508      	push	{r3, lr}
 80a0bea:	4b02      	ldr	r3, [pc, #8]	; (80a0bf4 <HAL_USB_USART_Send_Data+0xc>)
 80a0bec:	681b      	ldr	r3, [r3, #0]
 80a0bee:	69db      	ldr	r3, [r3, #28]
 80a0bf0:	9301      	str	r3, [sp, #4]
 80a0bf2:	bd08      	pop	{r3, pc}
 80a0bf4:	080601d8 	.word	0x080601d8

080a0bf8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0bf8:	b508      	push	{r3, lr}
 80a0bfa:	4b02      	ldr	r3, [pc, #8]	; (80a0c04 <HAL_USB_USART_Flush_Data+0xc>)
 80a0bfc:	681b      	ldr	r3, [r3, #0]
 80a0bfe:	6a1b      	ldr	r3, [r3, #32]
 80a0c00:	9301      	str	r3, [sp, #4]
 80a0c02:	bd08      	pop	{r3, pc}
 80a0c04:	080601d8 	.word	0x080601d8

080a0c08 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0c08:	b508      	push	{r3, lr}
 80a0c0a:	4b02      	ldr	r3, [pc, #8]	; (80a0c14 <inet_gethostbyname+0xc>)
 80a0c0c:	681b      	ldr	r3, [r3, #0]
 80a0c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0c10:	9301      	str	r3, [sp, #4]
 80a0c12:	bd08      	pop	{r3, pc}
 80a0c14:	080601c0 	.word	0x080601c0

080a0c18 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a0c18:	b508      	push	{r3, lr}
 80a0c1a:	4b02      	ldr	r3, [pc, #8]	; (80a0c24 <panic_+0xc>)
 80a0c1c:	681b      	ldr	r3, [r3, #0]
 80a0c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0c20:	9301      	str	r3, [sp, #4]
 80a0c22:	bd08      	pop	{r3, pc}
 80a0c24:	080201a8 	.word	0x080201a8

080a0c28 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 80a0c28:	b508      	push	{r3, lr}
 80a0c2a:	4b02      	ldr	r3, [pc, #8]	; (80a0c34 <log_message_v+0xc>)
 80a0c2c:	681b      	ldr	r3, [r3, #0]
 80a0c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0c30:	9301      	str	r3, [sp, #4]
 80a0c32:	bd08      	pop	{r3, pc}
 80a0c34:	080201a8 	.word	0x080201a8

080a0c38 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 80a0c38:	b508      	push	{r3, lr}
 80a0c3a:	4b02      	ldr	r3, [pc, #8]	; (80a0c44 <log_level_name+0xc>)
 80a0c3c:	681b      	ldr	r3, [r3, #0]
 80a0c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0c40:	9301      	str	r3, [sp, #4]
 80a0c42:	bd08      	pop	{r3, pc}
 80a0c44:	080201a8 	.word	0x080201a8

080a0c48 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 80a0c48:	b508      	push	{r3, lr}
 80a0c4a:	4b02      	ldr	r3, [pc, #8]	; (80a0c54 <log_set_callbacks+0xc>)
 80a0c4c:	681b      	ldr	r3, [r3, #0]
 80a0c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0c50:	9301      	str	r3, [sp, #4]
 80a0c52:	bd08      	pop	{r3, pc}
 80a0c54:	080201a8 	.word	0x080201a8

080a0c58 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0c58:	b508      	push	{r3, lr}
 80a0c5a:	4b02      	ldr	r3, [pc, #8]	; (80a0c64 <set_system_mode+0xc>)
 80a0c5c:	681b      	ldr	r3, [r3, #0]
 80a0c5e:	685b      	ldr	r3, [r3, #4]
 80a0c60:	9301      	str	r3, [sp, #4]
 80a0c62:	bd08      	pop	{r3, pc}
 80a0c64:	080601a4 	.word	0x080601a4

080a0c68 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0c68:	b508      	push	{r3, lr}
 80a0c6a:	4b02      	ldr	r3, [pc, #8]	; (80a0c74 <system_delay_ms+0xc>)
 80a0c6c:	681b      	ldr	r3, [r3, #0]
 80a0c6e:	695b      	ldr	r3, [r3, #20]
 80a0c70:	9301      	str	r3, [sp, #4]
 80a0c72:	bd08      	pop	{r3, pc}
 80a0c74:	080601a4 	.word	0x080601a4

080a0c78 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0c78:	b508      	push	{r3, lr}
 80a0c7a:	4b03      	ldr	r3, [pc, #12]	; (80a0c88 <system_ctrl_set_app_request_handler+0x10>)
 80a0c7c:	681b      	ldr	r3, [r3, #0]
 80a0c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0c82:	9301      	str	r3, [sp, #4]
 80a0c84:	bd08      	pop	{r3, pc}
 80a0c86:	0000      	.short	0x0000
 80a0c88:	080601a4 	.word	0x080601a4

080a0c8c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0c8c:	b508      	push	{r3, lr}
 80a0c8e:	4b03      	ldr	r3, [pc, #12]	; (80a0c9c <system_ctrl_set_result+0x10>)
 80a0c90:	681b      	ldr	r3, [r3, #0]
 80a0c92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0c96:	9301      	str	r3, [sp, #4]
 80a0c98:	bd08      	pop	{r3, pc}
 80a0c9a:	0000      	.short	0x0000
 80a0c9c:	080601a4 	.word	0x080601a4

080a0ca0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0ca0:	b508      	push	{r3, lr}
 80a0ca2:	4b02      	ldr	r3, [pc, #8]	; (80a0cac <network_connect+0xc>)
 80a0ca4:	681b      	ldr	r3, [r3, #0]
 80a0ca6:	685b      	ldr	r3, [r3, #4]
 80a0ca8:	9301      	str	r3, [sp, #4]
 80a0caa:	bd08      	pop	{r3, pc}
 80a0cac:	080601c8 	.word	0x080601c8

080a0cb0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0cb0:	b508      	push	{r3, lr}
 80a0cb2:	4b02      	ldr	r3, [pc, #8]	; (80a0cbc <network_connecting+0xc>)
 80a0cb4:	681b      	ldr	r3, [r3, #0]
 80a0cb6:	689b      	ldr	r3, [r3, #8]
 80a0cb8:	9301      	str	r3, [sp, #4]
 80a0cba:	bd08      	pop	{r3, pc}
 80a0cbc:	080601c8 	.word	0x080601c8

080a0cc0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0cc0:	b508      	push	{r3, lr}
 80a0cc2:	4b02      	ldr	r3, [pc, #8]	; (80a0ccc <network_disconnect+0xc>)
 80a0cc4:	681b      	ldr	r3, [r3, #0]
 80a0cc6:	68db      	ldr	r3, [r3, #12]
 80a0cc8:	9301      	str	r3, [sp, #4]
 80a0cca:	bd08      	pop	{r3, pc}
 80a0ccc:	080601c8 	.word	0x080601c8

080a0cd0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0cd0:	b508      	push	{r3, lr}
 80a0cd2:	4b02      	ldr	r3, [pc, #8]	; (80a0cdc <network_ready+0xc>)
 80a0cd4:	681b      	ldr	r3, [r3, #0]
 80a0cd6:	691b      	ldr	r3, [r3, #16]
 80a0cd8:	9301      	str	r3, [sp, #4]
 80a0cda:	bd08      	pop	{r3, pc}
 80a0cdc:	080601c8 	.word	0x080601c8

080a0ce0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0ce0:	b508      	push	{r3, lr}
 80a0ce2:	4b02      	ldr	r3, [pc, #8]	; (80a0cec <network_on+0xc>)
 80a0ce4:	681b      	ldr	r3, [r3, #0]
 80a0ce6:	695b      	ldr	r3, [r3, #20]
 80a0ce8:	9301      	str	r3, [sp, #4]
 80a0cea:	bd08      	pop	{r3, pc}
 80a0cec:	080601c8 	.word	0x080601c8

080a0cf0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0cf0:	b508      	push	{r3, lr}
 80a0cf2:	4b02      	ldr	r3, [pc, #8]	; (80a0cfc <network_off+0xc>)
 80a0cf4:	681b      	ldr	r3, [r3, #0]
 80a0cf6:	699b      	ldr	r3, [r3, #24]
 80a0cf8:	9301      	str	r3, [sp, #4]
 80a0cfa:	bd08      	pop	{r3, pc}
 80a0cfc:	080601c8 	.word	0x080601c8

080a0d00 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0d00:	b508      	push	{r3, lr}
 80a0d02:	4b02      	ldr	r3, [pc, #8]	; (80a0d0c <network_listen+0xc>)
 80a0d04:	681b      	ldr	r3, [r3, #0]
 80a0d06:	69db      	ldr	r3, [r3, #28]
 80a0d08:	9301      	str	r3, [sp, #4]
 80a0d0a:	bd08      	pop	{r3, pc}
 80a0d0c:	080601c8 	.word	0x080601c8

080a0d10 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0d10:	b508      	push	{r3, lr}
 80a0d12:	4b02      	ldr	r3, [pc, #8]	; (80a0d1c <network_listening+0xc>)
 80a0d14:	681b      	ldr	r3, [r3, #0]
 80a0d16:	6a1b      	ldr	r3, [r3, #32]
 80a0d18:	9301      	str	r3, [sp, #4]
 80a0d1a:	bd08      	pop	{r3, pc}
 80a0d1c:	080601c8 	.word	0x080601c8

080a0d20 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0d20:	b508      	push	{r3, lr}
 80a0d22:	4b02      	ldr	r3, [pc, #8]	; (80a0d2c <network_set_listen_timeout+0xc>)
 80a0d24:	681b      	ldr	r3, [r3, #0]
 80a0d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0d28:	9301      	str	r3, [sp, #4]
 80a0d2a:	bd08      	pop	{r3, pc}
 80a0d2c:	080601c8 	.word	0x080601c8

080a0d30 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0d30:	b508      	push	{r3, lr}
 80a0d32:	4b02      	ldr	r3, [pc, #8]	; (80a0d3c <network_get_listen_timeout+0xc>)
 80a0d34:	681b      	ldr	r3, [r3, #0]
 80a0d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0d38:	9301      	str	r3, [sp, #4]
 80a0d3a:	bd08      	pop	{r3, pc}
 80a0d3c:	080601c8 	.word	0x080601c8

080a0d40 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0d40:	b508      	push	{r3, lr}
 80a0d42:	4b02      	ldr	r3, [pc, #8]	; (80a0d4c <network_is_on+0xc>)
 80a0d44:	681b      	ldr	r3, [r3, #0]
 80a0d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0d48:	9301      	str	r3, [sp, #4]
 80a0d4a:	bd08      	pop	{r3, pc}
 80a0d4c:	080601c8 	.word	0x080601c8

080a0d50 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a0d50:	b508      	push	{r3, lr}
 80a0d52:	4b02      	ldr	r3, [pc, #8]	; (80a0d5c <network_is_off+0xc>)
 80a0d54:	681b      	ldr	r3, [r3, #0]
 80a0d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0d58:	9301      	str	r3, [sp, #4]
 80a0d5a:	bd08      	pop	{r3, pc}
 80a0d5c:	080601c8 	.word	0x080601c8

080a0d60 <spark_subscribe>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a0d60:	b508      	push	{r3, lr}
 80a0d62:	4b02      	ldr	r3, [pc, #8]	; (80a0d6c <spark_subscribe+0xc>)
 80a0d64:	681b      	ldr	r3, [r3, #0]
 80a0d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0d68:	9301      	str	r3, [sp, #4]
 80a0d6a:	bd08      	pop	{r3, pc}
 80a0d6c:	080601cc 	.word	0x080601cc

080a0d70 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0d70:	b508      	push	{r3, lr}
 80a0d72:	4b02      	ldr	r3, [pc, #8]	; (80a0d7c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0d74:	681b      	ldr	r3, [r3, #0]
 80a0d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0d78:	9301      	str	r3, [sp, #4]
 80a0d7a:	bd08      	pop	{r3, pc}
 80a0d7c:	080601cc 	.word	0x080601cc

080a0d80 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0d80:	b508      	push	{r3, lr}
 80a0d82:	4b02      	ldr	r3, [pc, #8]	; (80a0d8c <malloc+0xc>)
 80a0d84:	681b      	ldr	r3, [r3, #0]
 80a0d86:	681b      	ldr	r3, [r3, #0]
 80a0d88:	9301      	str	r3, [sp, #4]
 80a0d8a:	bd08      	pop	{r3, pc}
 80a0d8c:	080601a0 	.word	0x080601a0

080a0d90 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0d90:	b508      	push	{r3, lr}
 80a0d92:	4b02      	ldr	r3, [pc, #8]	; (80a0d9c <free+0xc>)
 80a0d94:	681b      	ldr	r3, [r3, #0]
 80a0d96:	685b      	ldr	r3, [r3, #4]
 80a0d98:	9301      	str	r3, [sp, #4]
 80a0d9a:	bd08      	pop	{r3, pc}
 80a0d9c:	080601a0 	.word	0x080601a0

080a0da0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0da0:	b508      	push	{r3, lr}
 80a0da2:	4b02      	ldr	r3, [pc, #8]	; (80a0dac <realloc+0xc>)
 80a0da4:	681b      	ldr	r3, [r3, #0]
 80a0da6:	689b      	ldr	r3, [r3, #8]
 80a0da8:	9301      	str	r3, [sp, #4]
 80a0daa:	bd08      	pop	{r3, pc}
 80a0dac:	080601a0 	.word	0x080601a0

080a0db0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a0db0:	b508      	push	{r3, lr}
 80a0db2:	4b02      	ldr	r3, [pc, #8]	; (80a0dbc <vsnprintf+0xc>)
 80a0db4:	681b      	ldr	r3, [r3, #0]
 80a0db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0db8:	9301      	str	r3, [sp, #4]
 80a0dba:	bd08      	pop	{r3, pc}
 80a0dbc:	080601a0 	.word	0x080601a0

080a0dc0 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0dc0:	b508      	push	{r3, lr}
 80a0dc2:	4b02      	ldr	r3, [pc, #8]	; (80a0dcc <_malloc_r+0xc>)
 80a0dc4:	681b      	ldr	r3, [r3, #0]
 80a0dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0dc8:	9301      	str	r3, [sp, #4]
 80a0dca:	bd08      	pop	{r3, pc}
 80a0dcc:	080601a0 	.word	0x080601a0

080a0dd0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a0dd0:	b508      	push	{r3, lr}
 80a0dd2:	4b02      	ldr	r3, [pc, #8]	; (80a0ddc <__errno+0xc>)
 80a0dd4:	681b      	ldr	r3, [r3, #0]
 80a0dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0dd8:	9301      	str	r3, [sp, #4]
 80a0dda:	bd08      	pop	{r3, pc}
 80a0ddc:	080601a0 	.word	0x080601a0

080a0de0 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a0de0:	b508      	push	{r3, lr}
 80a0de2:	4b02      	ldr	r3, [pc, #8]	; (80a0dec <__assert_func+0xc>)
 80a0de4:	681b      	ldr	r3, [r3, #0]
 80a0de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0de8:	9301      	str	r3, [sp, #4]
 80a0dea:	bd08      	pop	{r3, pc}
 80a0dec:	080601a0 	.word	0x080601a0

080a0df0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0df0:	b508      	push	{r3, lr}
 80a0df2:	4b02      	ldr	r3, [pc, #8]	; (80a0dfc <newlib_impure_ptr_callback+0xc>)
 80a0df4:	681b      	ldr	r3, [r3, #0]
 80a0df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0df8:	9301      	str	r3, [sp, #4]
 80a0dfa:	bd08      	pop	{r3, pc}
 80a0dfc:	080601a0 	.word	0x080601a0

080a0e00 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a0e00:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0e02:	2600      	movs	r6, #0
 80a0e04:	4604      	mov	r4, r0
 80a0e06:	460d      	mov	r5, r1
 80a0e08:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0e0c:	f7ff fde0 	bl	80a09d0 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a0e10:	4628      	mov	r0, r5
    _spi = spi;
 80a0e12:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a0e14:	f7ff fea8 	bl	80a0b68 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a0e18:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0e1a:	6066      	str	r6, [r4, #4]
}
 80a0e1c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0e20 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0e20:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0e22:	2000      	movs	r0, #0
 80a0e24:	4b04      	ldr	r3, [pc, #16]	; (80a0e38 <_GLOBAL__sub_I_System+0x18>)
 80a0e26:	601a      	str	r2, [r3, #0]
 80a0e28:	4b04      	ldr	r3, [pc, #16]	; (80a0e3c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a0e2a:	4a05      	ldr	r2, [pc, #20]	; (80a0e40 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a0e2c:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 80a0e30:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0e32:	f7ff bf11 	b.w	80a0c58 <set_system_mode>
 80a0e36:	bf00      	nop
 80a0e38:	200000bc 	.word	0x200000bc
 80a0e3c:	200000b0 	.word	0x200000b0
 80a0e40:	ffff0000 	.word	0xffff0000

080a0e44 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0e44:	b510      	push	{r4, lr}
 80a0e46:	4604      	mov	r4, r0
{
	free(buffer);
 80a0e48:	6800      	ldr	r0, [r0, #0]
 80a0e4a:	f7ff ffa1 	bl	80a0d90 <free>
}
 80a0e4e:	4620      	mov	r0, r4
 80a0e50:	bd10      	pop	{r4, pc}

080a0e52 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0e52:	b510      	push	{r4, lr}
 80a0e54:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0e56:	6800      	ldr	r0, [r0, #0]
 80a0e58:	b108      	cbz	r0, 80a0e5e <_ZN6String10invalidateEv+0xc>
 80a0e5a:	f7ff ff99 	bl	80a0d90 <free>
	buffer = NULL;
 80a0e5e:	2300      	movs	r3, #0
	capacity = len = 0;
 80a0e60:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a0e64:	6023      	str	r3, [r4, #0]
}
 80a0e66:	bd10      	pop	{r4, pc}

080a0e68 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0e68:	b538      	push	{r3, r4, r5, lr}
 80a0e6a:	4604      	mov	r4, r0
 80a0e6c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0e6e:	6800      	ldr	r0, [r0, #0]
 80a0e70:	3101      	adds	r1, #1
 80a0e72:	f7ff ff95 	bl	80a0da0 <realloc>
	if (newbuffer) {
 80a0e76:	b110      	cbz	r0, 80a0e7e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0e78:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a0e7c:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0e7e:	bd38      	pop	{r3, r4, r5, pc}

080a0e80 <_ZN6String7reserveEj>:
{
 80a0e80:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0e82:	6803      	ldr	r3, [r0, #0]
{
 80a0e84:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0e86:	b123      	cbz	r3, 80a0e92 <_ZN6String7reserveEj+0x12>
 80a0e88:	6843      	ldr	r3, [r0, #4]
 80a0e8a:	428b      	cmp	r3, r1
 80a0e8c:	d301      	bcc.n	80a0e92 <_ZN6String7reserveEj+0x12>
 80a0e8e:	2001      	movs	r0, #1
}
 80a0e90:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a0e92:	4620      	mov	r0, r4
 80a0e94:	f7ff ffe8 	bl	80a0e68 <_ZN6String12changeBufferEj>
 80a0e98:	2800      	cmp	r0, #0
 80a0e9a:	d0f9      	beq.n	80a0e90 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a0e9c:	68a3      	ldr	r3, [r4, #8]
 80a0e9e:	2b00      	cmp	r3, #0
 80a0ea0:	d1f5      	bne.n	80a0e8e <_ZN6String7reserveEj+0xe>
 80a0ea2:	6822      	ldr	r2, [r4, #0]
 80a0ea4:	7013      	strb	r3, [r2, #0]
 80a0ea6:	e7f2      	b.n	80a0e8e <_ZN6String7reserveEj+0xe>

080a0ea8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0ea8:	b570      	push	{r4, r5, r6, lr}
 80a0eaa:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0eac:	4611      	mov	r1, r2
{
 80a0eae:	4604      	mov	r4, r0
 80a0eb0:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0eb2:	f7ff ffe5 	bl	80a0e80 <_ZN6String7reserveEj>
 80a0eb6:	b920      	cbnz	r0, 80a0ec2 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a0eb8:	4620      	mov	r0, r4
 80a0eba:	f7ff ffca 	bl	80a0e52 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a0ebe:	4620      	mov	r0, r4
 80a0ec0:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a0ec2:	462a      	mov	r2, r5
 80a0ec4:	4631      	mov	r1, r6
 80a0ec6:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a0ec8:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0eca:	f001 ff37 	bl	80a2d3c <memcpy>
	buffer[len] = 0;
 80a0ece:	2100      	movs	r1, #0
 80a0ed0:	6822      	ldr	r2, [r4, #0]
 80a0ed2:	68a3      	ldr	r3, [r4, #8]
 80a0ed4:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a0ed6:	e7f2      	b.n	80a0ebe <_ZN6String4copyEPKcj+0x16>

080a0ed8 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a0ed8:	b538      	push	{r3, r4, r5, lr}
 80a0eda:	4605      	mov	r5, r0
	if (buffer) {
 80a0edc:	6800      	ldr	r0, [r0, #0]
{
 80a0ede:	460c      	mov	r4, r1
	if (buffer) {
 80a0ee0:	b168      	cbz	r0, 80a0efe <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a0ee2:	686a      	ldr	r2, [r5, #4]
 80a0ee4:	688b      	ldr	r3, [r1, #8]
 80a0ee6:	429a      	cmp	r2, r3
 80a0ee8:	d307      	bcc.n	80a0efa <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a0eea:	6809      	ldr	r1, [r1, #0]
 80a0eec:	f001 ffb3 	bl	80a2e56 <strcpy>
			len = rhs.len;
 80a0ef0:	68a3      	ldr	r3, [r4, #8]
 80a0ef2:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a0ef4:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a0ef6:	60a3      	str	r3, [r4, #8]
}
 80a0ef8:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a0efa:	f7ff ff49 	bl	80a0d90 <free>
	buffer = rhs.buffer;
 80a0efe:	6823      	ldr	r3, [r4, #0]
 80a0f00:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a0f02:	6863      	ldr	r3, [r4, #4]
 80a0f04:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a0f06:	68a3      	ldr	r3, [r4, #8]
 80a0f08:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a0f0a:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a0f0c:	e9c4 3300 	strd	r3, r3, [r4]
 80a0f10:	e7f1      	b.n	80a0ef6 <_ZN6String4moveERS_+0x1e>

080a0f12 <_ZN6StringC1EOS_>:
	buffer = NULL;
 80a0f12:	2300      	movs	r3, #0
String::String(String &&rval)
 80a0f14:	b510      	push	{r4, lr}
 80a0f16:	4604      	mov	r4, r0
	capacity = 0;
 80a0f18:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a0f1c:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0f1e:	7303      	strb	r3, [r0, #12]
	move(rval);
 80a0f20:	f7ff ffda 	bl	80a0ed8 <_ZN6String4moveERS_>
}
 80a0f24:	4620      	mov	r0, r4
 80a0f26:	bd10      	pop	{r4, pc}

080a0f28 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a0f28:	4288      	cmp	r0, r1
{
 80a0f2a:	b510      	push	{r4, lr}
 80a0f2c:	460b      	mov	r3, r1
 80a0f2e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a0f30:	d004      	beq.n	80a0f3c <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a0f32:	6809      	ldr	r1, [r1, #0]
 80a0f34:	b121      	cbz	r1, 80a0f40 <_ZN6StringaSERKS_+0x18>
 80a0f36:	689a      	ldr	r2, [r3, #8]
 80a0f38:	f7ff ffb6 	bl	80a0ea8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a0f3c:	4620      	mov	r0, r4
 80a0f3e:	bd10      	pop	{r4, pc}
	else invalidate();
 80a0f40:	f7ff ff87 	bl	80a0e52 <_ZN6String10invalidateEv>
 80a0f44:	e7fa      	b.n	80a0f3c <_ZN6StringaSERKS_+0x14>

080a0f46 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a0f46:	2300      	movs	r3, #0
String::String(const String &value)
 80a0f48:	b510      	push	{r4, lr}
 80a0f4a:	4604      	mov	r4, r0
	capacity = 0;
 80a0f4c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a0f50:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0f52:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a0f54:	f7ff ffe8 	bl	80a0f28 <_ZN6StringaSERKS_>
}
 80a0f58:	4620      	mov	r0, r4
 80a0f5a:	bd10      	pop	{r4, pc}

080a0f5c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0f5e:	4606      	mov	r6, r0
 80a0f60:	460d      	mov	r5, r1
  size_t n = 0;
 80a0f62:	2400      	movs	r4, #0
 80a0f64:	188f      	adds	r7, r1, r2
  while (size--) {
 80a0f66:	42bd      	cmp	r5, r7
 80a0f68:	d00c      	beq.n	80a0f84 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0f6a:	6833      	ldr	r3, [r6, #0]
 80a0f6c:	4630      	mov	r0, r6
 80a0f6e:	689b      	ldr	r3, [r3, #8]
 80a0f70:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0f74:	4798      	blx	r3
     if (chunk>=0)
 80a0f76:	1e03      	subs	r3, r0, #0
 80a0f78:	db01      	blt.n	80a0f7e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0f7a:	441c      	add	r4, r3
  while (size--) {
 80a0f7c:	e7f3      	b.n	80a0f66 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0f7e:	2c00      	cmp	r4, #0
 80a0f80:	bf08      	it	eq
 80a0f82:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0f84:	4620      	mov	r0, r4
 80a0f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0f88 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0f88:	b570      	push	{r4, r5, r6, lr}
 80a0f8a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0f8c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0f8e:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a0f90:	b149      	cbz	r1, 80a0fa6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0f92:	f001 ff68 	bl	80a2e66 <strlen>
 80a0f96:	682b      	ldr	r3, [r5, #0]
 80a0f98:	4602      	mov	r2, r0
 80a0f9a:	4621      	mov	r1, r4
 80a0f9c:	4628      	mov	r0, r5
    }
 80a0f9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a0fa2:	68db      	ldr	r3, [r3, #12]
 80a0fa4:	4718      	bx	r3
    }
 80a0fa6:	bd70      	pop	{r4, r5, r6, pc}

080a0fa8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0fa8:	6803      	ldr	r3, [r0, #0]
 80a0faa:	689b      	ldr	r3, [r3, #8]
 80a0fac:	4718      	bx	r3

080a0fae <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0fae:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0fb0:	210d      	movs	r1, #13
{
 80a0fb2:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0fb4:	f7ff fff8 	bl	80a0fa8 <_ZN5Print5printEc>
  n += print('\n');
 80a0fb8:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a0fba:	4604      	mov	r4, r0
  n += print('\n');
 80a0fbc:	4628      	mov	r0, r5
 80a0fbe:	f7ff fff3 	bl	80a0fa8 <_ZN5Print5printEc>
  return n;
}
 80a0fc2:	4420      	add	r0, r4
 80a0fc4:	bd38      	pop	{r3, r4, r5, pc}

080a0fc6 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0fc6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0fc8:	2a01      	cmp	r2, #1
 80a0fca:	bf98      	it	ls
 80a0fcc:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0fce:	b530      	push	{r4, r5, lr}
 80a0fd0:	b08b      	sub	sp, #44	; 0x2c
 80a0fd2:	460c      	mov	r4, r1
  *str = '\0';
 80a0fd4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0fd8:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a0fda:	4625      	mov	r5, r4
 80a0fdc:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0fe0:	fb04 5312 	mls	r3, r4, r2, r5
 80a0fe4:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0fe6:	2b09      	cmp	r3, #9
 80a0fe8:	bf94      	ite	ls
 80a0fea:	3330      	addls	r3, #48	; 0x30
 80a0fec:	3337      	addhi	r3, #55	; 0x37
 80a0fee:	b2db      	uxtb	r3, r3
  } while(n);
 80a0ff0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0ff2:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a0ff6:	d9f0      	bls.n	80a0fda <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0ff8:	f7ff ffc6 	bl	80a0f88 <_ZN5Print5writeEPKc>
}
 80a0ffc:	b00b      	add	sp, #44	; 0x2c
 80a0ffe:	bd30      	pop	{r4, r5, pc}

080a1000 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a1000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1004:	b086      	sub	sp, #24
 80a1006:	af00      	add	r7, sp, #0
 80a1008:	4605      	mov	r5, r0
 80a100a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a100c:	1d38      	adds	r0, r7, #4
 80a100e:	2114      	movs	r1, #20
{
 80a1010:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a1012:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a1014:	f7ff fecc 	bl	80a0db0 <vsnprintf>

    if (n<bufsize)
 80a1018:	2813      	cmp	r0, #19
 80a101a:	d80e      	bhi.n	80a103a <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a101c:	4628      	mov	r0, r5
 80a101e:	1d39      	adds	r1, r7, #4
 80a1020:	f7ff ffb2 	bl	80a0f88 <_ZN5Print5writeEPKc>
 80a1024:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a1026:	b11e      	cbz	r6, 80a1030 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a1028:	4628      	mov	r0, r5
 80a102a:	f7ff ffc0 	bl	80a0fae <_ZN5Print7printlnEv>
 80a102e:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a1030:	4620      	mov	r0, r4
 80a1032:	3718      	adds	r7, #24
 80a1034:	46bd      	mov	sp, r7
 80a1036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a103a:	f100 0308 	add.w	r3, r0, #8
 80a103e:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a1042:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a1044:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a1048:	4622      	mov	r2, r4
 80a104a:	1c41      	adds	r1, r0, #1
 80a104c:	683b      	ldr	r3, [r7, #0]
 80a104e:	4668      	mov	r0, sp
 80a1050:	f7ff feae 	bl	80a0db0 <vsnprintf>
  return write(str);
 80a1054:	4669      	mov	r1, sp
 80a1056:	4628      	mov	r0, r5
 80a1058:	f7ff ff96 	bl	80a0f88 <_ZN5Print5writeEPKc>
 80a105c:	4604      	mov	r4, r0
 80a105e:	46c5      	mov	sp, r8
 80a1060:	e7e1      	b.n	80a1026 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080a1062 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 80a1062:	6880      	ldr	r0, [r0, #8]
 80a1064:	6803      	ldr	r3, [r0, #0]
 80a1066:	68db      	ldr	r3, [r3, #12]
 80a1068:	4718      	bx	r3

080a106a <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 80a106a:	4770      	bx	lr

080a106c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 80a106c:	4608      	mov	r0, r1
 80a106e:	b111      	cbz	r1, 80a1076 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 80a1070:	680b      	ldr	r3, [r1, #0]
 80a1072:	685b      	ldr	r3, [r3, #4]
 80a1074:	4718      	bx	r3
}
 80a1076:	4770      	bx	lr

080a1078 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 80a1078:	4770      	bx	lr

080a107a <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a107a:	4770      	bx	lr

080a107c <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 80a107c:	4770      	bx	lr

080a107e <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 80a107e:	4770      	bx	lr

080a1080 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 80a1080:	b538      	push	{r3, r4, r5, lr}
 80a1082:	4604      	mov	r4, r0
 80a1084:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 80a1086:	6800      	ldr	r0, [r0, #0]
 80a1088:	212e      	movs	r1, #46	; 0x2e
 80a108a:	f001 fed0 	bl	80a2e2e <strchrnul>
    size = s - category;
 80a108e:	6823      	ldr	r3, [r4, #0]
    const char *s = strchrnul(category, '.');
 80a1090:	4602      	mov	r2, r0
    size = s - category;
 80a1092:	1ac0      	subs	r0, r0, r3
 80a1094:	6028      	str	r0, [r5, #0]
    if (size) {
 80a1096:	b120      	cbz	r0, 80a10a2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x22>
        if (*s) {
 80a1098:	7813      	ldrb	r3, [r2, #0]
 80a109a:	b103      	cbz	r3, 80a109e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1e>
            ++s;
 80a109c:	3201      	adds	r2, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a109e:	6820      	ldr	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a10a0:	6022      	str	r2, [r4, #0]
}
 80a10a2:	bd38      	pop	{r3, r4, r5, pc}

080a10a4 <_ZN5spark16JSONStreamWriterD0Ev>:
 80a10a4:	b510      	push	{r4, lr}
 80a10a6:	4604      	mov	r4, r0
 80a10a8:	210c      	movs	r1, #12
 80a10aa:	f7fe fff8 	bl	80a009e <_ZdlPvj>
 80a10ae:	4620      	mov	r0, r4
 80a10b0:	bd10      	pop	{r4, pc}

080a10b2 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 80a10b2:	b510      	push	{r4, lr}
 80a10b4:	4604      	mov	r4, r0
 80a10b6:	2104      	movs	r1, #4
 80a10b8:	f7fe fff1 	bl	80a009e <_ZdlPvj>
 80a10bc:	4620      	mov	r0, r4
 80a10be:	bd10      	pop	{r4, pc}

080a10c0 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a10c0:	b510      	push	{r4, lr}
 80a10c2:	4604      	mov	r4, r0
 80a10c4:	2104      	movs	r1, #4
 80a10c6:	f7fe ffea 	bl	80a009e <_ZdlPvj>
 80a10ca:	4620      	mov	r0, r4
 80a10cc:	bd10      	pop	{r4, pc}

080a10ce <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 80a10ce:	f7ff bc8f 	b.w	80a09f0 <os_mutex_recursive_lock>

080a10d2 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 80a10d2:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 80a10d4:	f001 feb5 	bl	80a2e42 <strcmp>
}
 80a10d8:	fab0 f080 	clz	r0, r0
 80a10dc:	0940      	lsrs	r0, r0, #5
 80a10de:	bd08      	pop	{r3, pc}

080a10e0 <__tcf_1>:
 80a10e0:	4770      	bx	lr

080a10e2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 80a10e2:	b510      	push	{r4, lr}
 80a10e4:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 80a10e6:	f001 f90d 	bl	80a2304 <_Z16_fetch_usbserialv>
 80a10ea:	4284      	cmp	r4, r0
 80a10ec:	d105      	bne.n	80a10fa <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 80a10ee:	f001 f909 	bl	80a2304 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 80a10f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        USBSerial1.end();
 80a10f6:	f001 b8eb 	b.w	80a22d0 <_ZN9USBSerial3endEv>
    if (stream == &USBSerial1) {
 80a10fa:	f001 f93d 	bl	80a2378 <_Z17_fetch_usbserial1v>
 80a10fe:	4284      	cmp	r4, r0
 80a1100:	d102      	bne.n	80a1108 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x26>
        USBSerial1.end();
 80a1102:	f001 f939 	bl	80a2378 <_Z17_fetch_usbserial1v>
 80a1106:	e7f4      	b.n	80a10f2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x10>
    if (stream == &Serial1) {
 80a1108:	f001 fd90 	bl	80a2c2c <_Z22__fetch_global_Serial1v>
 80a110c:	4284      	cmp	r4, r0
 80a110e:	d105      	bne.n	80a111c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
        Serial1.end();
 80a1110:	f001 fd8c 	bl	80a2c2c <_Z22__fetch_global_Serial1v>
}
 80a1114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 80a1118:	f001 b9a9 	b.w	80a246e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 80a111c:	b12c      	cbz	r4, 80a112a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x48>
 80a111e:	6823      	ldr	r3, [r4, #0]
 80a1120:	4620      	mov	r0, r4
}
 80a1122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1126:	685b      	ldr	r3, [r3, #4]
 80a1128:	4718      	bx	r3
 80a112a:	bd10      	pop	{r4, pc}

080a112c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a112c:	680b      	ldr	r3, [r1, #0]
 80a112e:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 80a1130:	684b      	ldr	r3, [r1, #4]
 80a1132:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 80a1134:	b113      	cbz	r3, 80a113c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 80a1136:	685a      	ldr	r2, [r3, #4]
 80a1138:	3201      	adds	r2, #1
 80a113a:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a113c:	4770      	bx	lr

080a113e <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a113e:	b538      	push	{r3, r4, r5, lr}
 80a1140:	4605      	mov	r5, r0
    return value(val, strlen(val));
 80a1142:	4608      	mov	r0, r1
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a1144:	460c      	mov	r4, r1
    return value(val, strlen(val));
 80a1146:	f001 fe8e 	bl	80a2e66 <strlen>
 80a114a:	4621      	mov	r1, r4
 80a114c:	4602      	mov	r2, r0
 80a114e:	4628      	mov	r0, r5
}
 80a1150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return value(val, strlen(val));
 80a1154:	f001 bcb9 	b.w	80a2aca <_ZN5spark10JSONWriter5valueEPKcj>

080a1158 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 80a1158:	b570      	push	{r4, r5, r6, lr}
 80a115a:	4604      	mov	r4, r0
    write(str, strlen(str));
 80a115c:	4608      	mov	r0, r1
inline void spark::StreamLogHandler::write(const char *str) {
 80a115e:	460d      	mov	r5, r1
    write(str, strlen(str));
 80a1160:	f001 fe81 	bl	80a2e66 <strlen>
 80a1164:	6823      	ldr	r3, [r4, #0]
 80a1166:	4602      	mov	r2, r0
 80a1168:	4629      	mov	r1, r5
 80a116a:	4620      	mov	r0, r4
}
 80a116c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    write(str, strlen(str));
 80a1170:	68db      	ldr	r3, [r3, #12]
 80a1172:	4718      	bx	r3

080a1174 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 80a1174:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 80a1176:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 80a1178:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 80a117c:	2201      	movs	r2, #1
 80a117e:	68db      	ldr	r3, [r3, #12]
 80a1180:	f10d 0107 	add.w	r1, sp, #7
 80a1184:	4798      	blx	r3
}
 80a1186:	b003      	add	sp, #12
 80a1188:	f85d fb04 	ldr.w	pc, [sp], #4

080a118c <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
 80a118c:	b40e      	push	{r1, r2, r3}
 80a118e:	b503      	push	{r0, r1, lr}
 80a1190:	ab03      	add	r3, sp, #12
 80a1192:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
 80a1196:	2100      	movs	r1, #0
 80a1198:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
 80a119a:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
 80a119c:	f7ff ff30 	bl	80a1000 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
 80a11a0:	b002      	add	sp, #8
 80a11a2:	f85d eb04 	ldr.w	lr, [sp], #4
 80a11a6:	b003      	add	sp, #12
 80a11a8:	4770      	bx	lr

080a11aa <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 80a11aa:	680a      	ldr	r2, [r1, #0]
 80a11ac:	b510      	push	{r4, lr}
 80a11ae:	6002      	str	r2, [r0, #0]
 80a11b0:	684a      	ldr	r2, [r1, #4]
 80a11b2:	6042      	str	r2, [r0, #4]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a11b4:	2200      	movs	r2, #0
 80a11b6:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80a11ba:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a11bc:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a11be:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a11c0:	6084      	str	r4, [r0, #8]
 80a11c2:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a11c4:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a11c6:	60c4      	str	r4, [r0, #12]
 80a11c8:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a11ca:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a11cc:	6104      	str	r4, [r0, #16]
 80a11ce:	bd10      	pop	{r4, pc}

080a11d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a11d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 80a11d4:	f04f 0a14 	mov.w	sl, #20
 80a11d8:	e9d0 8400 	ldrd	r8, r4, [r0]
 80a11dc:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 80a11de:	4645      	mov	r5, r8
 80a11e0:	fb0a f404 	mul.w	r4, sl, r4
 80a11e4:	9300      	str	r3, [sp, #0]
 80a11e6:	4b17      	ldr	r3, [pc, #92]	; (80a1244 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 80a11e8:	10a4      	asrs	r4, r4, #2
 80a11ea:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 80a11ec:	2c00      	cmp	r4, #0
 80a11ee:	dd21      	ble.n	80a1234 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 80a11f0:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 80a11f2:	fb0a f006 	mul.w	r0, sl, r6
 80a11f6:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 80a11fa:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 80a11fe:	463a      	mov	r2, r7
 80a1200:	455f      	cmp	r7, fp
 80a1202:	bf28      	it	cs
 80a1204:	465a      	movcs	r2, fp
 80a1206:	5828      	ldr	r0, [r5, r0]
 80a1208:	9101      	str	r1, [sp, #4]
 80a120a:	f001 fe34 	bl	80a2e76 <strncmp>
                if (cmp == 0) {
 80a120e:	2800      	cmp	r0, #0
 80a1210:	f04f 0301 	mov.w	r3, #1
 80a1214:	9901      	ldr	r1, [sp, #4]
 80a1216:	d10b      	bne.n	80a1230 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 80a1218:	455f      	cmp	r7, fp
 80a121a:	d103      	bne.n	80a1224 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 80a121c:	9a00      	ldr	r2, [sp, #0]
 80a121e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a1220:	4634      	mov	r4, r6
 80a1222:	e7e3      	b.n	80a11ec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 80a1224:	d9fc      	bls.n	80a1220 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 80a1226:	1ba6      	subs	r6, r4, r6
	      ++__first;
 80a1228:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 80a122c:	3e01      	subs	r6, #1
 80a122e:	e7f7      	b.n	80a1220 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 80a1230:	dbf9      	blt.n	80a1226 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 80a1232:	e7f5      	b.n	80a1220 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 80a1234:	eba5 0508 	sub.w	r5, r5, r8
}
 80a1238:	4802      	ldr	r0, [pc, #8]	; (80a1244 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 80a123a:	10ad      	asrs	r5, r5, #2
 80a123c:	4368      	muls	r0, r5
 80a123e:	b003      	add	sp, #12
 80a1240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1244:	cccccccd 	.word	0xcccccccd

080a1248 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a1248:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 80a124a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 80a124c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a124e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 80a1250:	b303      	cbz	r3, 80a1294 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 80a1252:	b1f9      	cbz	r1, 80a1294 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 80a1254:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 80a1256:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 80a125a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 80a125c:	a903      	add	r1, sp, #12
 80a125e:	a801      	add	r0, sp, #4
 80a1260:	f7ff ff0e 	bl	80a1080 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a1264:	4601      	mov	r1, r0
 80a1266:	b1a8      	cbz	r0, 80a1294 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 80a1268:	f10d 030b 	add.w	r3, sp, #11
 80a126c:	4620      	mov	r0, r4
 80a126e:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 80a1270:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a1274:	f7ff ffac 	bl	80a11d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 80a1278:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80a127c:	b153      	cbz	r3, 80a1294 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 80a127e:	2314      	movs	r3, #20
 80a1280:	6824      	ldr	r4, [r4, #0]
 80a1282:	fb03 4400 	mla	r4, r3, r0, r4
            if (node.level >= 0) {
 80a1286:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 80a128a:	3408      	adds	r4, #8
            if (node.level >= 0) {
 80a128c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 80a128e:	bfa8      	it	ge
 80a1290:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 80a1292:	e7e3      	b.n	80a125c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 80a1294:	4628      	mov	r0, r5
 80a1296:	b004      	add	sp, #16
 80a1298:	bd70      	pop	{r4, r5, r6, pc}
	...

080a129c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 80a129c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 80a129e:	4c09      	ldr	r4, [pc, #36]	; (80a12c4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 80a12a0:	7823      	ldrb	r3, [r4, #0]
 80a12a2:	f3bf 8f5b 	dmb	ish
 80a12a6:	07db      	lsls	r3, r3, #31
 80a12a8:	d409      	bmi.n	80a12be <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
 80a12aa:	4620      	mov	r0, r4
 80a12ac:	f7fe ff06 	bl	80a00bc <__cxa_guard_acquire>
 80a12b0:	b128      	cbz	r0, 80a12be <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
 80a12b2:	4620      	mov	r0, r4
 80a12b4:	f7fe ff07 	bl	80a00c6 <__cxa_guard_release>
 80a12b8:	4803      	ldr	r0, [pc, #12]	; (80a12c8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 80a12ba:	f001 fd29 	bl	80a2d10 <atexit>
}
 80a12be:	4803      	ldr	r0, [pc, #12]	; (80a12cc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 80a12c0:	bd10      	pop	{r4, pc}
 80a12c2:	bf00      	nop
 80a12c4:	200000c4 	.word	0x200000c4
 80a12c8:	080a1079 	.word	0x080a1079
 80a12cc:	20000000 	.word	0x20000000

080a12d0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 80a12d0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 80a12d2:	4c09      	ldr	r4, [pc, #36]	; (80a12f8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 80a12d4:	7823      	ldrb	r3, [r4, #0]
 80a12d6:	f3bf 8f5b 	dmb	ish
 80a12da:	07db      	lsls	r3, r3, #31
 80a12dc:	d409      	bmi.n	80a12f2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
 80a12de:	4620      	mov	r0, r4
 80a12e0:	f7fe feec 	bl	80a00bc <__cxa_guard_acquire>
 80a12e4:	b128      	cbz	r0, 80a12f2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
 80a12e6:	4620      	mov	r0, r4
 80a12e8:	f7fe feed 	bl	80a00c6 <__cxa_guard_release>
 80a12ec:	4803      	ldr	r0, [pc, #12]	; (80a12fc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 80a12ee:	f001 fd0f 	bl	80a2d10 <atexit>
    return &factory;
}
 80a12f2:	4803      	ldr	r0, [pc, #12]	; (80a1300 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 80a12f4:	bd10      	pop	{r4, pc}
 80a12f6:	bf00      	nop
 80a12f8:	200000c8 	.word	0x200000c8
 80a12fc:	080a10e1 	.word	0x080a10e1
 80a1300:	20000004 	.word	0x20000004

080a1304 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 80a1304:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 80a1306:	2500      	movs	r5, #0
 80a1308:	4604      	mov	r4, r0
 80a130a:	e9c0 5500 	strd	r5, r5, [r0]
 80a130e:	e9c0 5504 	strd	r5, r5, [r0, #16]
 80a1312:	6085      	str	r5, [r0, #8]
 80a1314:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 80a1316:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 80a131a:	f7ff fb59 	bl	80a09d0 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 80a131e:	f7ff ffbd 	bl	80a129c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 80a1322:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a1324:	f7ff ffd4 	bl	80a12d0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 80a1328:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a132a:	6220      	str	r0, [r4, #32]
}
 80a132c:	4620      	mov	r0, r4
 80a132e:	bd38      	pop	{r3, r4, r5, pc}

080a1330 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 80a1330:	b510      	push	{r4, lr}
    static LogManager mgr;
 80a1332:	4c0a      	ldr	r4, [pc, #40]	; (80a135c <_ZN5spark10LogManager8instanceEv+0x2c>)
 80a1334:	7823      	ldrb	r3, [r4, #0]
 80a1336:	f3bf 8f5b 	dmb	ish
 80a133a:	07db      	lsls	r3, r3, #31
 80a133c:	d40c      	bmi.n	80a1358 <_ZN5spark10LogManager8instanceEv+0x28>
 80a133e:	4620      	mov	r0, r4
 80a1340:	f7fe febc 	bl	80a00bc <__cxa_guard_acquire>
 80a1344:	b140      	cbz	r0, 80a1358 <_ZN5spark10LogManager8instanceEv+0x28>
 80a1346:	4806      	ldr	r0, [pc, #24]	; (80a1360 <_ZN5spark10LogManager8instanceEv+0x30>)
 80a1348:	f7ff ffdc 	bl	80a1304 <_ZN5spark10LogManagerC1Ev>
 80a134c:	4620      	mov	r0, r4
 80a134e:	f7fe feba 	bl	80a00c6 <__cxa_guard_release>
 80a1352:	4804      	ldr	r0, [pc, #16]	; (80a1364 <_ZN5spark10LogManager8instanceEv+0x34>)
 80a1354:	f001 fcdc 	bl	80a2d10 <atexit>
    return &mgr;
}
 80a1358:	4801      	ldr	r0, [pc, #4]	; (80a1360 <_ZN5spark10LogManager8instanceEv+0x30>)
 80a135a:	bd10      	pop	{r4, pc}
 80a135c:	200000c0 	.word	0x200000c0
 80a1360:	200000d0 	.word	0x200000d0
 80a1364:	080a18f5 	.word	0x080a18f5

080a1368 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 80a1368:	2300      	movs	r3, #0
 80a136a:	4a02      	ldr	r2, [pc, #8]	; (80a1374 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 80a136c:	4902      	ldr	r1, [pc, #8]	; (80a1378 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 80a136e:	4803      	ldr	r0, [pc, #12]	; (80a137c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 80a1370:	f7ff bc6a 	b.w	80a0c48 <log_set_callbacks>
 80a1374:	080a16dd 	.word	0x080a16dd
 80a1378:	080a1669 	.word	0x080a1669
 80a137c:	080a15e9 	.word	0x080a15e9

080a1380 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 80a1380:	2300      	movs	r3, #0
 80a1382:	461a      	mov	r2, r3
 80a1384:	4619      	mov	r1, r3
 80a1386:	4618      	mov	r0, r3
 80a1388:	f7ff bc5e 	b.w	80a0c48 <log_set_callbacks>

080a138c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80a138c:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 80a138e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a1390:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a1392:	b17c      	cbz	r4, 80a13b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a1394:	6863      	ldr	r3, [r4, #4]
 80a1396:	3b01      	subs	r3, #1
 80a1398:	6063      	str	r3, [r4, #4]
 80a139a:	b95b      	cbnz	r3, 80a13b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a139c:	6823      	ldr	r3, [r4, #0]
 80a139e:	4620      	mov	r0, r4
 80a13a0:	689b      	ldr	r3, [r3, #8]
 80a13a2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a13a4:	68a3      	ldr	r3, [r4, #8]
 80a13a6:	3b01      	subs	r3, #1
 80a13a8:	60a3      	str	r3, [r4, #8]
 80a13aa:	b91b      	cbnz	r3, 80a13b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a13ac:	6823      	ldr	r3, [r4, #0]
 80a13ae:	4620      	mov	r0, r4
 80a13b0:	68db      	ldr	r3, [r3, #12]
 80a13b2:	4798      	blx	r3
      }
 80a13b4:	4628      	mov	r0, r5
 80a13b6:	bd38      	pop	{r3, r4, r5, pc}

080a13b8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 80a13b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a13ba:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 80a13bc:	688d      	ldr	r5, [r1, #8]
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 80a13be:	4668      	mov	r0, sp
 80a13c0:	f7ff feb4 	bl	80a112c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 80a13c4:	466a      	mov	r2, sp
 80a13c6:	4629      	mov	r1, r5
 80a13c8:	4620      	mov	r0, r4
 80a13ca:	f001 fa9f 	bl	80a290c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a13ce:	a801      	add	r0, sp, #4
 80a13d0:	f7ff ffdc 	bl	80a138c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a13d4:	4620      	mov	r0, r4
 80a13d6:	b003      	add	sp, #12
 80a13d8:	bd30      	pop	{r4, r5, pc}

080a13da <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 80a13da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a13dc:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 80a13de:	68cd      	ldr	r5, [r1, #12]
 80a13e0:	4668      	mov	r0, sp
 80a13e2:	f7ff fea3 	bl	80a112c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 80a13e6:	466a      	mov	r2, sp
 80a13e8:	4629      	mov	r1, r5
 80a13ea:	4620      	mov	r0, r4
 80a13ec:	f001 fa6a 	bl	80a28c4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 80a13f0:	a801      	add	r0, sp, #4
 80a13f2:	f7ff ffcb 	bl	80a138c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a13f6:	4620      	mov	r0, r4
 80a13f8:	b003      	add	sp, #12
 80a13fa:	bd30      	pop	{r4, r5, pc}

080a13fc <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 80a13fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a13fe:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 80a1400:	690d      	ldr	r5, [r1, #16]
 80a1402:	4668      	mov	r0, sp
 80a1404:	f7ff fe92 	bl	80a112c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 80a1408:	466a      	mov	r2, sp
 80a140a:	4629      	mov	r1, r5
 80a140c:	4620      	mov	r0, r4
 80a140e:	f001 fa00 	bl	80a2812 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 80a1412:	a801      	add	r0, sp, #4
 80a1414:	f7ff ffba 	bl	80a138c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1418:	4620      	mov	r0, r4
 80a141a:	b003      	add	sp, #12
 80a141c:	bd30      	pop	{r4, r5, pc}
	...

080a1420 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 80a1420:	b570      	push	{r4, r5, r6, lr}
 80a1422:	b08a      	sub	sp, #40	; 0x28
 80a1424:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 80a1426:	4601      	mov	r1, r0
 80a1428:	a804      	add	r0, sp, #16
 80a142a:	f7ff ffc5 	bl	80a13b8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 80a142e:	4e14      	ldr	r6, [pc, #80]	; (80a1480 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 80a1430:	a804      	add	r0, sp, #16
 80a1432:	f001 fa83 	bl	80a293c <_ZN5spark18JSONObjectIterator4nextEv>
 80a1436:	b1e8      	cbz	r0, 80a1474 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 80a1438:	4668      	mov	r0, sp
 80a143a:	a904      	add	r1, sp, #16
 80a143c:	f7ff ffcd 	bl	80a13da <_ZNK5spark18JSONObjectIterator4nameEv>
 80a1440:	4631      	mov	r1, r6
 80a1442:	9802      	ldr	r0, [sp, #8]
 80a1444:	f7ff fe45 	bl	80a10d2 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 80a1448:	4604      	mov	r4, r0
 80a144a:	b110      	cbz	r0, 80a1452 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 80a144c:	1e2c      	subs	r4, r5, #0
 80a144e:	bf18      	it	ne
 80a1450:	2401      	movne	r4, #1
 80a1452:	a801      	add	r0, sp, #4
 80a1454:	f7ff ff9a 	bl	80a138c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1458:	2c00      	cmp	r4, #0
 80a145a:	d0e9      	beq.n	80a1430 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 80a145c:	4668      	mov	r0, sp
 80a145e:	a904      	add	r1, sp, #16
 80a1460:	f7ff ffcc 	bl	80a13fc <_ZNK5spark18JSONObjectIterator5valueEv>
 80a1464:	4668      	mov	r0, sp
 80a1466:	f001 fa0b 	bl	80a2880 <_ZNK5spark9JSONValue5toIntEv>
 80a146a:	6028      	str	r0, [r5, #0]
 80a146c:	a801      	add	r0, sp, #4
 80a146e:	f7ff ff8d 	bl	80a138c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1472:	e7dd      	b.n	80a1430 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 80a1474:	a805      	add	r0, sp, #20
 80a1476:	f7ff ff89 	bl	80a138c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a147a:	b00a      	add	sp, #40	; 0x28
 80a147c:	bd70      	pop	{r4, r5, r6, pc}
 80a147e:	bf00      	nop
 80a1480:	080a3154 	.word	0x080a3154

080a1484 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a1484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1486:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 80a1488:	491b      	ldr	r1, [pc, #108]	; (80a14f8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 80a148a:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a148c:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 80a148e:	f001 fcd8 	bl	80a2e42 <strcmp>
 80a1492:	b950      	cbnz	r0, 80a14aa <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 80a1494:	f000 ff36 	bl	80a2304 <_Z16_fetch_usbserialv>
 80a1498:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a149c:	f000 ff14 	bl	80a22c8 <_ZN9USBSerial5beginEl>
}
 80a14a0:	b003      	add	sp, #12
 80a14a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 80a14a6:	f000 bf2d 	b.w	80a2304 <_Z16_fetch_usbserialv>
    if (strcmp(type, "USBSerial1") == 0) {
 80a14aa:	4620      	mov	r0, r4
 80a14ac:	4913      	ldr	r1, [pc, #76]	; (80a14fc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x78>)
 80a14ae:	f001 fcc8 	bl	80a2e42 <strcmp>
 80a14b2:	b950      	cbnz	r0, 80a14ca <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x46>
        USBSerial1.begin();
 80a14b4:	f000 ff60 	bl	80a2378 <_Z17_fetch_usbserial1v>
 80a14b8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a14bc:	f000 ff04 	bl	80a22c8 <_ZN9USBSerial5beginEl>
}
 80a14c0:	b003      	add	sp, #12
 80a14c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &USBSerial1;
 80a14c6:	f000 bf57 	b.w	80a2378 <_Z17_fetch_usbserial1v>
    if (strcmp(type, "Serial1") == 0) {
 80a14ca:	4620      	mov	r0, r4
 80a14cc:	490c      	ldr	r1, [pc, #48]	; (80a1500 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x7c>)
 80a14ce:	f001 fcb8 	bl	80a2e42 <strcmp>
 80a14d2:	b978      	cbnz	r0, 80a14f4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>
        int baud = 9600;
 80a14d4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 80a14d8:	a901      	add	r1, sp, #4
 80a14da:	4628      	mov	r0, r5
        int baud = 9600;
 80a14dc:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 80a14de:	f7ff ff9f 	bl	80a1420 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 80a14e2:	f001 fba3 	bl	80a2c2c <_Z22__fetch_global_Serial1v>
 80a14e6:	9901      	ldr	r1, [sp, #4]
 80a14e8:	f000 ffbe 	bl	80a2468 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 80a14ec:	f001 fb9e 	bl	80a2c2c <_Z22__fetch_global_Serial1v>
}
 80a14f0:	b003      	add	sp, #12
 80a14f2:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 80a14f4:	2000      	movs	r0, #0
 80a14f6:	e7fb      	b.n	80a14f0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6c>
 80a14f8:	080a3159 	.word	0x080a3159
 80a14fc:	080a3160 	.word	0x080a3160
 80a1500:	080a3163 	.word	0x080a3163

080a1504 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a1504:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 80a1506:	2614      	movs	r6, #20
 80a1508:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a150c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a150e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a1512:	42ae      	cmp	r6, r5
 80a1514:	d005      	beq.n	80a1522 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 80a1516:	f105 0008 	add.w	r0, r5, #8
 80a151a:	f7ff fff3 	bl	80a1504 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a151e:	3514      	adds	r5, #20
 80a1520:	e7f7      	b.n	80a1512 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80a1522:	6820      	ldr	r0, [r4, #0]
 80a1524:	f7ff fc34 	bl	80a0d90 <free>
}
 80a1528:	4620      	mov	r0, r4
 80a152a:	bd70      	pop	{r4, r5, r6, pc}

080a152c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a152c:	b570      	push	{r4, r5, r6, lr}
 80a152e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a1530:	e9d0 5300 	ldrd	r5, r3, [r0]
 80a1534:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 80a1538:	42ae      	cmp	r6, r5
 80a153a:	d004      	beq.n	80a1546 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 80a153c:	4628      	mov	r0, r5
 80a153e:	f7ff fc81 	bl	80a0e44 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 80a1542:	3510      	adds	r5, #16
 80a1544:	e7f8      	b.n	80a1538 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 80a1546:	6820      	ldr	r0, [r4, #0]
 80a1548:	f7ff fc22 	bl	80a0d90 <free>
}
 80a154c:	4620      	mov	r0, r4
 80a154e:	bd70      	pop	{r4, r5, r6, pc}

080a1550 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 80a1550:	b510      	push	{r4, lr}
 80a1552:	4604      	mov	r4, r0
 80a1554:	300c      	adds	r0, #12
 80a1556:	f7ff ffd5 	bl	80a1504 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a155a:	4620      	mov	r0, r4
 80a155c:	f7ff ffe6 	bl	80a152c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80a1560:	4620      	mov	r0, r4
 80a1562:	bd10      	pop	{r4, pc}

080a1564 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 80a1564:	b510      	push	{r4, lr}
 80a1566:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 80a1568:	4b03      	ldr	r3, [pc, #12]	; (80a1578 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 80a156a:	f840 3b04 	str.w	r3, [r0], #4
 80a156e:	f7ff ffef 	bl	80a1550 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 80a1572:	4620      	mov	r0, r4
 80a1574:	bd10      	pop	{r4, pc}
 80a1576:	bf00      	nop
 80a1578:	080a310c 	.word	0x080a310c

080a157c <_ZN5spark16StreamLogHandlerD0Ev>:
 80a157c:	b510      	push	{r4, lr}
 80a157e:	4604      	mov	r4, r0
 80a1580:	f7ff fff0 	bl	80a1564 <_ZN5spark16StreamLogHandlerD1Ev>
 80a1584:	4620      	mov	r0, r4
 80a1586:	2124      	movs	r1, #36	; 0x24
 80a1588:	f7fe fd89 	bl	80a009e <_ZdlPvj>
 80a158c:	4620      	mov	r0, r4
 80a158e:	bd10      	pop	{r4, pc}

080a1590 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 80a1590:	b510      	push	{r4, lr}
 80a1592:	4604      	mov	r4, r0
 80a1594:	4b02      	ldr	r3, [pc, #8]	; (80a15a0 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 80a1596:	6003      	str	r3, [r0, #0]
 80a1598:	f7ff ffe4 	bl	80a1564 <_ZN5spark16StreamLogHandlerD1Ev>
 80a159c:	4620      	mov	r0, r4
 80a159e:	bd10      	pop	{r4, pc}
 80a15a0:	080a3200 	.word	0x080a3200

080a15a4 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 80a15a4:	b510      	push	{r4, lr}
 80a15a6:	4604      	mov	r4, r0
 80a15a8:	f7ff fff2 	bl	80a1590 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 80a15ac:	4620      	mov	r0, r4
 80a15ae:	2124      	movs	r1, #36	; 0x24
 80a15b0:	f7fe fd75 	bl	80a009e <_ZdlPvj>
 80a15b4:	4620      	mov	r0, r4
 80a15b6:	bd10      	pop	{r4, pc}

080a15b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 80a15b8:	2200      	movs	r2, #0
 80a15ba:	e9c0 2200 	strd	r2, r2, [r0]
 80a15be:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 80a15c0:	b510      	push	{r4, lr}
 80a15c2:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a15c4:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a15c6:	6004      	str	r4, [r0, #0]
 80a15c8:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a15ca:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a15cc:	6044      	str	r4, [r0, #4]
 80a15ce:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a15d0:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a15d2:	6084      	str	r4, [r0, #8]
}
 80a15d4:	bd10      	pop	{r4, pc}

080a15d6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 80a15d6:	b510      	push	{r4, lr}
 80a15d8:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a15da:	6803      	ldr	r3, [r0, #0]
 80a15dc:	6818      	ldr	r0, [r3, #0]
 80a15de:	f7ff fa0f 	bl	80a0a00 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 80a15e2:	4620      	mov	r0, r4
 80a15e4:	bd10      	pop	{r4, pc}
	...

080a15e8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 80a15e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a15ec:	b087      	sub	sp, #28
 80a15ee:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 80a15f0:	4b1c      	ldr	r3, [pc, #112]	; (80a1664 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 80a15f2:	4680      	mov	r8, r0
 80a15f4:	685b      	ldr	r3, [r3, #4]
 80a15f6:	4689      	mov	r9, r1
 80a15f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a15fc:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a15fe:	b96b      	cbnz	r3, 80a161c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 80a1600:	f7ff fe96 	bl	80a1330 <_ZN5spark10LogManager8instanceEv>
 80a1604:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a1606:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 80a160a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a160c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 80a160e:	f7ff fd5e 	bl	80a10ce <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 80a1612:	7b23      	ldrb	r3, [r4, #12]
 80a1614:	b12b      	cbz	r3, 80a1622 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 80a1616:	a805      	add	r0, sp, #20
 80a1618:	f7ff ffdd 	bl	80a15d6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 80a161c:	b007      	add	sp, #28
 80a161e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80a1622:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 80a1624:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 80a1628:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 80a162a:	e9d4 5300 	ldrd	r5, r3, [r4]
 80a162e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a1632:	45aa      	cmp	sl, r5
 80a1634:	d012      	beq.n	80a165c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 80a1636:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 80a163a:	4631      	mov	r1, r6
 80a163c:	1d38      	adds	r0, r7, #4
 80a163e:	f7ff fe03 	bl	80a1248 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a1642:	4581      	cmp	r9, r0
 80a1644:	d3f5      	bcc.n	80a1632 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 80a1646:	9a03      	ldr	r2, [sp, #12]
 80a1648:	683b      	ldr	r3, [r7, #0]
 80a164a:	9200      	str	r2, [sp, #0]
 80a164c:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80a1650:	464a      	mov	r2, r9
 80a1652:	4633      	mov	r3, r6
 80a1654:	4641      	mov	r1, r8
 80a1656:	4638      	mov	r0, r7
 80a1658:	47d8      	blx	fp
 80a165a:	e7ea      	b.n	80a1632 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 80a165c:	2300      	movs	r3, #0
 80a165e:	7323      	strb	r3, [r4, #12]
 80a1660:	e7d9      	b.n	80a1616 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 80a1662:	bf00      	nop
 80a1664:	e000ed00 	.word	0xe000ed00

080a1668 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 80a1668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a166c:	469b      	mov	fp, r3
 80a166e:	4b1a      	ldr	r3, [pc, #104]	; (80a16d8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 80a1670:	4680      	mov	r8, r0
 80a1672:	685b      	ldr	r3, [r3, #4]
 80a1674:	4689      	mov	r9, r1
 80a1676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a167a:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
 80a167c:	b96b      	cbnz	r3, 80a169a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 80a167e:	f7ff fe57 	bl	80a1330 <_ZN5spark10LogManager8instanceEv>
 80a1682:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a1684:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a1688:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a168a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 80a168c:	f7ff fd1f 	bl	80a10ce <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 80a1690:	7b23      	ldrb	r3, [r4, #12]
 80a1692:	b12b      	cbz	r3, 80a16a0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 80a1694:	a801      	add	r0, sp, #4
 80a1696:	f7ff ff9e 	bl	80a15d6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80a169a:	b003      	add	sp, #12
 80a169c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 80a16a0:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 80a16a2:	b2f6      	uxtb	r6, r6
 80a16a4:	7323      	strb	r3, [r4, #12]
 80a16a6:	e9d4 5300 	ldrd	r5, r3, [r4]
 80a16aa:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a16ae:	4555      	cmp	r5, sl
 80a16b0:	d00e      	beq.n	80a16d0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 80a16b2:	f855 7b04 	ldr.w	r7, [r5], #4
 80a16b6:	4659      	mov	r1, fp
 80a16b8:	1d38      	adds	r0, r7, #4
 80a16ba:	f7ff fdc5 	bl	80a1248 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a16be:	4286      	cmp	r6, r0
 80a16c0:	d3f5      	bcc.n	80a16ae <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 80a16c2:	683b      	ldr	r3, [r7, #0]
 80a16c4:	464a      	mov	r2, r9
 80a16c6:	4641      	mov	r1, r8
 80a16c8:	4638      	mov	r0, r7
 80a16ca:	68db      	ldr	r3, [r3, #12]
 80a16cc:	4798      	blx	r3
 80a16ce:	e7ee      	b.n	80a16ae <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 80a16d0:	2300      	movs	r3, #0
 80a16d2:	7323      	strb	r3, [r4, #12]
 80a16d4:	e7de      	b.n	80a1694 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 80a16d6:	bf00      	nop
 80a16d8:	e000ed00 	.word	0xe000ed00

080a16dc <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 80a16dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a16e0:	4b16      	ldr	r3, [pc, #88]	; (80a173c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 80a16e2:	4605      	mov	r5, r0
 80a16e4:	685b      	ldr	r3, [r3, #4]
 80a16e6:	460f      	mov	r7, r1
 80a16e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (HAL_IsISR()) {
 80a16ec:	bb1b      	cbnz	r3, 80a1736 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 80a16ee:	f7ff fe1f 	bl	80a1330 <_ZN5spark10LogManager8instanceEv>
 80a16f2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a16f4:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a16f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a16fa:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 80a16fc:	f7ff fce7 	bl	80a10ce <_ZN14RecursiveMutex4lockEv.isra.0>
 80a1700:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 80a1704:	2446      	movs	r4, #70	; 0x46
 80a1706:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a170a:	45b0      	cmp	r8, r6
 80a170c:	d109      	bne.n	80a1722 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 80a170e:	a801      	add	r0, sp, #4
 80a1710:	f7ff ff61 	bl	80a15d6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 80a1714:	42a5      	cmp	r5, r4
 80a1716:	bfb4      	ite	lt
 80a1718:	2000      	movlt	r0, #0
 80a171a:	2001      	movge	r0, #1
}
 80a171c:	b002      	add	sp, #8
 80a171e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 80a1722:	f856 0b04 	ldr.w	r0, [r6], #4
 80a1726:	4639      	mov	r1, r7
 80a1728:	3004      	adds	r0, #4
 80a172a:	f7ff fd8d 	bl	80a1248 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 80a172e:	4284      	cmp	r4, r0
 80a1730:	bfa8      	it	ge
 80a1732:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 80a1734:	e7e9      	b.n	80a170a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 80a1736:	2000      	movs	r0, #0
 80a1738:	e7f0      	b.n	80a171c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 80a173a:	bf00      	nop
 80a173c:	e000ed00 	.word	0xe000ed00

080a1740 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 80a1740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a1742:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 80a1746:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 80a1748:	4604      	mov	r4, r0
 80a174a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a174c:	db0d      	blt.n	80a176a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 80a174e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 80a1750:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 80a1752:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 80a1754:	dd04      	ble.n	80a1760 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 80a1756:	00b9      	lsls	r1, r7, #2
 80a1758:	f7ff fb22 	bl	80a0da0 <realloc>
            if (!d) {
 80a175c:	b918      	cbnz	r0, 80a1766 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 80a175e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 80a1760:	f7ff fb16 	bl	80a0d90 <free>
        T* d = nullptr;
 80a1764:	2000      	movs	r0, #0
        data_ = d;
 80a1766:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 80a1768:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 80a176a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 80a176c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 80a176e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 80a1772:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a1774:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 80a1778:	1d08      	adds	r0, r1, #4
 80a177a:	f001 faed 	bl	80a2d58 <memmove>
    new(p) T(std::move(value));
 80a177e:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 80a1782:	6863      	ldr	r3, [r4, #4]
    return true;
 80a1784:	2001      	movs	r0, #1
    ++size_;
 80a1786:	3301      	adds	r3, #1
 80a1788:	6063      	str	r3, [r4, #4]
    return true;
 80a178a:	e7e8      	b.n	80a175e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

080a178c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 80a178c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a178e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a1790:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a1794:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a1796:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 80a1798:	460d      	mov	r5, r1
      { _M_device.lock(); }
 80a179a:	f7ff fc98 	bl	80a10ce <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 80a179e:	e9d4 3200 	ldrd	r3, r2, [r4]
 80a17a2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 80a17a6:	4293      	cmp	r3, r2
 80a17a8:	4619      	mov	r1, r3
 80a17aa:	d00a      	beq.n	80a17c2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 80a17ac:	6809      	ldr	r1, [r1, #0]
 80a17ae:	3304      	adds	r3, #4
 80a17b0:	42a9      	cmp	r1, r5
 80a17b2:	d1f8      	bne.n	80a17a6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 80a17b4:	a801      	add	r0, sp, #4
 80a17b6:	f7ff ff0e 	bl	80a15d6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 80a17ba:	2500      	movs	r5, #0
}
 80a17bc:	4628      	mov	r0, r5
 80a17be:	b003      	add	sp, #12
 80a17c0:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 80a17c2:	4629      	mov	r1, r5
 80a17c4:	4620      	mov	r0, r4
 80a17c6:	f7ff ffbb 	bl	80a1740 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 80a17ca:	4605      	mov	r5, r0
 80a17cc:	2800      	cmp	r0, #0
 80a17ce:	d0f1      	beq.n	80a17b4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 80a17d0:	6863      	ldr	r3, [r4, #4]
 80a17d2:	2b01      	cmp	r3, #1
 80a17d4:	d101      	bne.n	80a17da <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 80a17d6:	f7ff fdc7 	bl	80a1368 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a17da:	a801      	add	r0, sp, #4
 80a17dc:	f7ff fefb 	bl	80a15d6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 80a17e0:	e7ec      	b.n	80a17bc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

080a17e2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 80a17e2:	460b      	mov	r3, r1
 80a17e4:	b570      	push	{r4, r5, r6, lr}
 80a17e6:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 80a17e8:	c805      	ldmia	r0, {r0, r2}
 80a17ea:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 80a17ee:	4282      	cmp	r2, r0
 80a17f0:	d00f      	beq.n	80a1812 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
    move(p, p + 1, data_ + size_);
 80a17f2:	4601      	mov	r1, r0
            if (*p == value) {
 80a17f4:	681d      	ldr	r5, [r3, #0]
 80a17f6:	f851 6b04 	ldr.w	r6, [r1], #4
 80a17fa:	42ae      	cmp	r6, r5
 80a17fc:	d107      	bne.n	80a180e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a17fe:	1a52      	subs	r2, r2, r1
 80a1800:	f001 faaa 	bl	80a2d58 <memmove>
    return true;
 80a1804:	2001      	movs	r0, #1
    --size_;
 80a1806:	6863      	ldr	r3, [r4, #4]
 80a1808:	3b01      	subs	r3, #1
 80a180a:	6063      	str	r3, [r4, #4]
}
 80a180c:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 80a180e:	4608      	mov	r0, r1
 80a1810:	e7ed      	b.n	80a17ee <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
        return false;
 80a1812:	2000      	movs	r0, #0
 80a1814:	e7fa      	b.n	80a180c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2a>

080a1816 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 80a1816:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a1818:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a181a:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a181e:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 80a1820:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a1822:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 80a1824:	f7ff fc53 	bl	80a10ce <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 80a1828:	4620      	mov	r0, r4
 80a182a:	a901      	add	r1, sp, #4
 80a182c:	f7ff ffd9 	bl	80a17e2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 80a1830:	b118      	cbz	r0, 80a183a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 80a1832:	6863      	ldr	r3, [r4, #4]
 80a1834:	b90b      	cbnz	r3, 80a183a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 80a1836:	f7ff fda3 	bl	80a1380 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a183a:	a803      	add	r0, sp, #12
 80a183c:	f7ff fecb 	bl	80a15d6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80a1840:	b004      	add	sp, #16
 80a1842:	bd10      	pop	{r4, pc}

080a1844 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 80a1844:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 80a1846:	b570      	push	{r4, r5, r6, lr}
 80a1848:	4604      	mov	r4, r0
 80a184a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 80a184e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 80a1852:	42ae      	cmp	r6, r5
 80a1854:	d015      	beq.n	80a1882 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 80a1856:	4620      	mov	r0, r4
 80a1858:	f105 0110 	add.w	r1, r5, #16
 80a185c:	f7ff ffc1 	bl	80a17e2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 80a1860:	6863      	ldr	r3, [r4, #4]
 80a1862:	b90b      	cbnz	r3, 80a1868 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 80a1864:	f7ff fd8c 	bl	80a1380 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 80a1868:	69e0      	ldr	r0, [r4, #28]
 80a186a:	6929      	ldr	r1, [r5, #16]
 80a186c:	6803      	ldr	r3, [r0, #0]
 80a186e:	68db      	ldr	r3, [r3, #12]
 80a1870:	4798      	blx	r3
        if (h.stream) {
 80a1872:	6969      	ldr	r1, [r5, #20]
 80a1874:	b119      	cbz	r1, 80a187e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 80a1876:	6a20      	ldr	r0, [r4, #32]
 80a1878:	6803      	ldr	r3, [r0, #0]
 80a187a:	68db      	ldr	r3, [r3, #12]
 80a187c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 80a187e:	3518      	adds	r5, #24
 80a1880:	e7e7      	b.n	80a1852 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 80a1882:	2618      	movs	r6, #24
 80a1884:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 80a1888:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a188c:	42ae      	cmp	r6, r5
 80a188e:	d004      	beq.n	80a189a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 80a1890:	4628      	mov	r0, r5
 80a1892:	f7ff fad7 	bl	80a0e44 <_ZN6StringD1Ev>
 80a1896:	3518      	adds	r5, #24
 80a1898:	e7f8      	b.n	80a188c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 80a189a:	2300      	movs	r3, #0
 80a189c:	6163      	str	r3, [r4, #20]
}
 80a189e:	bd70      	pop	{r4, r5, r6, pc}

080a18a0 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 80a18a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a18a2:	4604      	mov	r4, r0
    resetSystemCallbacks();
 80a18a4:	f7ff fd6c 	bl	80a1380 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a18a8:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80a18ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a18ae:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 80a18b0:	f7ff fc0d 	bl	80a10ce <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 80a18b4:	4620      	mov	r0, r4
 80a18b6:	f7ff ffc5 	bl	80a1844 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 80a18ba:	a801      	add	r0, sp, #4
 80a18bc:	f7ff fe8b 	bl	80a15d6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 80a18c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a18c2:	b108      	cbz	r0, 80a18c8 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 80a18c4:	f7ff f88c 	bl	80a09e0 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 80a18c8:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 80a18cc:	2618      	movs	r6, #24
 80a18ce:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a18d2:	42ae      	cmp	r6, r5
 80a18d4:	d004      	beq.n	80a18e0 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 80a18d6:	4628      	mov	r0, r5
 80a18d8:	f7ff fab4 	bl	80a0e44 <_ZN6StringD1Ev>
 80a18dc:	3518      	adds	r5, #24
 80a18de:	e7f8      	b.n	80a18d2 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 80a18e0:	6920      	ldr	r0, [r4, #16]
 80a18e2:	f7ff fa55 	bl	80a0d90 <free>
 80a18e6:	6820      	ldr	r0, [r4, #0]
 80a18e8:	f7ff fa52 	bl	80a0d90 <free>
}
 80a18ec:	4620      	mov	r0, r4
 80a18ee:	b002      	add	sp, #8
 80a18f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080a18f4 <__tcf_2>:
    static LogManager mgr;
 80a18f4:	4801      	ldr	r0, [pc, #4]	; (80a18fc <__tcf_2+0x8>)
 80a18f6:	f7ff bfd3 	b.w	80a18a0 <_ZN5spark10LogManagerD1Ev>
 80a18fa:	bf00      	nop
 80a18fc:	200000d0 	.word	0x200000d0

080a1900 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 80a1900:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a1902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1904:	4604      	mov	r4, r0
 80a1906:	460d      	mov	r5, r1
 80a1908:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80a190a:	d915      	bls.n	80a1938 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 80a190c:	4290      	cmp	r0, r2
 80a190e:	d214      	bcs.n	80a193a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 80a1910:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 80a1914:	1a75      	subs	r5, r6, r1
 80a1916:	f1a1 0714 	sub.w	r7, r1, #20
 80a191a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 80a191c:	42b7      	cmp	r7, r6
 80a191e:	d01a      	beq.n	80a1956 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 80a1920:	b11c      	cbz	r4, 80a192a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 80a1922:	4631      	mov	r1, r6
 80a1924:	4620      	mov	r0, r4
 80a1926:	f7ff fc40 	bl	80a11aa <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 80a192a:	f106 0008 	add.w	r0, r6, #8
 80a192e:	f7ff fde9 	bl	80a1504 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 80a1932:	3e14      	subs	r6, #20
 80a1934:	3c14      	subs	r4, #20
 80a1936:	e7f1      	b.n	80a191c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 80a1938:	d00d      	beq.n	80a1956 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 80a193a:	42b5      	cmp	r5, r6
 80a193c:	d00b      	beq.n	80a1956 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 80a193e:	b11c      	cbz	r4, 80a1948 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 80a1940:	4629      	mov	r1, r5
 80a1942:	4620      	mov	r0, r4
 80a1944:	f7ff fc31 	bl	80a11aa <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 80a1948:	f105 0008 	add.w	r0, r5, #8
 80a194c:	f7ff fdda 	bl	80a1504 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 80a1950:	3514      	adds	r5, #20
 80a1952:	3414      	adds	r4, #20
 80a1954:	e7f1      	b.n	80a193a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 80a1956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1958 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 80a1958:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a195a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a195c:	4604      	mov	r4, r0
 80a195e:	460d      	mov	r5, r1
 80a1960:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80a1962:	d914      	bls.n	80a198e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 80a1964:	4290      	cmp	r0, r2
 80a1966:	d213      	bcs.n	80a1990 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 80a1968:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 80a196c:	1a75      	subs	r5, r6, r1
 80a196e:	f1a1 0710 	sub.w	r7, r1, #16
 80a1972:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 80a1974:	42b7      	cmp	r7, r6
 80a1976:	d018      	beq.n	80a19aa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 80a1978:	b11c      	cbz	r4, 80a1982 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 80a197a:	4631      	mov	r1, r6
 80a197c:	4620      	mov	r0, r4
 80a197e:	f7ff fac8 	bl	80a0f12 <_ZN6StringC1EOS_>
                end->~T();
 80a1982:	4630      	mov	r0, r6
 80a1984:	f7ff fa5e 	bl	80a0e44 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 80a1988:	3e10      	subs	r6, #16
 80a198a:	3c10      	subs	r4, #16
 80a198c:	e7f2      	b.n	80a1974 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80a198e:	d00c      	beq.n	80a19aa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 80a1990:	42b5      	cmp	r5, r6
 80a1992:	d00a      	beq.n	80a19aa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 80a1994:	b11c      	cbz	r4, 80a199e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 80a1996:	4629      	mov	r1, r5
 80a1998:	4620      	mov	r0, r4
 80a199a:	f7ff faba 	bl	80a0f12 <_ZN6StringC1EOS_>
                p->~T();
 80a199e:	4628      	mov	r0, r5
 80a19a0:	f7ff fa50 	bl	80a0e44 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80a19a4:	3510      	adds	r5, #16
 80a19a6:	3410      	adds	r4, #16
 80a19a8:	e7f2      	b.n	80a1990 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 80a19aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a19ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 80a19ac:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 80a19ae:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 80a19b0:	4605      	mov	r5, r0
        if (n > 0) {
 80a19b2:	dd11      	ble.n	80a19d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 80a19b4:	0130      	lsls	r0, r6, #4
 80a19b6:	f7ff f9e3 	bl	80a0d80 <malloc>
            if (!d) {
 80a19ba:	4604      	mov	r4, r0
 80a19bc:	b158      	cbz	r0, 80a19d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 80a19be:	e9d5 1200 	ldrd	r1, r2, [r5]
 80a19c2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80a19c6:	f7ff ffc7 	bl	80a1958 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80a19ca:	6828      	ldr	r0, [r5, #0]
 80a19cc:	f7ff f9e0 	bl	80a0d90 <free>
        return true;
 80a19d0:	2001      	movs	r0, #1
        data_ = d;
 80a19d2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 80a19d4:	60ae      	str	r6, [r5, #8]
    }
 80a19d6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 80a19d8:	2400      	movs	r4, #0
 80a19da:	e7f6      	b.n	80a19ca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

080a19dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a19dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a19e0:	4690      	mov	r8, r2
        capacity_(0) {
 80a19e2:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a19e4:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a19e6:	b095      	sub	sp, #84	; 0x54
 80a19e8:	9103      	str	r1, [sp, #12]
    return size_;
 80a19ea:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80a19ee:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 80a19f0:	4299      	cmp	r1, r3
        capacity_(0) {
 80a19f2:	e9c0 3300 	strd	r3, r3, [r0]
 80a19f6:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80a19fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80a19fe:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a1a02:	7602      	strb	r2, [r0, #24]
 80a1a04:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 80a1a06:	dc23      	bgt.n	80a1a50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 80a1a08:	e9d8 5700 	ldrd	r5, r7, [r8]
 80a1a0c:	2314      	movs	r3, #20
 80a1a0e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 80a1a12:	42af      	cmp	r7, r5
 80a1a14:	d03b      	beq.n	80a1a8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 80a1a16:	4629      	mov	r1, r5
 80a1a18:	a80b      	add	r0, sp, #44	; 0x2c
 80a1a1a:	f7ff fa7a 	bl	80a0f12 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 80a1a1e:	a90b      	add	r1, sp, #44	; 0x2c
 80a1a20:	a80f      	add	r0, sp, #60	; 0x3c
 80a1a22:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a1a24:	f7ff fa75 	bl	80a0f12 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a1a28:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 80a1a2c:	4299      	cmp	r1, r3
 80a1a2e:	da1b      	bge.n	80a1a68 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 80a1a30:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 80a1a32:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 80a1a34:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 80a1a38:	4631      	mov	r1, r6
 80a1a3a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80a1a3e:	f106 0010 	add.w	r0, r6, #16
 80a1a42:	f7ff ff89 	bl	80a1958 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 80a1a46:	b9ee      	cbnz	r6, 80a1a84 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 80a1a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a1a4a:	3301      	adds	r3, #1
 80a1a4c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 80a1a4e:	e011      	b.n	80a1a74 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 80a1a50:	a808      	add	r0, sp, #32
 80a1a52:	f7ff ffab 	bl	80a19ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a1a56:	2800      	cmp	r0, #0
 80a1a58:	d1d6      	bne.n	80a1a08 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 80a1a5a:	a808      	add	r0, sp, #32
 80a1a5c:	f7ff fd66 	bl	80a152c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80a1a60:	4620      	mov	r0, r4
 80a1a62:	b015      	add	sp, #84	; 0x54
 80a1a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a1a68:	3101      	adds	r1, #1
 80a1a6a:	a808      	add	r0, sp, #32
 80a1a6c:	f7ff ff9e 	bl	80a19ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a1a70:	2800      	cmp	r0, #0
 80a1a72:	d1dd      	bne.n	80a1a30 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 80a1a74:	a80f      	add	r0, sp, #60	; 0x3c
 80a1a76:	f7ff f9e5 	bl	80a0e44 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 80a1a7a:	a80b      	add	r0, sp, #44	; 0x2c
 80a1a7c:	f7ff f9e2 	bl	80a0e44 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 80a1a80:	3514      	adds	r5, #20
 80a1a82:	e7c6      	b.n	80a1a12 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 80a1a84:	4630      	mov	r0, r6
 80a1a86:	a90f      	add	r1, sp, #60	; 0x3c
 80a1a88:	f7ff fa43 	bl	80a0f12 <_ZN6StringC1EOS_>
 80a1a8c:	e7dc      	b.n	80a1a48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 80a1a8e:	2600      	movs	r6, #0
 80a1a90:	f04f 0914 	mov.w	r9, #20
 80a1a94:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 80a1a98:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 80a1a9a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 80a1a9e:	429e      	cmp	r6, r3
 80a1aa0:	da7c      	bge.n	80a1b9c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 80a1aa2:	0133      	lsls	r3, r6, #4
 80a1aa4:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 80a1aa6:	9306      	str	r3, [sp, #24]
        if (!category) {
 80a1aa8:	b90b      	cbnz	r3, 80a1aae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 80a1aaa:	3601      	adds	r6, #1
 80a1aac:	e7f5      	b.n	80a1a9a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 80a1aae:	2300      	movs	r3, #0
 80a1ab0:	9307      	str	r3, [sp, #28]
 80a1ab2:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 80a1ab6:	ad0b      	add	r5, sp, #44	; 0x2c
 80a1ab8:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 80a1aba:	a907      	add	r1, sp, #28
 80a1abc:	a806      	add	r0, sp, #24
 80a1abe:	f7ff fadf 	bl	80a1080 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a1ac2:	4682      	mov	sl, r0
 80a1ac4:	2800      	cmp	r0, #0
 80a1ac6:	d0f0      	beq.n	80a1aaa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 80a1ac8:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 80a1acc:	4601      	mov	r1, r0
            bool found = false;
 80a1ace:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a1ad2:	4628      	mov	r0, r5
 80a1ad4:	9a07      	ldr	r2, [sp, #28]
 80a1ad6:	f10d 0317 	add.w	r3, sp, #23
 80a1ada:	f7ff fb79 	bl	80a11d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a1ade:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a1ae2:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a1ae4:	2f00      	cmp	r7, #0
 80a1ae6:	d14a      	bne.n	80a1b7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 80a1ae8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 80a1aec:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 80a1af0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80a1af4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a1af8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 80a1afc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80a1b00:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a1b02:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 80a1b06:	4293      	cmp	r3, r2
 80a1b08:	db17      	blt.n	80a1b3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 80a1b0a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 80a1b0e:	f1ba 0f00 	cmp.w	sl, #0
 80a1b12:	dd30      	ble.n	80a1b76 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 80a1b14:	fb09 f00a 	mul.w	r0, r9, sl
 80a1b18:	f7ff f932 	bl	80a0d80 <malloc>
            if (!d) {
 80a1b1c:	4683      	mov	fp, r0
 80a1b1e:	b360      	cbz	r0, 80a1b7a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 80a1b20:	e9d5 1200 	ldrd	r1, r2, [r5]
 80a1b24:	fb09 1202 	mla	r2, r9, r2, r1
 80a1b28:	f7ff feea 	bl	80a1900 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 80a1b2c:	6828      	ldr	r0, [r5, #0]
 80a1b2e:	f7ff f92f 	bl	80a0d90 <free>
        data_ = d;
 80a1b32:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 80a1b36:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 80a1b3a:	682b      	ldr	r3, [r5, #0]
 80a1b3c:	9a01      	ldr	r2, [sp, #4]
 80a1b3e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 80a1b42:	686a      	ldr	r2, [r5, #4]
 80a1b44:	4651      	mov	r1, sl
 80a1b46:	fb09 3202 	mla	r2, r9, r2, r3
 80a1b4a:	f10a 0014 	add.w	r0, sl, #20
 80a1b4e:	f7ff fed7 	bl	80a1900 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 80a1b52:	f1ba 0f00 	cmp.w	sl, #0
 80a1b56:	d003      	beq.n	80a1b60 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 80a1b58:	4650      	mov	r0, sl
 80a1b5a:	a90f      	add	r1, sp, #60	; 0x3c
 80a1b5c:	f7ff fb25 	bl	80a11aa <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 80a1b60:	686b      	ldr	r3, [r5, #4]
 80a1b62:	3301      	adds	r3, #1
 80a1b64:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 80a1b66:	a811      	add	r0, sp, #68	; 0x44
 80a1b68:	f7ff fccc 	bl	80a1504 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a1b6c:	b13f      	cbz	r7, 80a1b7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 80a1b6e:	a80b      	add	r0, sp, #44	; 0x2c
 80a1b70:	f7ff fcc8 	bl	80a1504 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a1b74:	e771      	b.n	80a1a5a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 80a1b76:	46bb      	mov	fp, r7
 80a1b78:	e7d8      	b.n	80a1b2c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a1b7a:	2701      	movs	r7, #1
 80a1b7c:	e7f3      	b.n	80a1b66 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 80a1b7e:	9b01      	ldr	r3, [sp, #4]
 80a1b80:	682d      	ldr	r5, [r5, #0]
 80a1b82:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 80a1b86:	9b06      	ldr	r3, [sp, #24]
 80a1b88:	781b      	ldrb	r3, [r3, #0]
 80a1b8a:	b92b      	cbnz	r3, 80a1b98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 80a1b8c:	f8d8 3000 	ldr.w	r3, [r8]
 80a1b90:	9a02      	ldr	r2, [sp, #8]
 80a1b92:	4413      	add	r3, r2
 80a1b94:	7c1b      	ldrb	r3, [r3, #16]
 80a1b96:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 80a1b98:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 80a1b9a:	e78e      	b.n	80a1aba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1b9c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a1b9e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1ba0:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a1ba2:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1ba4:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1ba6:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 80a1ba8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 80a1baa:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1bac:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1bae:	60a2      	str	r2, [r4, #8]
 80a1bb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 80a1bb2:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1bb4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1bb6:	60e2      	str	r2, [r4, #12]
 80a1bb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 80a1bba:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1bbc:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a1bbe:	6122      	str	r2, [r4, #16]
 80a1bc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 80a1bc2:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 80a1bc4:	9b03      	ldr	r3, [sp, #12]
 80a1bc6:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 80a1bc8:	6162      	str	r2, [r4, #20]
 80a1bca:	7623      	strb	r3, [r4, #24]
 80a1bcc:	e7cf      	b.n	80a1b6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

080a1bd0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 80a1bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1bd2:	4604      	mov	r4, r0
        filter_(level, filters) {
 80a1bd4:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 80a1bd6:	4617      	mov	r7, r2
 80a1bd8:	b087      	sub	sp, #28
 80a1bda:	460d      	mov	r5, r1
        stream_(&stream) {
 80a1bdc:	4668      	mov	r0, sp
 80a1bde:	4619      	mov	r1, r3
 80a1be0:	f7fe fbf5 	bl	80a03ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 80a1be4:	4b0b      	ldr	r3, [pc, #44]	; (80a1c14 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 80a1be6:	4669      	mov	r1, sp
 80a1be8:	f846 3b04 	str.w	r3, [r6], #4
 80a1bec:	a803      	add	r0, sp, #12
 80a1bee:	f7fe fbee 	bl	80a03ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a1bf2:	4639      	mov	r1, r7
 80a1bf4:	aa03      	add	r2, sp, #12
 80a1bf6:	4630      	mov	r0, r6
 80a1bf8:	f7ff fef0 	bl	80a19dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a1bfc:	a803      	add	r0, sp, #12
 80a1bfe:	f7fe fba5 	bl	80a034c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 80a1c02:	4668      	mov	r0, sp
 80a1c04:	f7fe fba2 	bl	80a034c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 80a1c08:	4620      	mov	r0, r4
        stream_(&stream) {
 80a1c0a:	4b03      	ldr	r3, [pc, #12]	; (80a1c18 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 80a1c0c:	6225      	str	r5, [r4, #32]
 80a1c0e:	6023      	str	r3, [r4, #0]
}
 80a1c10:	b007      	add	sp, #28
 80a1c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1c14:	080a310c 	.word	0x080a310c
 80a1c18:	080a31e8 	.word	0x080a31e8

080a1c1c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 80a1c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1c1e:	460f      	mov	r7, r1
 80a1c20:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a1c22:	4638      	mov	r0, r7
 80a1c24:	491c      	ldr	r1, [pc, #112]	; (80a1c98 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 80a1c26:	4616      	mov	r6, r2
 80a1c28:	461d      	mov	r5, r3
 80a1c2a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a1c2c:	f001 f909 	bl	80a2e42 <strcmp>
 80a1c30:	b9c0      	cbnz	r0, 80a1c64 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 80a1c32:	b1a4      	cbz	r4, 80a1c5e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 80a1c34:	4629      	mov	r1, r5
 80a1c36:	a801      	add	r0, sp, #4
 80a1c38:	f7ff fcbe 	bl	80a15b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a1c3c:	2024      	movs	r0, #36	; 0x24
 80a1c3e:	4917      	ldr	r1, [pc, #92]	; (80a1c9c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 80a1c40:	f001 f862 	bl	80a2d08 <_ZnwjRKSt9nothrow_t>
 80a1c44:	4605      	mov	r5, r0
 80a1c46:	b130      	cbz	r0, 80a1c56 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 80a1c48:	ab01      	add	r3, sp, #4
 80a1c4a:	4632      	mov	r2, r6
 80a1c4c:	4621      	mov	r1, r4
 80a1c4e:	f7ff ffbf 	bl	80a1bd0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a1c52:	4b13      	ldr	r3, [pc, #76]	; (80a1ca0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 80a1c54:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80a1c56:	a801      	add	r0, sp, #4
 80a1c58:	f7fe fb78 	bl	80a034c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a1c5c:	462c      	mov	r4, r5
}
 80a1c5e:	4620      	mov	r0, r4
 80a1c60:	b005      	add	sp, #20
 80a1c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 80a1c64:	4638      	mov	r0, r7
 80a1c66:	490f      	ldr	r1, [pc, #60]	; (80a1ca4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 80a1c68:	f001 f8eb 	bl	80a2e42 <strcmp>
 80a1c6c:	b990      	cbnz	r0, 80a1c94 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 80a1c6e:	2c00      	cmp	r4, #0
 80a1c70:	d0f5      	beq.n	80a1c5e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80a1c72:	4629      	mov	r1, r5
 80a1c74:	a801      	add	r0, sp, #4
 80a1c76:	f7ff fc9f 	bl	80a15b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a1c7a:	2024      	movs	r0, #36	; 0x24
 80a1c7c:	4907      	ldr	r1, [pc, #28]	; (80a1c9c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 80a1c7e:	f001 f843 	bl	80a2d08 <_ZnwjRKSt9nothrow_t>
 80a1c82:	4605      	mov	r5, r0
 80a1c84:	2800      	cmp	r0, #0
 80a1c86:	d0e6      	beq.n	80a1c56 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 80a1c88:	4632      	mov	r2, r6
 80a1c8a:	4621      	mov	r1, r4
 80a1c8c:	ab01      	add	r3, sp, #4
 80a1c8e:	f7ff ff9f 	bl	80a1bd0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a1c92:	e7e0      	b.n	80a1c56 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 80a1c94:	2400      	movs	r4, #0
 80a1c96:	e7e2      	b.n	80a1c5e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 80a1c98:	080a316b 	.word	0x080a316b
 80a1c9c:	080a3379 	.word	0x080a3379
 80a1ca0:	080a3200 	.word	0x080a3200
 80a1ca4:	080a316f 	.word	0x080a316f

080a1ca8 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 80a1ca8:	4b01      	ldr	r3, [pc, #4]	; (80a1cb0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1caa:	4a02      	ldr	r2, [pc, #8]	; (80a1cb4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1cac:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a1cae:	4770      	bx	lr
 80a1cb0:	200000cc 	.word	0x200000cc
 80a1cb4:	080a3180 	.word	0x080a3180

080a1cb8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a1cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1cbc:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 80a1cbe:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a1cc2:	4604      	mov	r4, r0
 80a1cc4:	460e      	mov	r6, r1
 80a1cc6:	4617      	mov	r7, r2
 80a1cc8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 80a1cca:	f000 fb1b 	bl	80a2304 <_Z16_fetch_usbserialv>
 80a1cce:	4581      	cmp	r9, r0
 80a1cd0:	d04d      	beq.n	80a1d6e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 80a1cd2:	792b      	ldrb	r3, [r5, #4]
 80a1cd4:	0719      	lsls	r1, r3, #28
 80a1cd6:	d504      	bpl.n	80a1ce2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 80a1cd8:	4620      	mov	r0, r4
 80a1cda:	696a      	ldr	r2, [r5, #20]
 80a1cdc:	4954      	ldr	r1, [pc, #336]	; (80a1e30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 80a1cde:	f7ff fa55 	bl	80a118c <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 80a1ce2:	f1b8 0f00 	cmp.w	r8, #0
 80a1ce6:	d00d      	beq.n	80a1d04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 80a1ce8:	215b      	movs	r1, #91	; 0x5b
 80a1cea:	4620      	mov	r0, r4
 80a1cec:	f7ff fa42 	bl	80a1174 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 80a1cf0:	4641      	mov	r1, r8
 80a1cf2:	4620      	mov	r0, r4
 80a1cf4:	f7ff fa30 	bl	80a1158 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 80a1cf8:	6823      	ldr	r3, [r4, #0]
 80a1cfa:	2202      	movs	r2, #2
 80a1cfc:	4620      	mov	r0, r4
 80a1cfe:	68db      	ldr	r3, [r3, #12]
 80a1d00:	494c      	ldr	r1, [pc, #304]	; (80a1e34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 80a1d02:	4798      	blx	r3
    if (attr.has_file) {
 80a1d04:	792b      	ldrb	r3, [r5, #4]
 80a1d06:	07da      	lsls	r2, r3, #31
 80a1d08:	d524      	bpl.n	80a1d54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 80a1d0a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 80a1d0e:	212f      	movs	r1, #47	; 0x2f
 80a1d10:	4640      	mov	r0, r8
 80a1d12:	f001 f8c4 	bl	80a2e9e <strrchr>
    if (s1) {
 80a1d16:	b108      	cbz	r0, 80a1d1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 80a1d18:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 80a1d1c:	4641      	mov	r1, r8
 80a1d1e:	4620      	mov	r0, r4
 80a1d20:	f7ff fa1a 	bl	80a1158 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 80a1d24:	792b      	ldrb	r3, [r5, #4]
 80a1d26:	079b      	lsls	r3, r3, #30
 80a1d28:	d508      	bpl.n	80a1d3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 80a1d2a:	213a      	movs	r1, #58	; 0x3a
 80a1d2c:	4620      	mov	r0, r4
 80a1d2e:	f7ff fa21 	bl	80a1174 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 80a1d32:	4620      	mov	r0, r4
 80a1d34:	68ea      	ldr	r2, [r5, #12]
 80a1d36:	4940      	ldr	r1, [pc, #256]	; (80a1e38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 80a1d38:	f7ff fa28 	bl	80a118c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 80a1d3c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 80a1d3e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 80a1d40:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 80a1d44:	4620      	mov	r0, r4
            write(", ", 2);
 80a1d46:	f04f 0202 	mov.w	r2, #2
 80a1d4a:	68db      	ldr	r3, [r3, #12]
 80a1d4c:	bf14      	ite	ne
 80a1d4e:	493b      	ldrne	r1, [pc, #236]	; (80a1e3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 80a1d50:	493b      	ldreq	r1, [pc, #236]	; (80a1e40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80a1d52:	4798      	blx	r3
    if (attr.has_function) {
 80a1d54:	792b      	ldrb	r3, [r5, #4]
 80a1d56:	0758      	lsls	r0, r3, #29
 80a1d58:	d51d      	bpl.n	80a1d96 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a1d5a:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 80a1d5c:	460b      	mov	r3, r1
 80a1d5e:	461a      	mov	r2, r3
    for (; *s; ++s) {
 80a1d60:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a1d64:	b160      	cbz	r0, 80a1d80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 80a1d66:	2820      	cmp	r0, #32
 80a1d68:	d108      	bne.n	80a1d7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 80a1d6a:	4619      	mov	r1, r3
 80a1d6c:	e7f7      	b.n	80a1d5e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 80a1d6e:	4835      	ldr	r0, [pc, #212]	; (80a1e44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 80a1d70:	f000 fca9 	bl	80a26c6 <_ZN5spark12NetworkClass9listeningEv>
 80a1d74:	2800      	cmp	r0, #0
 80a1d76:	d0ac      	beq.n	80a1cd2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 80a1d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 80a1d7c:	2828      	cmp	r0, #40	; 0x28
 80a1d7e:	d1ee      	bne.n	80a1d5e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 80a1d80:	6823      	ldr	r3, [r4, #0]
 80a1d82:	1a52      	subs	r2, r2, r1
 80a1d84:	4620      	mov	r0, r4
 80a1d86:	68db      	ldr	r3, [r3, #12]
 80a1d88:	4798      	blx	r3
        write("(): ", 4);
 80a1d8a:	6823      	ldr	r3, [r4, #0]
 80a1d8c:	2204      	movs	r2, #4
 80a1d8e:	4620      	mov	r0, r4
 80a1d90:	68db      	ldr	r3, [r3, #12]
 80a1d92:	492d      	ldr	r1, [pc, #180]	; (80a1e48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 80a1d94:	4798      	blx	r3
    return log_level_name(level, nullptr);
 80a1d96:	2100      	movs	r1, #0
 80a1d98:	4638      	mov	r0, r7
 80a1d9a:	f7fe ff4d 	bl	80a0c38 <log_level_name>
 80a1d9e:	4601      	mov	r1, r0
    write(s);
 80a1da0:	4620      	mov	r0, r4
 80a1da2:	f7ff f9d9 	bl	80a1158 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 80a1da6:	6823      	ldr	r3, [r4, #0]
 80a1da8:	2202      	movs	r2, #2
 80a1daa:	4620      	mov	r0, r4
 80a1dac:	68db      	ldr	r3, [r3, #12]
 80a1dae:	4924      	ldr	r1, [pc, #144]	; (80a1e40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80a1db0:	4798      	blx	r3
    if (msg) {
 80a1db2:	b11e      	cbz	r6, 80a1dbc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 80a1db4:	4631      	mov	r1, r6
 80a1db6:	4620      	mov	r0, r4
 80a1db8:	f7ff f9ce 	bl	80a1158 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 80a1dbc:	792b      	ldrb	r3, [r5, #4]
 80a1dbe:	f013 0f30 	tst.w	r3, #48	; 0x30
 80a1dc2:	d02c      	beq.n	80a1e1e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 80a1dc4:	6823      	ldr	r3, [r4, #0]
 80a1dc6:	4921      	ldr	r1, [pc, #132]	; (80a1e4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 80a1dc8:	68db      	ldr	r3, [r3, #12]
 80a1dca:	2202      	movs	r2, #2
 80a1dcc:	4620      	mov	r0, r4
 80a1dce:	4798      	blx	r3
        if (attr.has_code) {
 80a1dd0:	792b      	ldrb	r3, [r5, #4]
 80a1dd2:	06d9      	lsls	r1, r3, #27
 80a1dd4:	d50a      	bpl.n	80a1dec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 80a1dd6:	6823      	ldr	r3, [r4, #0]
 80a1dd8:	2207      	movs	r2, #7
 80a1dda:	4620      	mov	r0, r4
 80a1ddc:	491c      	ldr	r1, [pc, #112]	; (80a1e50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 80a1dde:	68db      	ldr	r3, [r3, #12]
 80a1de0:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 80a1de2:	4620      	mov	r0, r4
 80a1de4:	69aa      	ldr	r2, [r5, #24]
 80a1de6:	491b      	ldr	r1, [pc, #108]	; (80a1e54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 80a1de8:	f7ff f9d0 	bl	80a118c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 80a1dec:	792b      	ldrb	r3, [r5, #4]
 80a1dee:	069a      	lsls	r2, r3, #26
 80a1df0:	d511      	bpl.n	80a1e16 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 80a1df2:	06db      	lsls	r3, r3, #27
 80a1df4:	d505      	bpl.n	80a1e02 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 80a1df6:	6823      	ldr	r3, [r4, #0]
 80a1df8:	2202      	movs	r2, #2
 80a1dfa:	4620      	mov	r0, r4
 80a1dfc:	68db      	ldr	r3, [r3, #12]
 80a1dfe:	490f      	ldr	r1, [pc, #60]	; (80a1e3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 80a1e00:	4798      	blx	r3
            write("details = ", 10);
 80a1e02:	6823      	ldr	r3, [r4, #0]
 80a1e04:	4620      	mov	r0, r4
 80a1e06:	4914      	ldr	r1, [pc, #80]	; (80a1e58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 80a1e08:	220a      	movs	r2, #10
 80a1e0a:	68db      	ldr	r3, [r3, #12]
 80a1e0c:	4798      	blx	r3
            write(attr.details);
 80a1e0e:	4620      	mov	r0, r4
 80a1e10:	69e9      	ldr	r1, [r5, #28]
 80a1e12:	f7ff f9a1 	bl	80a1158 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 80a1e16:	215d      	movs	r1, #93	; 0x5d
 80a1e18:	4620      	mov	r0, r4
 80a1e1a:	f7ff f9ab 	bl	80a1174 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 80a1e1e:	6823      	ldr	r3, [r4, #0]
 80a1e20:	4620      	mov	r0, r4
}
 80a1e22:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 80a1e26:	2202      	movs	r2, #2
 80a1e28:	68db      	ldr	r3, [r3, #12]
 80a1e2a:	490c      	ldr	r1, [pc, #48]	; (80a1e5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 80a1e2c:	4718      	bx	r3
 80a1e2e:	bf00      	nop
 80a1e30:	080a3184 	.word	0x080a3184
 80a1e34:	080a318b 	.word	0x080a318b
 80a1e38:	080a30f4 	.word	0x080a30f4
 80a1e3c:	080a318e 	.word	0x080a318e
 80a1e40:	080a3193 	.word	0x080a3193
 80a1e44:	20000450 	.word	0x20000450
 80a1e48:	080a3191 	.word	0x080a3191
 80a1e4c:	080a3196 	.word	0x080a3196
 80a1e50:	080a3199 	.word	0x080a3199
 80a1e54:	080a31a1 	.word	0x080a31a1
 80a1e58:	080a31a4 	.word	0x080a31a4
 80a1e5c:	080a31af 	.word	0x080a31af

080a1e60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a1e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1e64:	b085      	sub	sp, #20
    return stream_;
 80a1e66:	f8d0 9020 	ldr.w	r9, [r0, #32]
 80a1e6a:	4605      	mov	r5, r0
 80a1e6c:	460f      	mov	r7, r1
 80a1e6e:	4690      	mov	r8, r2
 80a1e70:	461e      	mov	r6, r3
 80a1e72:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 80a1e74:	f000 fa46 	bl	80a2304 <_Z16_fetch_usbserialv>
 80a1e78:	4581      	cmp	r9, r0
 80a1e7a:	d105      	bne.n	80a1e88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 80a1e7c:	4849      	ldr	r0, [pc, #292]	; (80a1fa4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 80a1e7e:	f000 fc22 	bl	80a26c6 <_ZN5spark12NetworkClass9listeningEv>
 80a1e82:	2800      	cmp	r0, #0
 80a1e84:	f040 808a 	bne.w	80a1f9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 80a1e88:	f04f 0900 	mov.w	r9, #0
 80a1e8c:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 80a1e8e:	4a46      	ldr	r2, [pc, #280]	; (80a1fa8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 80a1e90:	a801      	add	r0, sp, #4
 80a1e92:	9201      	str	r2, [sp, #4]
 80a1e94:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 80a1e96:	f88d 9008 	strb.w	r9, [sp, #8]
 80a1e9a:	f000 fd78 	bl	80a298e <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 80a1e9e:	4649      	mov	r1, r9
 80a1ea0:	4640      	mov	r0, r8
 80a1ea2:	f7fe fec9 	bl	80a0c38 <log_level_name>
 80a1ea6:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 80a1ea8:	4940      	ldr	r1, [pc, #256]	; (80a1fac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 80a1eaa:	2201      	movs	r2, #1
 80a1eac:	a801      	add	r0, sp, #4
 80a1eae:	f000 fdfd 	bl	80a2aac <_ZN5spark10JSONWriter4nameEPKcj>
 80a1eb2:	4641      	mov	r1, r8
 80a1eb4:	f7ff f943 	bl	80a113e <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 80a1eb8:	b13f      	cbz	r7, 80a1eca <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 80a1eba:	493d      	ldr	r1, [pc, #244]	; (80a1fb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 80a1ebc:	2201      	movs	r2, #1
 80a1ebe:	a801      	add	r0, sp, #4
 80a1ec0:	f000 fdf4 	bl	80a2aac <_ZN5spark10JSONWriter4nameEPKcj>
 80a1ec4:	4639      	mov	r1, r7
 80a1ec6:	f7ff f93a 	bl	80a113e <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 80a1eca:	b13e      	cbz	r6, 80a1edc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 80a1ecc:	4939      	ldr	r1, [pc, #228]	; (80a1fb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 80a1ece:	2201      	movs	r2, #1
 80a1ed0:	a801      	add	r0, sp, #4
 80a1ed2:	f000 fdeb 	bl	80a2aac <_ZN5spark10JSONWriter4nameEPKcj>
 80a1ed6:	4631      	mov	r1, r6
 80a1ed8:	f7ff f931 	bl	80a113e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 80a1edc:	7923      	ldrb	r3, [r4, #4]
 80a1ede:	07df      	lsls	r7, r3, #31
 80a1ee0:	d50e      	bpl.n	80a1f00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 80a1ee2:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 80a1ee4:	212f      	movs	r1, #47	; 0x2f
 80a1ee6:	4630      	mov	r0, r6
 80a1ee8:	f000 ffd9 	bl	80a2e9e <strrchr>
    if (s1) {
 80a1eec:	b100      	cbz	r0, 80a1ef0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 80a1eee:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 80a1ef0:	4931      	ldr	r1, [pc, #196]	; (80a1fb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 80a1ef2:	2201      	movs	r2, #1
 80a1ef4:	a801      	add	r0, sp, #4
 80a1ef6:	f000 fdd9 	bl	80a2aac <_ZN5spark10JSONWriter4nameEPKcj>
 80a1efa:	4631      	mov	r1, r6
 80a1efc:	f7ff f91f 	bl	80a113e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 80a1f00:	7923      	ldrb	r3, [r4, #4]
 80a1f02:	079e      	lsls	r6, r3, #30
 80a1f04:	d507      	bpl.n	80a1f16 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 80a1f06:	492d      	ldr	r1, [pc, #180]	; (80a1fbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 80a1f08:	2202      	movs	r2, #2
 80a1f0a:	a801      	add	r0, sp, #4
 80a1f0c:	f000 fdce 	bl	80a2aac <_ZN5spark10JSONWriter4nameEPKcj>
 80a1f10:	68e1      	ldr	r1, [r4, #12]
 80a1f12:	f000 fd49 	bl	80a29a8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 80a1f16:	7923      	ldrb	r3, [r4, #4]
 80a1f18:	0758      	lsls	r0, r3, #29
 80a1f1a:	d514      	bpl.n	80a1f46 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a1f1c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 80a1f1e:	4633      	mov	r3, r6
 80a1f20:	461f      	mov	r7, r3
    for (; *s; ++s) {
 80a1f22:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1f26:	b12a      	cbz	r2, 80a1f34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 80a1f28:	2a20      	cmp	r2, #32
 80a1f2a:	d101      	bne.n	80a1f30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 80a1f2c:	461e      	mov	r6, r3
 80a1f2e:	e7f7      	b.n	80a1f20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 80a1f30:	2a28      	cmp	r2, #40	; 0x28
 80a1f32:	d1f5      	bne.n	80a1f20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 80a1f34:	2202      	movs	r2, #2
 80a1f36:	4922      	ldr	r1, [pc, #136]	; (80a1fc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 80a1f38:	a801      	add	r0, sp, #4
 80a1f3a:	f000 fdb7 	bl	80a2aac <_ZN5spark10JSONWriter4nameEPKcj>
 80a1f3e:	4631      	mov	r1, r6
 80a1f40:	1bba      	subs	r2, r7, r6
 80a1f42:	f000 fdc2 	bl	80a2aca <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 80a1f46:	7923      	ldrb	r3, [r4, #4]
 80a1f48:	0719      	lsls	r1, r3, #28
 80a1f4a:	d507      	bpl.n	80a1f5c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 80a1f4c:	491d      	ldr	r1, [pc, #116]	; (80a1fc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 80a1f4e:	2201      	movs	r2, #1
 80a1f50:	a801      	add	r0, sp, #4
 80a1f52:	f000 fdab 	bl	80a2aac <_ZN5spark10JSONWriter4nameEPKcj>
 80a1f56:	6961      	ldr	r1, [r4, #20]
 80a1f58:	f000 fd38 	bl	80a29cc <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 80a1f5c:	7923      	ldrb	r3, [r4, #4]
 80a1f5e:	06da      	lsls	r2, r3, #27
 80a1f60:	d508      	bpl.n	80a1f74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 80a1f62:	2204      	movs	r2, #4
 80a1f64:	4918      	ldr	r1, [pc, #96]	; (80a1fc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 80a1f66:	eb0d 0002 	add.w	r0, sp, r2
 80a1f6a:	f000 fd9f 	bl	80a2aac <_ZN5spark10JSONWriter4nameEPKcj>
 80a1f6e:	69a1      	ldr	r1, [r4, #24]
 80a1f70:	f000 fd1a 	bl	80a29a8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 80a1f74:	7923      	ldrb	r3, [r4, #4]
 80a1f76:	069b      	lsls	r3, r3, #26
 80a1f78:	d507      	bpl.n	80a1f8a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 80a1f7a:	4914      	ldr	r1, [pc, #80]	; (80a1fcc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 80a1f7c:	2206      	movs	r2, #6
 80a1f7e:	a801      	add	r0, sp, #4
 80a1f80:	f000 fd94 	bl	80a2aac <_ZN5spark10JSONWriter4nameEPKcj>
 80a1f84:	69e1      	ldr	r1, [r4, #28]
 80a1f86:	f7ff f8da 	bl	80a113e <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 80a1f8a:	a801      	add	r0, sp, #4
 80a1f8c:	f000 fce9 	bl	80a2962 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 80a1f90:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 80a1f92:	2202      	movs	r2, #2
 80a1f94:	6803      	ldr	r3, [r0, #0]
 80a1f96:	490e      	ldr	r1, [pc, #56]	; (80a1fd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 80a1f98:	68db      	ldr	r3, [r3, #12]
 80a1f9a:	4798      	blx	r3
}
 80a1f9c:	b005      	add	sp, #20
 80a1f9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1fa2:	bf00      	nop
 80a1fa4:	20000450 	.word	0x20000450
 80a1fa8:	080a31d0 	.word	0x080a31d0
 80a1fac:	080a315e 	.word	0x080a315e
 80a1fb0:	080a31b2 	.word	0x080a31b2
 80a1fb4:	080a340c 	.word	0x080a340c
 80a1fb8:	080a31b4 	.word	0x080a31b4
 80a1fbc:	080a31b6 	.word	0x080a31b6
 80a1fc0:	080a31b9 	.word	0x080a31b9
 80a1fc4:	080a30e7 	.word	0x080a30e7
 80a1fc8:	080a31bc 	.word	0x080a31bc
 80a1fcc:	080a31c1 	.word	0x080a31c1
 80a1fd0:	080a31af 	.word	0x080a31af

080a1fd4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1fd4:	4b02      	ldr	r3, [pc, #8]	; (80a1fe0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1fd6:	681a      	ldr	r2, [r3, #0]
 80a1fd8:	4b02      	ldr	r3, [pc, #8]	; (80a1fe4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1fda:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a1fdc:	4770      	bx	lr
 80a1fde:	bf00      	nop
 80a1fe0:	20000008 	.word	0x20000008
 80a1fe4:	200000f8 	.word	0x200000f8

080a1fe8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1fe8:	2100      	movs	r1, #0
 80a1fea:	f7fe be3d 	b.w	80a0c68 <system_delay_ms>
	...

080a1ff0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1ff0:	2200      	movs	r2, #0
 80a1ff2:	4b01      	ldr	r3, [pc, #4]	; (80a1ff8 <_GLOBAL__sub_I_RGB+0x8>)
 80a1ff4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a1ff6:	4770      	bx	lr
 80a1ff8:	200000fc 	.word	0x200000fc

080a1ffc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a1ffc:	4b01      	ldr	r3, [pc, #4]	; (80a2004 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a1ffe:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a2000:	4770      	bx	lr
 80a2002:	bf00      	nop
 80a2004:	2000000c 	.word	0x2000000c

080a2008 <serialEventRun>:
{
 80a2008:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a200a:	4b13      	ldr	r3, [pc, #76]	; (80a2058 <serialEventRun+0x50>)
 80a200c:	b143      	cbz	r3, 80a2020 <serialEventRun+0x18>
 80a200e:	f000 f979 	bl	80a2304 <_Z16_fetch_usbserialv>
 80a2012:	6803      	ldr	r3, [r0, #0]
 80a2014:	691b      	ldr	r3, [r3, #16]
 80a2016:	4798      	blx	r3
 80a2018:	2800      	cmp	r0, #0
 80a201a:	dd01      	ble.n	80a2020 <serialEventRun+0x18>
        serialEvent();
 80a201c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a2020:	4b0e      	ldr	r3, [pc, #56]	; (80a205c <serialEventRun+0x54>)
 80a2022:	b143      	cbz	r3, 80a2036 <serialEventRun+0x2e>
 80a2024:	f000 fe02 	bl	80a2c2c <_Z22__fetch_global_Serial1v>
 80a2028:	6803      	ldr	r3, [r0, #0]
 80a202a:	691b      	ldr	r3, [r3, #16]
 80a202c:	4798      	blx	r3
 80a202e:	2800      	cmp	r0, #0
 80a2030:	dd01      	ble.n	80a2036 <serialEventRun+0x2e>
        serialEvent1();
 80a2032:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a2036:	4b0a      	ldr	r3, [pc, #40]	; (80a2060 <serialEventRun+0x58>)
 80a2038:	b10b      	cbz	r3, 80a203e <serialEventRun+0x36>
 80a203a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a203e:	4b09      	ldr	r3, [pc, #36]	; (80a2064 <serialEventRun+0x5c>)
 80a2040:	b143      	cbz	r3, 80a2054 <serialEventRun+0x4c>
 80a2042:	f000 f999 	bl	80a2378 <_Z17_fetch_usbserial1v>
 80a2046:	6803      	ldr	r3, [r0, #0]
 80a2048:	691b      	ldr	r3, [r3, #16]
 80a204a:	4798      	blx	r3
 80a204c:	2800      	cmp	r0, #0
 80a204e:	dd01      	ble.n	80a2054 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a2050:	f3af 8000 	nop.w
}
 80a2054:	bd08      	pop	{r3, pc}
 80a2056:	bf00      	nop
	...

080a2068 <_post_loop>:
{
 80a2068:	b508      	push	{r3, lr}
	serialEventRun();
 80a206a:	f7ff ffcd 	bl	80a2008 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a206e:	f7fe fca7 	bl	80a09c0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2072:	4b01      	ldr	r3, [pc, #4]	; (80a2078 <_post_loop+0x10>)
 80a2074:	6018      	str	r0, [r3, #0]
}
 80a2076:	bd08      	pop	{r3, pc}
 80a2078:	20000480 	.word	0x20000480

080a207c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a207c:	4805      	ldr	r0, [pc, #20]	; (80a2094 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a207e:	4a06      	ldr	r2, [pc, #24]	; (80a2098 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a2080:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2082:	1a12      	subs	r2, r2, r0
 80a2084:	4905      	ldr	r1, [pc, #20]	; (80a209c <_Z33system_initialize_user_backup_ramv+0x20>)
 80a2086:	f000 fe59 	bl	80a2d3c <memcpy>
    __backup_sram_signature = signature;
 80a208a:	4b05      	ldr	r3, [pc, #20]	; (80a20a0 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a208c:	4a05      	ldr	r2, [pc, #20]	; (80a20a4 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a208e:	601a      	str	r2, [r3, #0]
}
 80a2090:	bd08      	pop	{r3, pc}
 80a2092:	bf00      	nop
 80a2094:	40024000 	.word	0x40024000
 80a2098:	40024004 	.word	0x40024004
 80a209c:	080a3530 	.word	0x080a3530
 80a20a0:	40024000 	.word	0x40024000
 80a20a4:	9a271c1e 	.word	0x9a271c1e

080a20a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a20a8:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a20aa:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a20ac:	461a      	mov	r2, r3
 80a20ae:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a20b2:	9300      	str	r3, [sp, #0]
 80a20b4:	f7fe fdea 	bl	80a0c8c <system_ctrl_set_result>
}
 80a20b8:	b003      	add	sp, #12
 80a20ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a20c0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a20c0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a20c2:	8843      	ldrh	r3, [r0, #2]
 80a20c4:	2b0a      	cmp	r3, #10
 80a20c6:	d008      	beq.n	80a20da <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a20c8:	2b50      	cmp	r3, #80	; 0x50
 80a20ca:	d10b      	bne.n	80a20e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a20cc:	4b09      	ldr	r3, [pc, #36]	; (80a20f4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a20ce:	681b      	ldr	r3, [r3, #0]
 80a20d0:	b14b      	cbz	r3, 80a20e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a20d2:	b003      	add	sp, #12
 80a20d4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a20d8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a20da:	f7ff ffe5 	bl	80a20a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a20de:	b003      	add	sp, #12
 80a20e0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a20e4:	2300      	movs	r3, #0
 80a20e6:	461a      	mov	r2, r3
 80a20e8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a20ec:	9300      	str	r3, [sp, #0]
 80a20ee:	f7fe fdcd 	bl	80a0c8c <system_ctrl_set_result>
}
 80a20f2:	e7f4      	b.n	80a20de <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a20f4:	20000110 	.word	0x20000110

080a20f8 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a20f8:	2100      	movs	r1, #0
{
 80a20fa:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a20fc:	4811      	ldr	r0, [pc, #68]	; (80a2144 <module_user_init_hook+0x4c>)
 80a20fe:	f7fe fe77 	bl	80a0df0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a2102:	4b11      	ldr	r3, [pc, #68]	; (80a2148 <module_user_init_hook+0x50>)
 80a2104:	681a      	ldr	r2, [r3, #0]
 80a2106:	4b11      	ldr	r3, [pc, #68]	; (80a214c <module_user_init_hook+0x54>)
 80a2108:	429a      	cmp	r2, r3
 80a210a:	bf0c      	ite	eq
 80a210c:	2201      	moveq	r2, #1
 80a210e:	2200      	movne	r2, #0
 80a2110:	4b0f      	ldr	r3, [pc, #60]	; (80a2150 <module_user_init_hook+0x58>)
 80a2112:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2114:	d001      	beq.n	80a211a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a2116:	f7ff ffb1 	bl	80a207c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a211a:	f7fe fc41 	bl	80a09a0 <HAL_RNG_GetRandomNumber>
 80a211e:	4604      	mov	r4, r0
    srand(seed);
 80a2120:	f000 fe4a 	bl	80a2db8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2124:	4b0b      	ldr	r3, [pc, #44]	; (80a2154 <module_user_init_hook+0x5c>)
 80a2126:	b113      	cbz	r3, 80a212e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a2128:	4620      	mov	r0, r4
 80a212a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a212e:	2100      	movs	r1, #0
 80a2130:	4808      	ldr	r0, [pc, #32]	; (80a2154 <module_user_init_hook+0x5c>)
 80a2132:	f7fe fe1d 	bl	80a0d70 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a213a:	2100      	movs	r1, #0
 80a213c:	4806      	ldr	r0, [pc, #24]	; (80a2158 <module_user_init_hook+0x60>)
 80a213e:	f7fe bd9b 	b.w	80a0c78 <system_ctrl_set_app_request_handler>
 80a2142:	bf00      	nop
 80a2144:	080a1ffd 	.word	0x080a1ffd
 80a2148:	40024000 	.word	0x40024000
 80a214c:	9a271c1e 	.word	0x9a271c1e
 80a2150:	2000010c 	.word	0x2000010c
 80a2154:	00000000 	.word	0x00000000
 80a2158:	080a20c1 	.word	0x080a20c1

080a215c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a215c:	4770      	bx	lr

080a215e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a215e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2160:	460e      	mov	r6, r1
 80a2162:	2400      	movs	r4, #0
 80a2164:	f100 0708 	add.w	r7, r0, #8
 80a2168:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a216a:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a216e:	220a      	movs	r2, #10
 80a2170:	4630      	mov	r0, r6
 80a2172:	f7fe ff28 	bl	80a0fc6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2176:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2178:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a217a:	d101      	bne.n	80a2180 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a217c:	4620      	mov	r0, r4
 80a217e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a2180:	2c00      	cmp	r4, #0
 80a2182:	d0f2      	beq.n	80a216a <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2184:	212e      	movs	r1, #46	; 0x2e
 80a2186:	4630      	mov	r0, r6
 80a2188:	f7fe ff0e 	bl	80a0fa8 <_ZN5Print5printEc>
 80a218c:	4404      	add	r4, r0
 80a218e:	e7ec      	b.n	80a216a <_ZNK9IPAddress7printToER5Print+0xc>

080a2190 <_ZN9IPAddressD0Ev>:
 80a2190:	b510      	push	{r4, lr}
 80a2192:	4604      	mov	r4, r0
 80a2194:	2118      	movs	r1, #24
 80a2196:	f7fd ff82 	bl	80a009e <_ZdlPvj>
 80a219a:	4620      	mov	r0, r4
 80a219c:	bd10      	pop	{r4, pc}
	...

080a21a0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a21a0:	b510      	push	{r4, lr}
 80a21a2:	4604      	mov	r4, r0
 80a21a4:	4b04      	ldr	r3, [pc, #16]	; (80a21b8 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a21a6:	2211      	movs	r2, #17
 80a21a8:	2100      	movs	r1, #0
 80a21aa:	f840 3b04 	str.w	r3, [r0], #4
 80a21ae:	f000 fded 	bl	80a2d8c <memset>
}
 80a21b2:	4620      	mov	r0, r4
 80a21b4:	bd10      	pop	{r4, pc}
 80a21b6:	bf00      	nop
 80a21b8:	080a3264 	.word	0x080a3264

080a21bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a21bc:	4603      	mov	r3, r0
 80a21be:	4a07      	ldr	r2, [pc, #28]	; (80a21dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a21c0:	b510      	push	{r4, lr}
 80a21c2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a21c6:	f101 0210 	add.w	r2, r1, #16
 80a21ca:	f851 4b04 	ldr.w	r4, [r1], #4
 80a21ce:	4291      	cmp	r1, r2
 80a21d0:	f843 4b04 	str.w	r4, [r3], #4
 80a21d4:	d1f9      	bne.n	80a21ca <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a21d6:	780a      	ldrb	r2, [r1, #0]
 80a21d8:	701a      	strb	r2, [r3, #0]
}
 80a21da:	bd10      	pop	{r4, pc}
 80a21dc:	080a3264 	.word	0x080a3264

080a21e0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a21e0:	4a02      	ldr	r2, [pc, #8]	; (80a21ec <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a21e2:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a21e6:	2204      	movs	r2, #4
 80a21e8:	7502      	strb	r2, [r0, #20]
}
 80a21ea:	4770      	bx	lr
 80a21ec:	080a3264 	.word	0x080a3264

080a21f0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a21f0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a21f2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a21f6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a21fa:	2304      	movs	r3, #4
 80a21fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a2200:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a2204:	6044      	str	r4, [r0, #4]
 80a2206:	7503      	strb	r3, [r0, #20]
}
 80a2208:	bd10      	pop	{r4, pc}
	...

080a220c <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a220c:	b513      	push	{r0, r1, r4, lr}
 80a220e:	4c04      	ldr	r4, [pc, #16]	; (80a2220 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2210:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a2212:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a2216:	9400      	str	r4, [sp, #0]
 80a2218:	f7ff ffea 	bl	80a21f0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a221c:	b002      	add	sp, #8
 80a221e:	bd10      	pop	{r4, pc}
 80a2220:	080a3264 	.word	0x080a3264

080a2224 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2224:	7441      	strb	r1, [r0, #17]
}
 80a2226:	4770      	bx	lr

080a2228 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2228:	4770      	bx	lr

080a222a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a222a:	4770      	bx	lr

080a222c <_ZN9USBSerial4readEv>:
{
 80a222c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a222e:	2100      	movs	r1, #0
 80a2230:	7c00      	ldrb	r0, [r0, #16]
 80a2232:	f7fe fcd1 	bl	80a0bd8 <HAL_USB_USART_Receive_Data>
}
 80a2236:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a223a:	bd08      	pop	{r3, pc}

080a223c <_ZN9USBSerial4peekEv>:
{
 80a223c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a223e:	2101      	movs	r1, #1
 80a2240:	7c00      	ldrb	r0, [r0, #16]
 80a2242:	f7fe fcc9 	bl	80a0bd8 <HAL_USB_USART_Receive_Data>
}
 80a2246:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a224a:	bd08      	pop	{r3, pc}

080a224c <_ZN9USBSerial17availableForWriteEv>:
{
 80a224c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a224e:	7c00      	ldrb	r0, [r0, #16]
 80a2250:	f7fe fcba 	bl	80a0bc8 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2254:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2258:	bd08      	pop	{r3, pc}

080a225a <_ZN9USBSerial9availableEv>:
{
 80a225a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a225c:	7c00      	ldrb	r0, [r0, #16]
 80a225e:	f7fe fcab 	bl	80a0bb8 <HAL_USB_USART_Available_Data>
}
 80a2262:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2266:	bd08      	pop	{r3, pc}

080a2268 <_ZN9USBSerial5writeEh>:
{
 80a2268:	b538      	push	{r3, r4, r5, lr}
 80a226a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a226c:	7c00      	ldrb	r0, [r0, #16]
{
 80a226e:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2270:	f7fe fcaa 	bl	80a0bc8 <HAL_USB_USART_Available_Data_For_Write>
 80a2274:	2800      	cmp	r0, #0
 80a2276:	dc01      	bgt.n	80a227c <_ZN9USBSerial5writeEh+0x14>
 80a2278:	7c60      	ldrb	r0, [r4, #17]
 80a227a:	b128      	cbz	r0, 80a2288 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a227c:	4629      	mov	r1, r5
 80a227e:	7c20      	ldrb	r0, [r4, #16]
 80a2280:	f7fe fcb2 	bl	80a0be8 <HAL_USB_USART_Send_Data>
 80a2284:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a2288:	bd38      	pop	{r3, r4, r5, pc}

080a228a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a228a:	7c00      	ldrb	r0, [r0, #16]
 80a228c:	f7fe bcb4 	b.w	80a0bf8 <HAL_USB_USART_Flush_Data>

080a2290 <_ZN9USBSerialD0Ev>:
 80a2290:	b510      	push	{r4, lr}
 80a2292:	4604      	mov	r4, r0
 80a2294:	2114      	movs	r1, #20
 80a2296:	f7fd ff02 	bl	80a009e <_ZdlPvj>
 80a229a:	4620      	mov	r0, r4
 80a229c:	bd10      	pop	{r4, pc}

080a229e <__tcf_1>:
 80a229e:	4770      	bx	lr

080a22a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a22a0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a22a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a22a6:	4604      	mov	r4, r0
 80a22a8:	4608      	mov	r0, r1
 80a22aa:	2100      	movs	r1, #0
 80a22ac:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a22b0:	4b04      	ldr	r3, [pc, #16]	; (80a22c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a22b2:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a22b4:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a22b6:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a22b8:	4611      	mov	r1, r2
  _blocking = true;
 80a22ba:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a22bc:	f7fe fc64 	bl	80a0b88 <HAL_USB_USART_Init>
}
 80a22c0:	4620      	mov	r0, r4
 80a22c2:	bd10      	pop	{r4, pc}
 80a22c4:	080a3278 	.word	0x080a3278

080a22c8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a22c8:	2200      	movs	r2, #0
 80a22ca:	7c00      	ldrb	r0, [r0, #16]
 80a22cc:	f7fe bc64 	b.w	80a0b98 <HAL_USB_USART_Begin>

080a22d0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 80a22d0:	7c00      	ldrb	r0, [r0, #16]
 80a22d2:	f7fe bc69 	b.w	80a0ba8 <HAL_USB_USART_End>
	...

080a22d8 <_Z19acquireSerialBufferv>:
{
 80a22d8:	b510      	push	{r4, lr}
 80a22da:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a22dc:	2214      	movs	r2, #20
 80a22de:	2100      	movs	r1, #0
 80a22e0:	f000 fd54 	bl	80a2d8c <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a22e4:	4b05      	ldr	r3, [pc, #20]	; (80a22fc <_Z19acquireSerialBufferv+0x24>)
}
 80a22e6:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a22e8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a22ea:	4b05      	ldr	r3, [pc, #20]	; (80a2300 <_Z19acquireSerialBufferv+0x28>)
 80a22ec:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a22ee:	f240 1301 	movw	r3, #257	; 0x101
 80a22f2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a22f4:	2381      	movs	r3, #129	; 0x81
 80a22f6:	8223      	strh	r3, [r4, #16]
}
 80a22f8:	bd10      	pop	{r4, pc}
 80a22fa:	bf00      	nop
 80a22fc:	20000144 	.word	0x20000144
 80a2300:	20000245 	.word	0x20000245

080a2304 <_Z16_fetch_usbserialv>:
{
 80a2304:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2306:	4d0e      	ldr	r5, [pc, #56]	; (80a2340 <_Z16_fetch_usbserialv+0x3c>)
{
 80a2308:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a230a:	a801      	add	r0, sp, #4
 80a230c:	f7ff ffe4 	bl	80a22d8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2310:	7829      	ldrb	r1, [r5, #0]
 80a2312:	f3bf 8f5b 	dmb	ish
 80a2316:	f011 0401 	ands.w	r4, r1, #1
 80a231a:	d10e      	bne.n	80a233a <_Z16_fetch_usbserialv+0x36>
 80a231c:	4628      	mov	r0, r5
 80a231e:	f7fd fecd 	bl	80a00bc <__cxa_guard_acquire>
 80a2322:	b150      	cbz	r0, 80a233a <_Z16_fetch_usbserialv+0x36>
 80a2324:	4621      	mov	r1, r4
 80a2326:	aa01      	add	r2, sp, #4
 80a2328:	4806      	ldr	r0, [pc, #24]	; (80a2344 <_Z16_fetch_usbserialv+0x40>)
 80a232a:	f7ff ffb9 	bl	80a22a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a232e:	4628      	mov	r0, r5
 80a2330:	f7fd fec9 	bl	80a00c6 <__cxa_guard_release>
 80a2334:	4804      	ldr	r0, [pc, #16]	; (80a2348 <_Z16_fetch_usbserialv+0x44>)
 80a2336:	f000 fceb 	bl	80a2d10 <atexit>
	return _usbserial;
}
 80a233a:	4802      	ldr	r0, [pc, #8]	; (80a2344 <_Z16_fetch_usbserialv+0x40>)
 80a233c:	b007      	add	sp, #28
 80a233e:	bd30      	pop	{r4, r5, pc}
 80a2340:	20000114 	.word	0x20000114
 80a2344:	2000011c 	.word	0x2000011c
 80a2348:	080a2229 	.word	0x080a2229

080a234c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a234c:	b510      	push	{r4, lr}
 80a234e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a2350:	2214      	movs	r2, #20
 80a2352:	2100      	movs	r1, #0
 80a2354:	f000 fd1a 	bl	80a2d8c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2358:	4b05      	ldr	r3, [pc, #20]	; (80a2370 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a235a:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a235c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a235e:	4b05      	ldr	r3, [pc, #20]	; (80a2374 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2360:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2362:	f240 1301 	movw	r3, #257	; 0x101
 80a2366:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2368:	2381      	movs	r3, #129	; 0x81
 80a236a:	8223      	strh	r3, [r4, #16]
}
 80a236c:	bd10      	pop	{r4, pc}
 80a236e:	bf00      	nop
 80a2370:	200002c6 	.word	0x200002c6
 80a2374:	200003c7 	.word	0x200003c7

080a2378 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2378:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a237a:	4c0e      	ldr	r4, [pc, #56]	; (80a23b4 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a237c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a237e:	a801      	add	r0, sp, #4
 80a2380:	f7ff ffe4 	bl	80a234c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2384:	7823      	ldrb	r3, [r4, #0]
 80a2386:	f3bf 8f5b 	dmb	ish
 80a238a:	07db      	lsls	r3, r3, #31
 80a238c:	d40e      	bmi.n	80a23ac <_Z17_fetch_usbserial1v+0x34>
 80a238e:	4620      	mov	r0, r4
 80a2390:	f7fd fe94 	bl	80a00bc <__cxa_guard_acquire>
 80a2394:	b150      	cbz	r0, 80a23ac <_Z17_fetch_usbserial1v+0x34>
 80a2396:	2101      	movs	r1, #1
 80a2398:	aa01      	add	r2, sp, #4
 80a239a:	4807      	ldr	r0, [pc, #28]	; (80a23b8 <_Z17_fetch_usbserial1v+0x40>)
 80a239c:	f7ff ff80 	bl	80a22a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a23a0:	4620      	mov	r0, r4
 80a23a2:	f7fd fe90 	bl	80a00c6 <__cxa_guard_release>
 80a23a6:	4805      	ldr	r0, [pc, #20]	; (80a23bc <_Z17_fetch_usbserial1v+0x44>)
 80a23a8:	f000 fcb2 	bl	80a2d10 <atexit>
  return _usbserial1;
}
 80a23ac:	4802      	ldr	r0, [pc, #8]	; (80a23b8 <_Z17_fetch_usbserial1v+0x40>)
 80a23ae:	b006      	add	sp, #24
 80a23b0:	bd10      	pop	{r4, pc}
 80a23b2:	bf00      	nop
 80a23b4:	20000118 	.word	0x20000118
 80a23b8:	20000130 	.word	0x20000130
 80a23bc:	080a229f 	.word	0x080a229f

080a23c0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 80a23c0:	4770      	bx	lr

080a23c2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a23c2:	7441      	strb	r1, [r0, #17]
}
 80a23c4:	4770      	bx	lr

080a23c6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a23c6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a23c8:	7c00      	ldrb	r0, [r0, #16]
 80a23ca:	f7fe fb59 	bl	80a0a80 <hal_usart_available_data_for_write>
}
 80a23ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a23d2:	bd08      	pop	{r3, pc}

080a23d4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a23d4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a23d6:	7c00      	ldrb	r0, [r0, #16]
 80a23d8:	f7fe fb2a 	bl	80a0a30 <hal_usart_available>
}
 80a23dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a23e0:	bd08      	pop	{r3, pc}

080a23e2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a23e2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a23e4:	7c00      	ldrb	r0, [r0, #16]
 80a23e6:	f7fe fb33 	bl	80a0a50 <hal_usart_peek>
}
 80a23ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a23ee:	bd08      	pop	{r3, pc}

080a23f0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a23f0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a23f2:	7c00      	ldrb	r0, [r0, #16]
 80a23f4:	f7fe fb24 	bl	80a0a40 <hal_usart_read>
}
 80a23f8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a23fc:	bd08      	pop	{r3, pc}

080a23fe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a23fe:	7c00      	ldrb	r0, [r0, #16]
 80a2400:	f7fe bb2e 	b.w	80a0a60 <hal_usart_flush>

080a2404 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2404:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2406:	7c46      	ldrb	r6, [r0, #17]
{
 80a2408:	4604      	mov	r4, r0
 80a240a:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a240c:	b12e      	cbz	r6, 80a241a <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a240e:	4629      	mov	r1, r5
 80a2410:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2412:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a2416:	f7fe bb03 	b.w	80a0a20 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a241a:	7c00      	ldrb	r0, [r0, #16]
 80a241c:	f7fe fb30 	bl	80a0a80 <hal_usart_available_data_for_write>
 80a2420:	2800      	cmp	r0, #0
 80a2422:	dcf4      	bgt.n	80a240e <_ZN11USARTSerial5writeEh+0xa>
}
 80a2424:	4630      	mov	r0, r6
 80a2426:	bd70      	pop	{r4, r5, r6, pc}

080a2428 <_ZN11USARTSerialD0Ev>:
 80a2428:	b510      	push	{r4, lr}
 80a242a:	4604      	mov	r4, r0
 80a242c:	2114      	movs	r1, #20
 80a242e:	f7fd fe36 	bl	80a009e <_ZdlPvj>
 80a2432:	4620      	mov	r0, r4
 80a2434:	bd10      	pop	{r4, pc}
	...

080a2438 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a2438:	b510      	push	{r4, lr}
 80a243a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a243e:	4604      	mov	r4, r0
 80a2440:	4608      	mov	r0, r1
 80a2442:	4611      	mov	r1, r2
 80a2444:	2200      	movs	r2, #0
 80a2446:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80a244a:	4b04      	ldr	r3, [pc, #16]	; (80a245c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 80a244c:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a244e:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a2450:	2301      	movs	r3, #1
 80a2452:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 80a2454:	f7fe fb24 	bl	80a0aa0 <hal_usart_init_ex>
}
 80a2458:	4620      	mov	r0, r4
 80a245a:	bd10      	pop	{r4, pc}
 80a245c:	080a32a8 	.word	0x080a32a8

080a2460 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 80a2460:	2300      	movs	r3, #0
 80a2462:	7c00      	ldrb	r0, [r0, #16]
 80a2464:	f7fe bb14 	b.w	80a0a90 <hal_usart_begin_config>

080a2468 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 80a2468:	2200      	movs	r2, #0
 80a246a:	f7ff bff9 	b.w	80a2460 <_ZN11USARTSerial5beginEmm>

080a246e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 80a246e:	7c00      	ldrb	r0, [r0, #16]
 80a2470:	f7fe bace 	b.w	80a0a10 <hal_usart_end>

080a2474 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a2474:	4770      	bx	lr

080a2476 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2478:	4606      	mov	r6, r0
 80a247a:	4615      	mov	r5, r2
 80a247c:	460c      	mov	r4, r1
 80a247e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2480:	42bc      	cmp	r4, r7
 80a2482:	d006      	beq.n	80a2492 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2484:	6833      	ldr	r3, [r6, #0]
 80a2486:	4630      	mov	r0, r6
 80a2488:	689b      	ldr	r3, [r3, #8]
 80a248a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a248e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a2490:	e7f6      	b.n	80a2480 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a2492:	4628      	mov	r0, r5
 80a2494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2496 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a2496:	2200      	movs	r2, #0
 80a2498:	7c00      	ldrb	r0, [r0, #16]
 80a249a:	f7fe bb21 	b.w	80a0ae0 <hal_i2c_write>

080a249e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a249e:	2100      	movs	r1, #0
 80a24a0:	7c00      	ldrb	r0, [r0, #16]
 80a24a2:	f7fe bb25 	b.w	80a0af0 <hal_i2c_available>

080a24a6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a24a6:	2100      	movs	r1, #0
 80a24a8:	7c00      	ldrb	r0, [r0, #16]
 80a24aa:	f7fe bb29 	b.w	80a0b00 <hal_i2c_read>

080a24ae <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a24ae:	2100      	movs	r1, #0
 80a24b0:	7c00      	ldrb	r0, [r0, #16]
 80a24b2:	f7fe bb2d 	b.w	80a0b10 <hal_i2c_peek>

080a24b6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a24b6:	2100      	movs	r1, #0
 80a24b8:	7c00      	ldrb	r0, [r0, #16]
 80a24ba:	f7fe bb31 	b.w	80a0b20 <hal_i2c_flush>

080a24be <_ZN7TwoWireD0Ev>:
 80a24be:	b510      	push	{r4, lr}
 80a24c0:	4604      	mov	r4, r0
 80a24c2:	2114      	movs	r1, #20
 80a24c4:	f7fd fdeb 	bl	80a009e <_ZdlPvj>
 80a24c8:	4620      	mov	r0, r4
 80a24ca:	bd10      	pop	{r4, pc}

080a24cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a24cc:	b510      	push	{r4, lr}
 80a24ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a24d2:	4604      	mov	r4, r0
 80a24d4:	4608      	mov	r0, r1
 80a24d6:	2100      	movs	r1, #0
 80a24d8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a24dc:	4b03      	ldr	r3, [pc, #12]	; (80a24ec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a24de:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a24e0:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a24e2:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a24e4:	f7fe fb2c 	bl	80a0b40 <hal_i2c_init>
}
 80a24e8:	4620      	mov	r0, r4
 80a24ea:	bd10      	pop	{r4, pc}
 80a24ec:	080a32d8 	.word	0x080a32d8

080a24f0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a24f0:	2300      	movs	r3, #0
 80a24f2:	7c00      	ldrb	r0, [r0, #16]
 80a24f4:	461a      	mov	r2, r3
 80a24f6:	4619      	mov	r1, r3
 80a24f8:	f7fe bada 	b.w	80a0ab0 <hal_i2c_begin>

080a24fc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80a24fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80a24fe:	2200      	movs	r2, #0
 80a2500:	2314      	movs	r3, #20
 80a2502:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a2506:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 80a250a:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 80a250c:	7c00      	ldrb	r0, [r0, #16]
 80a250e:	f88d 3008 	strb.w	r3, [sp, #8]
 80a2512:	684b      	ldr	r3, [r1, #4]
 80a2514:	9303      	str	r3, [sp, #12]
 80a2516:	68cb      	ldr	r3, [r1, #12]
 80a2518:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80a251a:	7a0b      	ldrb	r3, [r1, #8]
 80a251c:	a901      	add	r1, sp, #4
 80a251e:	9305      	str	r3, [sp, #20]
 80a2520:	f7fe fb18 	bl	80a0b54 <hal_i2c_request_ex>
}
 80a2524:	b007      	add	sp, #28
 80a2526:	f85d fb04 	ldr.w	pc, [sp], #4

080a252a <_ZN7TwoWire11requestFromEhjh>:
{
 80a252a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80a252c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80a252e:	f88d 1000 	strb.w	r1, [sp]
 80a2532:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a2536:	bf18      	it	ne
 80a2538:	2301      	movne	r3, #1
 80a253a:	9103      	str	r1, [sp, #12]
 80a253c:	4669      	mov	r1, sp
    size_ = size;
 80a253e:	9201      	str	r2, [sp, #4]
 80a2540:	f88d 3008 	strb.w	r3, [sp, #8]
 80a2544:	f7ff ffda 	bl	80a24fc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80a2548:	b005      	add	sp, #20
 80a254a:	f85d fb04 	ldr.w	pc, [sp], #4

080a254e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 80a254e:	2301      	movs	r3, #1
 80a2550:	f7ff bfeb 	b.w	80a252a <_ZN7TwoWire11requestFromEhjh>

080a2554 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a2554:	2200      	movs	r2, #0
 80a2556:	7c00      	ldrb	r0, [r0, #16]
 80a2558:	f7fe bab2 	b.w	80a0ac0 <hal_i2c_begin_transmission>

080a255c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 80a255c:	b2c9      	uxtb	r1, r1
 80a255e:	f7ff bff9 	b.w	80a2554 <_ZN7TwoWire17beginTransmissionEh>

080a2562 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a2562:	2200      	movs	r2, #0
 80a2564:	7c00      	ldrb	r0, [r0, #16]
 80a2566:	f7fe bab3 	b.w	80a0ad0 <hal_i2c_end_transmission>

080a256a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a256a:	2101      	movs	r1, #1
 80a256c:	f7ff bff9 	b.w	80a2562 <_ZN7TwoWire15endTransmissionEh>

080a2570 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 80a2570:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 80a2572:	6843      	ldr	r3, [r0, #4]
    {
 80a2574:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 80a2576:	3b01      	subs	r3, #1
 80a2578:	6043      	str	r3, [r0, #4]
 80a257a:	b963      	cbnz	r3, 80a2596 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 80a257c:	6803      	ldr	r3, [r0, #0]
 80a257e:	689b      	ldr	r3, [r3, #8]
 80a2580:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a2582:	68a3      	ldr	r3, [r4, #8]
 80a2584:	3b01      	subs	r3, #1
 80a2586:	60a3      	str	r3, [r4, #8]
 80a2588:	b92b      	cbnz	r3, 80a2596 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 80a258a:	6823      	ldr	r3, [r4, #0]
 80a258c:	4620      	mov	r0, r4
    }
 80a258e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 80a2592:	68db      	ldr	r3, [r3, #12]
 80a2594:	4718      	bx	r3
    }
 80a2596:	bd10      	pop	{r4, pc}

080a2598 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2598:	2200      	movs	r2, #0
 80a259a:	6840      	ldr	r0, [r0, #4]
 80a259c:	4611      	mov	r1, r2
 80a259e:	f7fe bb97 	b.w	80a0cd0 <network_ready>

080a25a2 <_ZN5spark9WiFiClass7resolveEPKc>:
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a25a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a25a4:	4615      	mov	r5, r2
 80a25a6:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a25a8:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a25aa:	460e      	mov	r6, r1
 80a25ac:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a25ae:	2100      	movs	r1, #0
 80a25b0:	a803      	add	r0, sp, #12
 80a25b2:	f000 fbeb 	bl	80a2d8c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a25b6:	4628      	mov	r0, r5
 80a25b8:	f000 fc55 	bl	80a2e66 <strlen>
 80a25bc:	2700      	movs	r7, #0
 80a25be:	b281      	uxth	r1, r0
 80a25c0:	6873      	ldr	r3, [r6, #4]
 80a25c2:	4628      	mov	r0, r5
 80a25c4:	9700      	str	r7, [sp, #0]
 80a25c6:	aa03      	add	r2, sp, #12
 80a25c8:	f7fe fb1e 	bl	80a0c08 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a25cc:	b130      	cbz	r0, 80a25dc <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a25ce:	4639      	mov	r1, r7
 80a25d0:	4620      	mov	r0, r4
 80a25d2:	f7ff fe05 	bl	80a21e0 <_ZN9IPAddressC1Em>
    }
 80a25d6:	4620      	mov	r0, r4
 80a25d8:	b009      	add	sp, #36	; 0x24
 80a25da:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a25dc:	4620      	mov	r0, r4
 80a25de:	a903      	add	r1, sp, #12
 80a25e0:	f7ff fdec 	bl	80a21bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a25e4:	e7f7      	b.n	80a25d6 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a25e6 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a25e6:	2200      	movs	r2, #0
 80a25e8:	6840      	ldr	r0, [r0, #4]
 80a25ea:	4611      	mov	r1, r2
 80a25ec:	f7fe bb90 	b.w	80a0d10 <network_listening>

080a25f0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a25f0:	2200      	movs	r2, #0
 80a25f2:	6840      	ldr	r0, [r0, #4]
 80a25f4:	4611      	mov	r1, r2
 80a25f6:	f7fe bb9b 	b.w	80a0d30 <network_get_listen_timeout>

080a25fa <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a25fa:	2200      	movs	r2, #0
 80a25fc:	6840      	ldr	r0, [r0, #4]
 80a25fe:	f7fe bb8f 	b.w	80a0d20 <network_set_listen_timeout>

080a2602 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2602:	2200      	movs	r2, #0
 80a2604:	6840      	ldr	r0, [r0, #4]
 80a2606:	f081 0101 	eor.w	r1, r1, #1
 80a260a:	f7fe bb79 	b.w	80a0d00 <network_listen>

080a260e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a260e:	2300      	movs	r3, #0
 80a2610:	6840      	ldr	r0, [r0, #4]
 80a2612:	461a      	mov	r2, r3
 80a2614:	4619      	mov	r1, r3
 80a2616:	f7fe bb6b 	b.w	80a0cf0 <network_off>

080a261a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a261a:	2300      	movs	r3, #0
 80a261c:	6840      	ldr	r0, [r0, #4]
 80a261e:	461a      	mov	r2, r3
 80a2620:	4619      	mov	r1, r3
 80a2622:	f7fe bb5d 	b.w	80a0ce0 <network_on>

080a2626 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a2626:	2200      	movs	r2, #0
 80a2628:	6840      	ldr	r0, [r0, #4]
 80a262a:	4611      	mov	r1, r2
 80a262c:	f7fe bb40 	b.w	80a0cb0 <network_connecting>

080a2630 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2630:	2200      	movs	r2, #0
 80a2632:	2102      	movs	r1, #2
 80a2634:	6840      	ldr	r0, [r0, #4]
 80a2636:	f7fe bb43 	b.w	80a0cc0 <network_disconnect>

080a263a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a263a:	2300      	movs	r3, #0
 80a263c:	6840      	ldr	r0, [r0, #4]
 80a263e:	461a      	mov	r2, r3
 80a2640:	f7fe bb2e 	b.w	80a0ca0 <network_connect>

080a2644 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2644:	2204      	movs	r2, #4
 80a2646:	4b02      	ldr	r3, [pc, #8]	; (80a2650 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2648:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a264a:	4a02      	ldr	r2, [pc, #8]	; (80a2654 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a264c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a264e:	4770      	bx	lr
 80a2650:	20000448 	.word	0x20000448
 80a2654:	080a3300 	.word	0x080a3300

080a2658 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a2658:	2300      	movs	r3, #0
 80a265a:	6840      	ldr	r0, [r0, #4]
 80a265c:	461a      	mov	r2, r3
 80a265e:	f7fe bb1f 	b.w	80a0ca0 <network_connect>

080a2662 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2662:	2200      	movs	r2, #0
 80a2664:	2102      	movs	r1, #2
 80a2666:	6840      	ldr	r0, [r0, #4]
 80a2668:	f7fe bb2a 	b.w	80a0cc0 <network_disconnect>

080a266c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a266c:	2200      	movs	r2, #0
 80a266e:	6840      	ldr	r0, [r0, #4]
 80a2670:	4611      	mov	r1, r2
 80a2672:	f7fe bb1d 	b.w	80a0cb0 <network_connecting>

080a2676 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a2676:	2200      	movs	r2, #0
 80a2678:	6840      	ldr	r0, [r0, #4]
 80a267a:	4611      	mov	r1, r2
 80a267c:	f7fe bb28 	b.w	80a0cd0 <network_ready>

080a2680 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2680:	2300      	movs	r3, #0
 80a2682:	6840      	ldr	r0, [r0, #4]
 80a2684:	461a      	mov	r2, r3
 80a2686:	4619      	mov	r1, r3
 80a2688:	f7fe bb2a 	b.w	80a0ce0 <network_on>

080a268c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a268c:	2300      	movs	r3, #0
 80a268e:	6840      	ldr	r0, [r0, #4]
 80a2690:	461a      	mov	r2, r3
 80a2692:	4619      	mov	r1, r3
 80a2694:	f7fe bb2c 	b.w	80a0cf0 <network_off>

080a2698 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a2698:	2100      	movs	r1, #0
 80a269a:	6840      	ldr	r0, [r0, #4]
 80a269c:	f7fe bb50 	b.w	80a0d40 <network_is_on>

080a26a0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a26a0:	2100      	movs	r1, #0
 80a26a2:	6840      	ldr	r0, [r0, #4]
 80a26a4:	f7fe bb54 	b.w	80a0d50 <network_is_off>

080a26a8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a26a8:	2200      	movs	r2, #0
 80a26aa:	6840      	ldr	r0, [r0, #4]
 80a26ac:	f081 0101 	eor.w	r1, r1, #1
 80a26b0:	f7fe bb26 	b.w	80a0d00 <network_listen>

080a26b4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a26b4:	2200      	movs	r2, #0
 80a26b6:	6840      	ldr	r0, [r0, #4]
 80a26b8:	f7fe bb32 	b.w	80a0d20 <network_set_listen_timeout>

080a26bc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a26bc:	2200      	movs	r2, #0
 80a26be:	6840      	ldr	r0, [r0, #4]
 80a26c0:	4611      	mov	r1, r2
 80a26c2:	f7fe bb35 	b.w	80a0d30 <network_get_listen_timeout>

080a26c6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a26c6:	2200      	movs	r2, #0
 80a26c8:	6840      	ldr	r0, [r0, #4]
 80a26ca:	4611      	mov	r1, r2
 80a26cc:	f7fe bb20 	b.w	80a0d10 <network_listening>

080a26d0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a26d0:	b570      	push	{r4, r5, r6, lr}
 80a26d2:	4615      	mov	r5, r2
 80a26d4:	b08e      	sub	sp, #56	; 0x38
 80a26d6:	4604      	mov	r4, r0
    IPAddress addr;
 80a26d8:	a808      	add	r0, sp, #32
 80a26da:	f7ff fd61 	bl	80a21a0 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a26de:	2211      	movs	r2, #17
 80a26e0:	2100      	movs	r1, #0
 80a26e2:	a803      	add	r0, sp, #12
 80a26e4:	f000 fb52 	bl	80a2d8c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a26e8:	2600      	movs	r6, #0
 80a26ea:	4628      	mov	r0, r5
 80a26ec:	f000 fbbb 	bl	80a2e66 <strlen>
 80a26f0:	4b0a      	ldr	r3, [pc, #40]	; (80a271c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a26f2:	9600      	str	r6, [sp, #0]
 80a26f4:	b281      	uxth	r1, r0
 80a26f6:	685b      	ldr	r3, [r3, #4]
 80a26f8:	4628      	mov	r0, r5
 80a26fa:	aa03      	add	r2, sp, #12
 80a26fc:	f7fe fa84 	bl	80a0c08 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2700:	b130      	cbz	r0, 80a2710 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a2702:	4631      	mov	r1, r6
 80a2704:	4620      	mov	r0, r4
 80a2706:	f7ff fd6b 	bl	80a21e0 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a270a:	4620      	mov	r0, r4
 80a270c:	b00e      	add	sp, #56	; 0x38
 80a270e:	bd70      	pop	{r4, r5, r6, pc}
 80a2710:	4620      	mov	r0, r4
 80a2712:	a903      	add	r1, sp, #12
 80a2714:	f7ff fd52 	bl	80a21bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a2718:	e7f7      	b.n	80a270a <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a271a:	bf00      	nop
 80a271c:	20000448 	.word	0x20000448

080a2720 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a2720:	4b02      	ldr	r3, [pc, #8]	; (80a272c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2722:	4a03      	ldr	r2, [pc, #12]	; (80a2730 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2724:	601a      	str	r2, [r3, #0]
 80a2726:	2200      	movs	r2, #0
 80a2728:	605a      	str	r2, [r3, #4]

} // spark
 80a272a:	4770      	bx	lr
 80a272c:	20000450 	.word	0x20000450
 80a2730:	080a333c 	.word	0x080a333c

080a2734 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 80a2734:	2201      	movs	r2, #1
 80a2736:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 80a273a:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 80a273e:	4618      	mov	r0, r3
 80a2740:	2901      	cmp	r1, #1
 80a2742:	d108      	bne.n	80a2756 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 80a2744:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80a2748:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 80a274c:	3a01      	subs	r2, #1
 80a274e:	f103 0310 	add.w	r3, r3, #16
 80a2752:	d1f2      	bne.n	80a273a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 80a2754:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 80a2756:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 80a2758:	bf04      	itt	eq
 80a275a:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 80a275e:	1852      	addeq	r2, r2, r1
 80a2760:	e7f4      	b.n	80a274c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

080a2762 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 80a2762:	b40e      	push	{r1, r2, r3}
 80a2764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2768:	b087      	sub	sp, #28
 80a276a:	af00      	add	r7, sp, #0
 80a276c:	f107 0534 	add.w	r5, r7, #52	; 0x34
 80a2770:	f855 8b04 	ldr.w	r8, [r5], #4
 80a2774:	4604      	mov	r4, r0
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a2776:	462b      	mov	r3, r5
 80a2778:	4642      	mov	r2, r8
 80a277a:	2110      	movs	r1, #16
 80a277c:	f107 0008 	add.w	r0, r7, #8
    va_start(args, fmt);
 80a2780:	607d      	str	r5, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a2782:	f7fe fb15 	bl	80a0db0 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 80a2786:	280f      	cmp	r0, #15
 80a2788:	d91b      	bls.n	80a27c2 <_ZN5spark10JSONWriter6printfEPKcz+0x60>
        char buf[n + 1]; // Use larger buffer
 80a278a:	f100 0308 	add.w	r3, r0, #8
 80a278e:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 80a2792:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 80a2794:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a2798:	4642      	mov	r2, r8
 80a279a:	1c41      	adds	r1, r0, #1
 80a279c:	462b      	mov	r3, r5
 80a279e:	4668      	mov	r0, sp
        va_start(args, fmt);
 80a27a0:	607d      	str	r5, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a27a2:	f7fe fb05 	bl	80a0db0 <vsnprintf>
        if (n > 0) {
 80a27a6:	1e02      	subs	r2, r0, #0
 80a27a8:	dd04      	ble.n	80a27b4 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 80a27aa:	6823      	ldr	r3, [r4, #0]
 80a27ac:	4669      	mov	r1, sp
 80a27ae:	4620      	mov	r0, r4
 80a27b0:	689b      	ldr	r3, [r3, #8]
 80a27b2:	4798      	blx	r3
 80a27b4:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 80a27b6:	371c      	adds	r7, #28
 80a27b8:	46bd      	mov	sp, r7
 80a27ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a27be:	b003      	add	sp, #12
 80a27c0:	4770      	bx	lr
    } else if (n > 0) {
 80a27c2:	2800      	cmp	r0, #0
 80a27c4:	d0f7      	beq.n	80a27b6 <_ZN5spark10JSONWriter6printfEPKcz+0x54>
        write(buf, n);
 80a27c6:	6823      	ldr	r3, [r4, #0]
 80a27c8:	4602      	mov	r2, r0
 80a27ca:	689b      	ldr	r3, [r3, #8]
 80a27cc:	4620      	mov	r0, r4
 80a27ce:	f107 0108 	add.w	r1, r7, #8
 80a27d2:	4798      	blx	r3
}
 80a27d4:	e7ef      	b.n	80a27b6 <_ZN5spark10JSONWriter6printfEPKcz+0x54>

080a27d6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 80a27d6:	b538      	push	{r3, r4, r5, lr}
 80a27d8:	680b      	ldr	r3, [r1, #0]
 80a27da:	4604      	mov	r4, r0
 80a27dc:	6003      	str	r3, [r0, #0]
 80a27de:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 80a27e0:	6843      	ldr	r3, [r0, #4]
 80a27e2:	429d      	cmp	r5, r3
 80a27e4:	d008      	beq.n	80a27f8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 80a27e6:	b115      	cbz	r5, 80a27ee <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 80a27e8:	686b      	ldr	r3, [r5, #4]
 80a27ea:	3301      	adds	r3, #1
 80a27ec:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 80a27ee:	6860      	ldr	r0, [r4, #4]
 80a27f0:	b108      	cbz	r0, 80a27f6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 80a27f2:	f7ff febd 	bl	80a2570 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 80a27f6:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 80a27f8:	bd38      	pop	{r3, r4, r5, pc}

080a27fa <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
 80a27fa:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 80a27fc:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 80a27fe:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 80a2802:	2201      	movs	r2, #1
 80a2804:	689b      	ldr	r3, [r3, #8]
 80a2806:	f10d 0107 	add.w	r1, sp, #7
 80a280a:	4798      	blx	r3
}
 80a280c:	b003      	add	sp, #12
 80a280e:	f85d fb04 	ldr.w	pc, [sp], #4

080a2812 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a2812:	460b      	mov	r3, r1
 80a2814:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 80a2816:	2200      	movs	r2, #0
 80a2818:	b510      	push	{r4, lr}
 80a281a:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 80a281c:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 80a2820:	6083      	str	r3, [r0, #8]
    if (t) {
 80a2822:	b90b      	cbnz	r3, 80a2828 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 80a2824:	4620      	mov	r0, r4
 80a2826:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 80a2828:	f7ff ffd5 	bl	80a27d6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 80a282c:	e7fa      	b.n	80a2824 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

080a282e <_ZNK5spark9JSONValue4typeEv>:
spark::JSONType spark::JSONValue::type() const {
 80a282e:	4603      	mov	r3, r0
    if (!t_) {
 80a2830:	6880      	ldr	r0, [r0, #8]
 80a2832:	b320      	cbz	r0, 80a287e <_ZNK5spark9JSONValue4typeEv+0x50>
    switch (t_->type) {
 80a2834:	7802      	ldrb	r2, [r0, #0]
 80a2836:	2a03      	cmp	r2, #3
 80a2838:	d81a      	bhi.n	80a2870 <_ZNK5spark9JSONValue4typeEv+0x42>
 80a283a:	e8df f002 	tbb	[pc, r2]
 80a283e:	1704      	.short	0x1704
 80a2840:	1b02      	.short	0x1b02
 80a2842:	2005      	movs	r0, #5
 80a2844:	4770      	bx	lr
        const char c = d_->json[t_->start];
 80a2846:	681b      	ldr	r3, [r3, #0]
 80a2848:	685a      	ldr	r2, [r3, #4]
 80a284a:	6843      	ldr	r3, [r0, #4]
 80a284c:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 80a284e:	282d      	cmp	r0, #45	; 0x2d
 80a2850:	d012      	beq.n	80a2878 <_ZNK5spark9JSONValue4typeEv+0x4a>
 80a2852:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a2856:	2b09      	cmp	r3, #9
 80a2858:	d90e      	bls.n	80a2878 <_ZNK5spark9JSONValue4typeEv+0x4a>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 80a285a:	2874      	cmp	r0, #116	; 0x74
 80a285c:	d00e      	beq.n	80a287c <_ZNK5spark9JSONValue4typeEv+0x4e>
 80a285e:	2866      	cmp	r0, #102	; 0x66
 80a2860:	d00c      	beq.n	80a287c <_ZNK5spark9JSONValue4typeEv+0x4e>
        return JSON_TYPE_INVALID;
 80a2862:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 80a2866:	4258      	negs	r0, r3
 80a2868:	4158      	adcs	r0, r3
 80a286a:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 80a286c:	2006      	movs	r0, #6
 80a286e:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 80a2870:	2000      	movs	r0, #0
 80a2872:	4770      	bx	lr
        return JSON_TYPE_STRING;
 80a2874:	2004      	movs	r0, #4
 80a2876:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 80a2878:	2003      	movs	r0, #3
 80a287a:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 80a287c:	2002      	movs	r0, #2
}
 80a287e:	4770      	bx	lr

080a2880 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 80a2880:	b510      	push	{r4, lr}
 80a2882:	4604      	mov	r4, r0
    switch (type()) {
 80a2884:	f7ff ffd3 	bl	80a282e <_ZNK5spark9JSONValue4typeEv>
 80a2888:	2802      	cmp	r0, #2
 80a288a:	d00e      	beq.n	80a28aa <_ZNK5spark9JSONValue5toIntEv+0x2a>
 80a288c:	1ec3      	subs	r3, r0, #3
 80a288e:	b2db      	uxtb	r3, r3
 80a2890:	2b01      	cmp	r3, #1
 80a2892:	d814      	bhi.n	80a28be <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 80a2894:	6822      	ldr	r2, [r4, #0]
 80a2896:	68a3      	ldr	r3, [r4, #8]
 80a2898:	6850      	ldr	r0, [r2, #4]
 80a289a:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 80a289c:	220a      	movs	r2, #10
}
 80a289e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 80a28a2:	2100      	movs	r1, #0
 80a28a4:	4418      	add	r0, r3
 80a28a6:	f000 bb8b 	b.w	80a2fc0 <strtol>
        const char* const s = d_->json + t_->start;
 80a28aa:	6822      	ldr	r2, [r4, #0]
 80a28ac:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 80a28ae:	6852      	ldr	r2, [r2, #4]
 80a28b0:	685b      	ldr	r3, [r3, #4]
 80a28b2:	5cd0      	ldrb	r0, [r2, r3]
 80a28b4:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 80a28b8:	4258      	negs	r0, r3
 80a28ba:	4158      	adcs	r0, r3
}
 80a28bc:	bd10      	pop	{r4, pc}
    switch (type()) {
 80a28be:	2000      	movs	r0, #0
 80a28c0:	e7fc      	b.n	80a28bc <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

080a28c4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a28c4:	460b      	mov	r3, r1
 80a28c6:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 80a28c8:	2200      	movs	r2, #0
 80a28ca:	b510      	push	{r4, lr}
 80a28cc:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 80a28ce:	e9c0 2200 	strd	r2, r2, [r0]
        n_(0) {
 80a28d2:	480d      	ldr	r0, [pc, #52]	; (80a2908 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 80a28d4:	e9c4 0202 	strd	r0, r2, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 80a28d8:	b1a3      	cbz	r3, 80a2904 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
 80a28da:	781a      	ldrb	r2, [r3, #0]
 80a28dc:	2a03      	cmp	r2, #3
 80a28de:	d006      	beq.n	80a28ee <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
 80a28e0:	b982      	cbnz	r2, 80a2904 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 80a28e2:	680a      	ldr	r2, [r1, #0]
 80a28e4:	6850      	ldr	r0, [r2, #4]
 80a28e6:	685a      	ldr	r2, [r3, #4]
 80a28e8:	5c82      	ldrb	r2, [r0, r2]
 80a28ea:	2a6e      	cmp	r2, #110	; 0x6e
 80a28ec:	d007      	beq.n	80a28fe <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3a>
            s_ = d->json + t->start;
 80a28ee:	680a      	ldr	r2, [r1, #0]
 80a28f0:	6858      	ldr	r0, [r3, #4]
 80a28f2:	6852      	ldr	r2, [r2, #4]
            n_ = t->end - t->start;
 80a28f4:	689b      	ldr	r3, [r3, #8]
            s_ = d->json + t->start;
 80a28f6:	4402      	add	r2, r0
            n_ = t->end - t->start;
 80a28f8:	1a1b      	subs	r3, r3, r0
            s_ = d->json + t->start;
 80a28fa:	60a2      	str	r2, [r4, #8]
            n_ = t->end - t->start;
 80a28fc:	60e3      	str	r3, [r4, #12]
 80a28fe:	4620      	mov	r0, r4
 80a2900:	f7ff ff69 	bl	80a27d6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 80a2904:	4620      	mov	r0, r4
 80a2906:	bd10      	pop	{r4, pc}
 80a2908:	080a31b1 	.word	0x080a31b1

080a290c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a290c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 80a290e:	2500      	movs	r5, #0
 80a2910:	460b      	mov	r3, r1
 80a2912:	4604      	mov	r4, r0
 80a2914:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 80a2916:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 80a291a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80a291e:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 80a2922:	b14b      	cbz	r3, 80a2938 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 80a2924:	781a      	ldrb	r2, [r3, #0]
 80a2926:	2a01      	cmp	r2, #1
 80a2928:	d106      	bne.n	80a2938 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 80a292a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 80a292e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 80a2930:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 80a2932:	6143      	str	r3, [r0, #20]
 80a2934:	f7ff ff4f 	bl	80a27d6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 80a2938:	4620      	mov	r0, r4
 80a293a:	bd38      	pop	{r3, r4, r5, pc}

080a293c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 80a293c:	b510      	push	{r4, lr}
    if (!n_) {
 80a293e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 80a2940:	4604      	mov	r4, r0
    if (!n_) {
 80a2942:	b163      	cbz	r3, 80a295e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 80a2944:	6880      	ldr	r0, [r0, #8]
    --n_;
 80a2946:	3b01      	subs	r3, #1
    k_ = t_; // Name
 80a2948:	60e0      	str	r0, [r4, #12]
    ++t_;
 80a294a:	3010      	adds	r0, #16
 80a294c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 80a294e:	6120      	str	r0, [r4, #16]
    --n_;
 80a2950:	6163      	str	r3, [r4, #20]
    if (n_) {
 80a2952:	b113      	cbz	r3, 80a295a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 80a2954:	f7ff feee 	bl	80a2734 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 80a2958:	60a0      	str	r0, [r4, #8]
    return true;
 80a295a:	2001      	movs	r0, #1
 80a295c:	e000      	b.n	80a2960 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 80a295e:	4618      	mov	r0, r3
}
 80a2960:	bd10      	pop	{r4, pc}

080a2962 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 80a2962:	b510      	push	{r4, lr}
    write('}');
 80a2964:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 80a2966:	4604      	mov	r4, r0
    write('}');
 80a2968:	f7ff ff47 	bl	80a27fa <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 80a296c:	2301      	movs	r3, #1
}
 80a296e:	4620      	mov	r0, r4
    state_ = NEXT;
 80a2970:	7123      	strb	r3, [r4, #4]
}
 80a2972:	bd10      	pop	{r4, pc}

080a2974 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 80a2974:	b508      	push	{r3, lr}
    switch (state_) {
 80a2976:	7903      	ldrb	r3, [r0, #4]
 80a2978:	2b01      	cmp	r3, #1
 80a297a:	d002      	beq.n	80a2982 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 80a297c:	2b02      	cmp	r3, #2
 80a297e:	d004      	beq.n	80a298a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 80a2980:	bd08      	pop	{r3, pc}
        write(',');
 80a2982:	212c      	movs	r1, #44	; 0x2c
        write(':');
 80a2984:	f7ff ff39 	bl	80a27fa <_ZN5spark10JSONWriter5writeEc>
}
 80a2988:	e7fa      	b.n	80a2980 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 80a298a:	213a      	movs	r1, #58	; 0x3a
 80a298c:	e7fa      	b.n	80a2984 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

080a298e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 80a298e:	b510      	push	{r4, lr}
 80a2990:	4604      	mov	r4, r0
    writeSeparator();
 80a2992:	f7ff ffef 	bl	80a2974 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 80a2996:	4620      	mov	r0, r4
 80a2998:	217b      	movs	r1, #123	; 0x7b
 80a299a:	f7ff ff2e 	bl	80a27fa <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 80a299e:	2300      	movs	r3, #0
}
 80a29a0:	4620      	mov	r0, r4
    state_ = BEGIN;
 80a29a2:	7123      	strb	r3, [r4, #4]
}
 80a29a4:	bd10      	pop	{r4, pc}
	...

080a29a8 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 80a29a8:	b538      	push	{r3, r4, r5, lr}
 80a29aa:	4604      	mov	r4, r0
 80a29ac:	460d      	mov	r5, r1
    writeSeparator();
 80a29ae:	f7ff ffe1 	bl	80a2974 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 80a29b2:	6823      	ldr	r3, [r4, #0]
 80a29b4:	4620      	mov	r0, r4
 80a29b6:	462a      	mov	r2, r5
 80a29b8:	68db      	ldr	r3, [r3, #12]
 80a29ba:	4903      	ldr	r1, [pc, #12]	; (80a29c8 <_ZN5spark10JSONWriter5valueEi+0x20>)
 80a29bc:	4798      	blx	r3
    state_ = NEXT;
 80a29be:	2301      	movs	r3, #1
}
 80a29c0:	4620      	mov	r0, r4
    state_ = NEXT;
 80a29c2:	7123      	strb	r3, [r4, #4]
}
 80a29c4:	bd38      	pop	{r3, r4, r5, pc}
 80a29c6:	bf00      	nop
 80a29c8:	080a30f4 	.word	0x080a30f4

080a29cc <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 80a29cc:	b538      	push	{r3, r4, r5, lr}
 80a29ce:	4604      	mov	r4, r0
 80a29d0:	460d      	mov	r5, r1
    writeSeparator();
 80a29d2:	f7ff ffcf 	bl	80a2974 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 80a29d6:	6823      	ldr	r3, [r4, #0]
 80a29d8:	4620      	mov	r0, r4
 80a29da:	462a      	mov	r2, r5
 80a29dc:	68db      	ldr	r3, [r3, #12]
 80a29de:	4903      	ldr	r1, [pc, #12]	; (80a29ec <_ZN5spark10JSONWriter5valueEj+0x20>)
 80a29e0:	4798      	blx	r3
    state_ = NEXT;
 80a29e2:	2301      	movs	r3, #1
}
 80a29e4:	4620      	mov	r0, r4
    state_ = NEXT;
 80a29e6:	7123      	strb	r3, [r4, #4]
}
 80a29e8:	bd38      	pop	{r3, r4, r5, pc}
 80a29ea:	bf00      	nop
 80a29ec:	080a3370 	.word	0x080a3370

080a29f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a29f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a29f4:	460d      	mov	r5, r1
 80a29f6:	4690      	mov	r8, r2
    write('"');
 80a29f8:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a29fa:	4604      	mov	r4, r0
 80a29fc:	462f      	mov	r7, r5
    write('"');
 80a29fe:	f7ff fefc 	bl	80a27fa <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 80a2a02:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80a2aa8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 80a2a06:	44a8      	add	r8, r5
    while (s != end) {
 80a2a08:	4547      	cmp	r7, r8
 80a2a0a:	46ba      	mov	sl, r7
 80a2a0c:	d03d      	beq.n	80a2a8a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 80a2a0e:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 80a2a12:	2e22      	cmp	r6, #34	; 0x22
 80a2a14:	d006      	beq.n	80a2a24 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 80a2a16:	2e5c      	cmp	r6, #92	; 0x5c
 80a2a18:	d004      	beq.n	80a2a24 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 80a2a1a:	4630      	mov	r0, r6
 80a2a1c:	f000 f986 	bl	80a2d2c <isprint>
 80a2a20:	2800      	cmp	r0, #0
 80a2a22:	d1f1      	bne.n	80a2a08 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 80a2a24:	6823      	ldr	r3, [r4, #0]
 80a2a26:	4629      	mov	r1, r5
 80a2a28:	4620      	mov	r0, r4
 80a2a2a:	689b      	ldr	r3, [r3, #8]
 80a2a2c:	ebaa 0205 	sub.w	r2, sl, r5
 80a2a30:	4798      	blx	r3
            write('\\');
 80a2a32:	215c      	movs	r1, #92	; 0x5c
 80a2a34:	4620      	mov	r0, r4
 80a2a36:	f7ff fee0 	bl	80a27fa <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 80a2a3a:	2e0d      	cmp	r6, #13
 80a2a3c:	d80a      	bhi.n	80a2a54 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 80a2a3e:	2e07      	cmp	r6, #7
 80a2a40:	d91c      	bls.n	80a2a7c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 80a2a42:	f1a6 0308 	sub.w	r3, r6, #8
 80a2a46:	2b05      	cmp	r3, #5
 80a2a48:	d818      	bhi.n	80a2a7c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 80a2a4a:	e8df f003 	tbb	[pc, r3]
 80a2a4e:	0f0d      	.short	0x0f0d
 80a2a50:	15131711 	.word	0x15131711
 80a2a54:	2e22      	cmp	r6, #34	; 0x22
 80a2a56:	d001      	beq.n	80a2a5c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 80a2a58:	2e5c      	cmp	r6, #92	; 0x5c
 80a2a5a:	d10f      	bne.n	80a2a7c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 80a2a5c:	4631      	mov	r1, r6
                write('b');
 80a2a5e:	4620      	mov	r0, r4
 80a2a60:	f7ff fecb 	bl	80a27fa <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 80a2a64:	463d      	mov	r5, r7
    while (s != end) {
 80a2a66:	e7cf      	b.n	80a2a08 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 80a2a68:	2162      	movs	r1, #98	; 0x62
 80a2a6a:	e7f8      	b.n	80a2a5e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 80a2a6c:	2174      	movs	r1, #116	; 0x74
 80a2a6e:	e7f6      	b.n	80a2a5e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 80a2a70:	216e      	movs	r1, #110	; 0x6e
 80a2a72:	e7f4      	b.n	80a2a5e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 80a2a74:	2166      	movs	r1, #102	; 0x66
 80a2a76:	e7f2      	b.n	80a2a5e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 80a2a78:	2172      	movs	r1, #114	; 0x72
 80a2a7a:	e7f0      	b.n	80a2a5e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 80a2a7c:	6823      	ldr	r3, [r4, #0]
 80a2a7e:	4632      	mov	r2, r6
 80a2a80:	4649      	mov	r1, r9
 80a2a82:	4620      	mov	r0, r4
 80a2a84:	68db      	ldr	r3, [r3, #12]
 80a2a86:	4798      	blx	r3
                break;
 80a2a88:	e7ec      	b.n	80a2a64 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 80a2a8a:	42bd      	cmp	r5, r7
 80a2a8c:	d005      	beq.n	80a2a9a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 80a2a8e:	6823      	ldr	r3, [r4, #0]
 80a2a90:	4629      	mov	r1, r5
 80a2a92:	4620      	mov	r0, r4
 80a2a94:	689b      	ldr	r3, [r3, #8]
 80a2a96:	1b7a      	subs	r2, r7, r5
 80a2a98:	4798      	blx	r3
    }
    write('"');
 80a2a9a:	2122      	movs	r1, #34	; 0x22
 80a2a9c:	4620      	mov	r0, r4
 80a2a9e:	f7ff feac 	bl	80a27fa <_ZN5spark10JSONWriter5writeEc>
}
 80a2aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a2aa6:	bf00      	nop
 80a2aa8:	080a3373 	.word	0x080a3373

080a2aac <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 80a2aac:	b570      	push	{r4, r5, r6, lr}
 80a2aae:	4604      	mov	r4, r0
 80a2ab0:	460d      	mov	r5, r1
 80a2ab2:	4616      	mov	r6, r2
    writeSeparator();
 80a2ab4:	f7ff ff5e 	bl	80a2974 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 80a2ab8:	4620      	mov	r0, r4
 80a2aba:	4632      	mov	r2, r6
 80a2abc:	4629      	mov	r1, r5
 80a2abe:	f7ff ff97 	bl	80a29f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 80a2ac2:	2302      	movs	r3, #2
}
 80a2ac4:	4620      	mov	r0, r4
    state_ = VALUE;
 80a2ac6:	7123      	strb	r3, [r4, #4]
}
 80a2ac8:	bd70      	pop	{r4, r5, r6, pc}

080a2aca <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 80a2aca:	b570      	push	{r4, r5, r6, lr}
 80a2acc:	4604      	mov	r4, r0
 80a2ace:	460d      	mov	r5, r1
 80a2ad0:	4616      	mov	r6, r2
    writeSeparator();
 80a2ad2:	f7ff ff4f 	bl	80a2974 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 80a2ad6:	4620      	mov	r0, r4
 80a2ad8:	4632      	mov	r2, r6
 80a2ada:	4629      	mov	r1, r5
 80a2adc:	f7ff ff88 	bl	80a29f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 80a2ae0:	2301      	movs	r3, #1
}
 80a2ae2:	4620      	mov	r0, r4
    state_ = NEXT;
 80a2ae4:	7123      	strb	r3, [r4, #4]
}
 80a2ae6:	bd70      	pop	{r4, r5, r6, pc}

080a2ae8 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a2ae8:	4b02      	ldr	r3, [pc, #8]	; (80a2af4 <__tcf_0+0xc>)
 80a2aea:	6898      	ldr	r0, [r3, #8]
 80a2aec:	b108      	cbz	r0, 80a2af2 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a2aee:	f7fd bf77 	b.w	80a09e0 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a2af2:	4770      	bx	lr
 80a2af4:	2000045c 	.word	0x2000045c

080a2af8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a2af8:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a2afa:	b570      	push	{r4, r5, r6, lr}
 80a2afc:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a2afe:	d901      	bls.n	80a2b04 <pinAvailable+0xc>
    return false;
 80a2b00:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a2b02:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2b04:	f1a0 030d 	sub.w	r3, r0, #13
 80a2b08:	2b02      	cmp	r3, #2
 80a2b0a:	d90b      	bls.n	80a2b24 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a2b0c:	2801      	cmp	r0, #1
 80a2b0e:	d824      	bhi.n	80a2b5a <pinAvailable+0x62>
 80a2b10:	f000 f8d6 	bl	80a2cc0 <_Z19__fetch_global_Wirev>
 80a2b14:	2100      	movs	r1, #0
 80a2b16:	7c00      	ldrb	r0, [r0, #16]
 80a2b18:	f7fe f80a 	bl	80a0b30 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2b1c:	f080 0001 	eor.w	r0, r0, #1
 80a2b20:	b2c0      	uxtb	r0, r0
 80a2b22:	e7ee      	b.n	80a2b02 <pinAvailable+0xa>
 80a2b24:	4e12      	ldr	r6, [pc, #72]	; (80a2b70 <pinAvailable+0x78>)
 80a2b26:	7831      	ldrb	r1, [r6, #0]
 80a2b28:	f3bf 8f5b 	dmb	ish
 80a2b2c:	f011 0501 	ands.w	r5, r1, #1
 80a2b30:	d10d      	bne.n	80a2b4e <pinAvailable+0x56>
 80a2b32:	4630      	mov	r0, r6
 80a2b34:	f7fd fac2 	bl	80a00bc <__cxa_guard_acquire>
 80a2b38:	b148      	cbz	r0, 80a2b4e <pinAvailable+0x56>
 80a2b3a:	4629      	mov	r1, r5
 80a2b3c:	480d      	ldr	r0, [pc, #52]	; (80a2b74 <pinAvailable+0x7c>)
 80a2b3e:	f7fe f95f 	bl	80a0e00 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a2b42:	4630      	mov	r0, r6
 80a2b44:	f7fd fabf 	bl	80a00c6 <__cxa_guard_release>
 80a2b48:	480b      	ldr	r0, [pc, #44]	; (80a2b78 <pinAvailable+0x80>)
 80a2b4a:	f000 f8e1 	bl	80a2d10 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2b4e:	4b09      	ldr	r3, [pc, #36]	; (80a2b74 <pinAvailable+0x7c>)
 80a2b50:	7818      	ldrb	r0, [r3, #0]
 80a2b52:	f7fe f811 	bl	80a0b78 <hal_spi_is_enabled>
 80a2b56:	2800      	cmp	r0, #0
 80a2b58:	d1d2      	bne.n	80a2b00 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2b5a:	3c12      	subs	r4, #18
 80a2b5c:	2c01      	cmp	r4, #1
 80a2b5e:	d805      	bhi.n	80a2b6c <pinAvailable+0x74>
 80a2b60:	f000 f864 	bl	80a2c2c <_Z22__fetch_global_Serial1v>
 80a2b64:	7c00      	ldrb	r0, [r0, #16]
 80a2b66:	f7fd ff83 	bl	80a0a70 <hal_usart_is_enabled>
 80a2b6a:	e7d7      	b.n	80a2b1c <pinAvailable+0x24>
  return true; // 'pin' is available
 80a2b6c:	2001      	movs	r0, #1
 80a2b6e:	e7c8      	b.n	80a2b02 <pinAvailable+0xa>
 80a2b70:	20000458 	.word	0x20000458
 80a2b74:	2000045c 	.word	0x2000045c
 80a2b78:	080a2ae9 	.word	0x080a2ae9

080a2b7c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2b7c:	2817      	cmp	r0, #23
{
 80a2b7e:	b538      	push	{r3, r4, r5, lr}
 80a2b80:	4604      	mov	r4, r0
 80a2b82:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2b84:	d80a      	bhi.n	80a2b9c <pinMode+0x20>
 80a2b86:	29ff      	cmp	r1, #255	; 0xff
 80a2b88:	d008      	beq.n	80a2b9c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a2b8a:	f7ff ffb5 	bl	80a2af8 <pinAvailable>
 80a2b8e:	b128      	cbz	r0, 80a2b9c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a2b90:	4629      	mov	r1, r5
 80a2b92:	4620      	mov	r0, r4
}
 80a2b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a2b98:	f7fd bee2 	b.w	80a0960 <HAL_Pin_Mode>
}
 80a2b9c:	bd38      	pop	{r3, r4, r5, pc}

080a2b9e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2b9e:	b538      	push	{r3, r4, r5, lr}
 80a2ba0:	4604      	mov	r4, r0
 80a2ba2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2ba4:	f7fd fee4 	bl	80a0970 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2ba8:	28ff      	cmp	r0, #255	; 0xff
 80a2baa:	d010      	beq.n	80a2bce <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a2bac:	2806      	cmp	r0, #6
 80a2bae:	d804      	bhi.n	80a2bba <digitalWrite+0x1c>
 80a2bb0:	234d      	movs	r3, #77	; 0x4d
 80a2bb2:	fa23 f000 	lsr.w	r0, r3, r0
 80a2bb6:	07c3      	lsls	r3, r0, #31
 80a2bb8:	d409      	bmi.n	80a2bce <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2bba:	4620      	mov	r0, r4
 80a2bbc:	f7ff ff9c 	bl	80a2af8 <pinAvailable>
 80a2bc0:	b128      	cbz	r0, 80a2bce <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2bc2:	4629      	mov	r1, r5
 80a2bc4:	4620      	mov	r0, r4
}
 80a2bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a2bca:	f7fd bed9 	b.w	80a0980 <HAL_GPIO_Write>
}
 80a2bce:	bd38      	pop	{r3, r4, r5, pc}

080a2bd0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2bd0:	b510      	push	{r4, lr}
 80a2bd2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2bd4:	f7fd fecc 	bl	80a0970 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a2bd8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a2bda:	b2db      	uxtb	r3, r3
 80a2bdc:	2b01      	cmp	r3, #1
 80a2bde:	d908      	bls.n	80a2bf2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2be0:	4620      	mov	r0, r4
 80a2be2:	f7ff ff89 	bl	80a2af8 <pinAvailable>
 80a2be6:	b120      	cbz	r0, 80a2bf2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2be8:	4620      	mov	r0, r4
}
 80a2bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a2bee:	f7fd becf 	b.w	80a0990 <HAL_GPIO_Read>
}
 80a2bf2:	2000      	movs	r0, #0
 80a2bf4:	bd10      	pop	{r4, pc}

080a2bf6 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a2bf6:	4770      	bx	lr

080a2bf8 <_Z20acquireSerial1Bufferv>:
{
 80a2bf8:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 80a2bfa:	2514      	movs	r5, #20
{
 80a2bfc:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 80a2bfe:	462a      	mov	r2, r5
 80a2c00:	2100      	movs	r1, #0
 80a2c02:	f000 f8c3 	bl	80a2d8c <memset>
 80a2c06:	8025      	strh	r5, [r4, #0]
 80a2c08:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a2c0a:	4e07      	ldr	r6, [pc, #28]	; (80a2c28 <_Z20acquireSerial1Bufferv+0x30>)
 80a2c0c:	4628      	mov	r0, r5
 80a2c0e:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 80a2c10:	8125      	strh	r5, [r4, #8]
 80a2c12:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a2c14:	f000 f87a 	bl	80a2d0c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a2c18:	4631      	mov	r1, r6
    };
 80a2c1a:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a2c1c:	4628      	mov	r0, r5
 80a2c1e:	f000 f875 	bl	80a2d0c <_ZnajRKSt9nothrow_t>
    };
 80a2c22:	60e0      	str	r0, [r4, #12]
}
 80a2c24:	4620      	mov	r0, r4
 80a2c26:	bd70      	pop	{r4, r5, r6, pc}
 80a2c28:	080a3379 	.word	0x080a3379

080a2c2c <_Z22__fetch_global_Serial1v>:
{
 80a2c2c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a2c2e:	4d0e      	ldr	r5, [pc, #56]	; (80a2c68 <_Z22__fetch_global_Serial1v+0x3c>)
{
 80a2c30:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a2c32:	7829      	ldrb	r1, [r5, #0]
 80a2c34:	f3bf 8f5b 	dmb	ish
 80a2c38:	f011 0401 	ands.w	r4, r1, #1
 80a2c3c:	d111      	bne.n	80a2c62 <_Z22__fetch_global_Serial1v+0x36>
 80a2c3e:	4628      	mov	r0, r5
 80a2c40:	f7fd fa3c 	bl	80a00bc <__cxa_guard_acquire>
 80a2c44:	b168      	cbz	r0, 80a2c62 <_Z22__fetch_global_Serial1v+0x36>
 80a2c46:	a801      	add	r0, sp, #4
 80a2c48:	f7ff ffd6 	bl	80a2bf8 <_Z20acquireSerial1Bufferv>
 80a2c4c:	4621      	mov	r1, r4
 80a2c4e:	aa01      	add	r2, sp, #4
 80a2c50:	4806      	ldr	r0, [pc, #24]	; (80a2c6c <_Z22__fetch_global_Serial1v+0x40>)
 80a2c52:	f7ff fbf1 	bl	80a2438 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80a2c56:	4628      	mov	r0, r5
 80a2c58:	f7fd fa35 	bl	80a00c6 <__cxa_guard_release>
 80a2c5c:	4804      	ldr	r0, [pc, #16]	; (80a2c70 <_Z22__fetch_global_Serial1v+0x44>)
 80a2c5e:	f000 f857 	bl	80a2d10 <atexit>
    return serial1;
}
 80a2c62:	4802      	ldr	r0, [pc, #8]	; (80a2c6c <_Z22__fetch_global_Serial1v+0x40>)
 80a2c64:	b007      	add	sp, #28
 80a2c66:	bd30      	pop	{r4, r5, pc}
 80a2c68:	20000468 	.word	0x20000468
 80a2c6c:	2000046c 	.word	0x2000046c
 80a2c70:	080a2bf7 	.word	0x080a2bf7

080a2c74 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2c74:	2300      	movs	r3, #0
 80a2c76:	b507      	push	{r0, r1, r2, lr}
 80a2c78:	461a      	mov	r2, r3
 80a2c7a:	4619      	mov	r1, r3
 80a2c7c:	9300      	str	r3, [sp, #0]
 80a2c7e:	4803      	ldr	r0, [pc, #12]	; (80a2c8c <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a2c80:	f7ff fac4 	bl	80a220c <_ZN9IPAddressC1Ehhhh>
 80a2c84:	b003      	add	sp, #12
 80a2c86:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2c8a:	bf00      	nop
 80a2c8c:	20000484 	.word	0x20000484

080a2c90 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2c90:	4770      	bx	lr
	...

080a2c94 <_Z17acquireWireBufferv>:
{
 80a2c94:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a2c96:	2314      	movs	r3, #20
 80a2c98:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2c9a:	4e08      	ldr	r6, [pc, #32]	; (80a2cbc <_Z17acquireWireBufferv+0x28>)
{
 80a2c9c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a2c9e:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2ca0:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a2ca2:	6085      	str	r5, [r0, #8]
 80a2ca4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2ca6:	4628      	mov	r0, r5
 80a2ca8:	f000 f830 	bl	80a2d0c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2cac:	4631      	mov	r1, r6
	};
 80a2cae:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2cb0:	4628      	mov	r0, r5
 80a2cb2:	f000 f82b 	bl	80a2d0c <_ZnajRKSt9nothrow_t>
	};
 80a2cb6:	60e0      	str	r0, [r4, #12]
}
 80a2cb8:	4620      	mov	r0, r4
 80a2cba:	bd70      	pop	{r4, r5, r6, pc}
 80a2cbc:	080a3379 	.word	0x080a3379

080a2cc0 <_Z19__fetch_global_Wirev>:
{
 80a2cc0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2cc2:	4d0e      	ldr	r5, [pc, #56]	; (80a2cfc <_Z19__fetch_global_Wirev+0x3c>)
{
 80a2cc4:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2cc6:	7829      	ldrb	r1, [r5, #0]
 80a2cc8:	f3bf 8f5b 	dmb	ish
 80a2ccc:	f011 0401 	ands.w	r4, r1, #1
 80a2cd0:	d111      	bne.n	80a2cf6 <_Z19__fetch_global_Wirev+0x36>
 80a2cd2:	4628      	mov	r0, r5
 80a2cd4:	f7fd f9f2 	bl	80a00bc <__cxa_guard_acquire>
 80a2cd8:	b168      	cbz	r0, 80a2cf6 <_Z19__fetch_global_Wirev+0x36>
 80a2cda:	a801      	add	r0, sp, #4
 80a2cdc:	f7ff ffda 	bl	80a2c94 <_Z17acquireWireBufferv>
 80a2ce0:	4621      	mov	r1, r4
 80a2ce2:	aa01      	add	r2, sp, #4
 80a2ce4:	4806      	ldr	r0, [pc, #24]	; (80a2d00 <_Z19__fetch_global_Wirev+0x40>)
 80a2ce6:	f7ff fbf1 	bl	80a24cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a2cea:	4628      	mov	r0, r5
 80a2cec:	f7fd f9eb 	bl	80a00c6 <__cxa_guard_release>
 80a2cf0:	4804      	ldr	r0, [pc, #16]	; (80a2d04 <_Z19__fetch_global_Wirev+0x44>)
 80a2cf2:	f000 f80d 	bl	80a2d10 <atexit>
	return wire;
}
 80a2cf6:	4802      	ldr	r0, [pc, #8]	; (80a2d00 <_Z19__fetch_global_Wirev+0x40>)
 80a2cf8:	b007      	add	sp, #28
 80a2cfa:	bd30      	pop	{r4, r5, pc}
 80a2cfc:	2000049c 	.word	0x2000049c
 80a2d00:	200004a0 	.word	0x200004a0
 80a2d04:	080a2c91 	.word	0x080a2c91

080a2d08 <_ZnwjRKSt9nothrow_t>:
 80a2d08:	f7fd b9c5 	b.w	80a0096 <_Znwj>

080a2d0c <_ZnajRKSt9nothrow_t>:
 80a2d0c:	f7fd b9c5 	b.w	80a009a <_Znaj>

080a2d10 <atexit>:
 80a2d10:	2300      	movs	r3, #0
 80a2d12:	4601      	mov	r1, r0
 80a2d14:	461a      	mov	r2, r3
 80a2d16:	4618      	mov	r0, r3
 80a2d18:	f000 b95c 	b.w	80a2fd4 <__register_exitproc>

080a2d1c <calloc>:
 80a2d1c:	4b02      	ldr	r3, [pc, #8]	; (80a2d28 <calloc+0xc>)
 80a2d1e:	460a      	mov	r2, r1
 80a2d20:	4601      	mov	r1, r0
 80a2d22:	6818      	ldr	r0, [r3, #0]
 80a2d24:	f000 b83a 	b.w	80a2d9c <_calloc_r>
 80a2d28:	2000000c 	.word	0x2000000c

080a2d2c <isprint>:
 80a2d2c:	4b02      	ldr	r3, [pc, #8]	; (80a2d38 <isprint+0xc>)
 80a2d2e:	4403      	add	r3, r0
 80a2d30:	7858      	ldrb	r0, [r3, #1]
 80a2d32:	f000 0097 	and.w	r0, r0, #151	; 0x97
 80a2d36:	4770      	bx	lr
 80a2d38:	080a340e 	.word	0x080a340e

080a2d3c <memcpy>:
 80a2d3c:	440a      	add	r2, r1
 80a2d3e:	4291      	cmp	r1, r2
 80a2d40:	f100 33ff 	add.w	r3, r0, #4294967295
 80a2d44:	d100      	bne.n	80a2d48 <memcpy+0xc>
 80a2d46:	4770      	bx	lr
 80a2d48:	b510      	push	{r4, lr}
 80a2d4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2d4e:	4291      	cmp	r1, r2
 80a2d50:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2d54:	d1f9      	bne.n	80a2d4a <memcpy+0xe>
 80a2d56:	bd10      	pop	{r4, pc}

080a2d58 <memmove>:
 80a2d58:	4288      	cmp	r0, r1
 80a2d5a:	b510      	push	{r4, lr}
 80a2d5c:	eb01 0402 	add.w	r4, r1, r2
 80a2d60:	d902      	bls.n	80a2d68 <memmove+0x10>
 80a2d62:	4284      	cmp	r4, r0
 80a2d64:	4623      	mov	r3, r4
 80a2d66:	d807      	bhi.n	80a2d78 <memmove+0x20>
 80a2d68:	1e43      	subs	r3, r0, #1
 80a2d6a:	42a1      	cmp	r1, r4
 80a2d6c:	d008      	beq.n	80a2d80 <memmove+0x28>
 80a2d6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a2d72:	f803 2f01 	strb.w	r2, [r3, #1]!
 80a2d76:	e7f8      	b.n	80a2d6a <memmove+0x12>
 80a2d78:	4601      	mov	r1, r0
 80a2d7a:	4402      	add	r2, r0
 80a2d7c:	428a      	cmp	r2, r1
 80a2d7e:	d100      	bne.n	80a2d82 <memmove+0x2a>
 80a2d80:	bd10      	pop	{r4, pc}
 80a2d82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80a2d86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80a2d8a:	e7f7      	b.n	80a2d7c <memmove+0x24>

080a2d8c <memset>:
 80a2d8c:	4603      	mov	r3, r0
 80a2d8e:	4402      	add	r2, r0
 80a2d90:	4293      	cmp	r3, r2
 80a2d92:	d100      	bne.n	80a2d96 <memset+0xa>
 80a2d94:	4770      	bx	lr
 80a2d96:	f803 1b01 	strb.w	r1, [r3], #1
 80a2d9a:	e7f9      	b.n	80a2d90 <memset+0x4>

080a2d9c <_calloc_r>:
 80a2d9c:	b538      	push	{r3, r4, r5, lr}
 80a2d9e:	fb02 f501 	mul.w	r5, r2, r1
 80a2da2:	4629      	mov	r1, r5
 80a2da4:	f7fe f80c 	bl	80a0dc0 <_malloc_r>
 80a2da8:	4604      	mov	r4, r0
 80a2daa:	b118      	cbz	r0, 80a2db4 <_calloc_r+0x18>
 80a2dac:	462a      	mov	r2, r5
 80a2dae:	2100      	movs	r1, #0
 80a2db0:	f7ff ffec 	bl	80a2d8c <memset>
 80a2db4:	4620      	mov	r0, r4
 80a2db6:	bd38      	pop	{r3, r4, r5, pc}

080a2db8 <srand>:
 80a2db8:	b538      	push	{r3, r4, r5, lr}
 80a2dba:	4b10      	ldr	r3, [pc, #64]	; (80a2dfc <srand+0x44>)
 80a2dbc:	4604      	mov	r4, r0
 80a2dbe:	681d      	ldr	r5, [r3, #0]
 80a2dc0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a2dc2:	b9b3      	cbnz	r3, 80a2df2 <srand+0x3a>
 80a2dc4:	2018      	movs	r0, #24
 80a2dc6:	f7fd ffdb 	bl	80a0d80 <malloc>
 80a2dca:	4602      	mov	r2, r0
 80a2dcc:	63a8      	str	r0, [r5, #56]	; 0x38
 80a2dce:	b920      	cbnz	r0, 80a2dda <srand+0x22>
 80a2dd0:	2142      	movs	r1, #66	; 0x42
 80a2dd2:	4b0b      	ldr	r3, [pc, #44]	; (80a2e00 <srand+0x48>)
 80a2dd4:	480b      	ldr	r0, [pc, #44]	; (80a2e04 <srand+0x4c>)
 80a2dd6:	f7fe f803 	bl	80a0de0 <__assert_func>
 80a2dda:	490b      	ldr	r1, [pc, #44]	; (80a2e08 <srand+0x50>)
 80a2ddc:	4b0b      	ldr	r3, [pc, #44]	; (80a2e0c <srand+0x54>)
 80a2dde:	e9c0 1300 	strd	r1, r3, [r0]
 80a2de2:	4b0b      	ldr	r3, [pc, #44]	; (80a2e10 <srand+0x58>)
 80a2de4:	2100      	movs	r1, #0
 80a2de6:	6083      	str	r3, [r0, #8]
 80a2de8:	230b      	movs	r3, #11
 80a2dea:	8183      	strh	r3, [r0, #12]
 80a2dec:	2001      	movs	r0, #1
 80a2dee:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a2df2:	2200      	movs	r2, #0
 80a2df4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a2df6:	611c      	str	r4, [r3, #16]
 80a2df8:	615a      	str	r2, [r3, #20]
 80a2dfa:	bd38      	pop	{r3, r4, r5, pc}
 80a2dfc:	2000000c 	.word	0x2000000c
 80a2e00:	080a337a 	.word	0x080a337a
 80a2e04:	080a3391 	.word	0x080a3391
 80a2e08:	abcd330e 	.word	0xabcd330e
 80a2e0c:	e66d1234 	.word	0xe66d1234
 80a2e10:	0005deec 	.word	0x0005deec

080a2e14 <strchr>:
 80a2e14:	4603      	mov	r3, r0
 80a2e16:	b2c9      	uxtb	r1, r1
 80a2e18:	4618      	mov	r0, r3
 80a2e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2e1e:	b112      	cbz	r2, 80a2e26 <strchr+0x12>
 80a2e20:	428a      	cmp	r2, r1
 80a2e22:	d1f9      	bne.n	80a2e18 <strchr+0x4>
 80a2e24:	4770      	bx	lr
 80a2e26:	2900      	cmp	r1, #0
 80a2e28:	bf18      	it	ne
 80a2e2a:	2000      	movne	r0, #0
 80a2e2c:	4770      	bx	lr

080a2e2e <strchrnul>:
 80a2e2e:	b510      	push	{r4, lr}
 80a2e30:	4604      	mov	r4, r0
 80a2e32:	f7ff ffef 	bl	80a2e14 <strchr>
 80a2e36:	b918      	cbnz	r0, 80a2e40 <strchrnul+0x12>
 80a2e38:	4620      	mov	r0, r4
 80a2e3a:	f000 f814 	bl	80a2e66 <strlen>
 80a2e3e:	4420      	add	r0, r4
 80a2e40:	bd10      	pop	{r4, pc}

080a2e42 <strcmp>:
 80a2e42:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a2e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a2e4a:	2a01      	cmp	r2, #1
 80a2e4c:	bf28      	it	cs
 80a2e4e:	429a      	cmpcs	r2, r3
 80a2e50:	d0f7      	beq.n	80a2e42 <strcmp>
 80a2e52:	1ad0      	subs	r0, r2, r3
 80a2e54:	4770      	bx	lr

080a2e56 <strcpy>:
 80a2e56:	4603      	mov	r3, r0
 80a2e58:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a2e5c:	f803 2b01 	strb.w	r2, [r3], #1
 80a2e60:	2a00      	cmp	r2, #0
 80a2e62:	d1f9      	bne.n	80a2e58 <strcpy+0x2>
 80a2e64:	4770      	bx	lr

080a2e66 <strlen>:
 80a2e66:	4603      	mov	r3, r0
 80a2e68:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2e6c:	2a00      	cmp	r2, #0
 80a2e6e:	d1fb      	bne.n	80a2e68 <strlen+0x2>
 80a2e70:	1a18      	subs	r0, r3, r0
 80a2e72:	3801      	subs	r0, #1
 80a2e74:	4770      	bx	lr

080a2e76 <strncmp>:
 80a2e76:	4603      	mov	r3, r0
 80a2e78:	b510      	push	{r4, lr}
 80a2e7a:	b172      	cbz	r2, 80a2e9a <strncmp+0x24>
 80a2e7c:	3901      	subs	r1, #1
 80a2e7e:	1884      	adds	r4, r0, r2
 80a2e80:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a2e84:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a2e88:	4290      	cmp	r0, r2
 80a2e8a:	d101      	bne.n	80a2e90 <strncmp+0x1a>
 80a2e8c:	42a3      	cmp	r3, r4
 80a2e8e:	d101      	bne.n	80a2e94 <strncmp+0x1e>
 80a2e90:	1a80      	subs	r0, r0, r2
 80a2e92:	bd10      	pop	{r4, pc}
 80a2e94:	2800      	cmp	r0, #0
 80a2e96:	d1f3      	bne.n	80a2e80 <strncmp+0xa>
 80a2e98:	e7fa      	b.n	80a2e90 <strncmp+0x1a>
 80a2e9a:	4610      	mov	r0, r2
 80a2e9c:	e7f9      	b.n	80a2e92 <strncmp+0x1c>

080a2e9e <strrchr>:
 80a2e9e:	b538      	push	{r3, r4, r5, lr}
 80a2ea0:	4603      	mov	r3, r0
 80a2ea2:	460c      	mov	r4, r1
 80a2ea4:	b969      	cbnz	r1, 80a2ec2 <strrchr+0x24>
 80a2ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a2eaa:	f7ff bfb3 	b.w	80a2e14 <strchr>
 80a2eae:	4605      	mov	r5, r0
 80a2eb0:	1c43      	adds	r3, r0, #1
 80a2eb2:	4621      	mov	r1, r4
 80a2eb4:	4618      	mov	r0, r3
 80a2eb6:	f7ff ffad 	bl	80a2e14 <strchr>
 80a2eba:	2800      	cmp	r0, #0
 80a2ebc:	d1f7      	bne.n	80a2eae <strrchr+0x10>
 80a2ebe:	4628      	mov	r0, r5
 80a2ec0:	bd38      	pop	{r3, r4, r5, pc}
 80a2ec2:	2500      	movs	r5, #0
 80a2ec4:	e7f5      	b.n	80a2eb2 <strrchr+0x14>
	...

080a2ec8 <_strtol_l.constprop.0>:
 80a2ec8:	2b01      	cmp	r3, #1
 80a2eca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a2ece:	4680      	mov	r8, r0
 80a2ed0:	d001      	beq.n	80a2ed6 <_strtol_l.constprop.0+0xe>
 80a2ed2:	2b24      	cmp	r3, #36	; 0x24
 80a2ed4:	d906      	bls.n	80a2ee4 <_strtol_l.constprop.0+0x1c>
 80a2ed6:	f7fd ff7b 	bl	80a0dd0 <__errno>
 80a2eda:	2316      	movs	r3, #22
 80a2edc:	6003      	str	r3, [r0, #0]
 80a2ede:	2000      	movs	r0, #0
 80a2ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a2ee4:	460d      	mov	r5, r1
 80a2ee6:	4f35      	ldr	r7, [pc, #212]	; (80a2fbc <_strtol_l.constprop.0+0xf4>)
 80a2ee8:	4628      	mov	r0, r5
 80a2eea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a2eee:	5de6      	ldrb	r6, [r4, r7]
 80a2ef0:	f016 0608 	ands.w	r6, r6, #8
 80a2ef4:	d1f8      	bne.n	80a2ee8 <_strtol_l.constprop.0+0x20>
 80a2ef6:	2c2d      	cmp	r4, #45	; 0x2d
 80a2ef8:	d12f      	bne.n	80a2f5a <_strtol_l.constprop.0+0x92>
 80a2efa:	2601      	movs	r6, #1
 80a2efc:	782c      	ldrb	r4, [r5, #0]
 80a2efe:	1c85      	adds	r5, r0, #2
 80a2f00:	2b00      	cmp	r3, #0
 80a2f02:	d057      	beq.n	80a2fb4 <_strtol_l.constprop.0+0xec>
 80a2f04:	2b10      	cmp	r3, #16
 80a2f06:	d109      	bne.n	80a2f1c <_strtol_l.constprop.0+0x54>
 80a2f08:	2c30      	cmp	r4, #48	; 0x30
 80a2f0a:	d107      	bne.n	80a2f1c <_strtol_l.constprop.0+0x54>
 80a2f0c:	7828      	ldrb	r0, [r5, #0]
 80a2f0e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a2f12:	2858      	cmp	r0, #88	; 0x58
 80a2f14:	d149      	bne.n	80a2faa <_strtol_l.constprop.0+0xe2>
 80a2f16:	2310      	movs	r3, #16
 80a2f18:	786c      	ldrb	r4, [r5, #1]
 80a2f1a:	3502      	adds	r5, #2
 80a2f1c:	2700      	movs	r7, #0
 80a2f1e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80a2f22:	f10e 3eff 	add.w	lr, lr, #4294967295
 80a2f26:	fbbe f9f3 	udiv	r9, lr, r3
 80a2f2a:	4638      	mov	r0, r7
 80a2f2c:	fb03 ea19 	mls	sl, r3, r9, lr
 80a2f30:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80a2f34:	f1bc 0f09 	cmp.w	ip, #9
 80a2f38:	d814      	bhi.n	80a2f64 <_strtol_l.constprop.0+0x9c>
 80a2f3a:	4664      	mov	r4, ip
 80a2f3c:	42a3      	cmp	r3, r4
 80a2f3e:	dd22      	ble.n	80a2f86 <_strtol_l.constprop.0+0xbe>
 80a2f40:	2f00      	cmp	r7, #0
 80a2f42:	db1d      	blt.n	80a2f80 <_strtol_l.constprop.0+0xb8>
 80a2f44:	4581      	cmp	r9, r0
 80a2f46:	d31b      	bcc.n	80a2f80 <_strtol_l.constprop.0+0xb8>
 80a2f48:	d101      	bne.n	80a2f4e <_strtol_l.constprop.0+0x86>
 80a2f4a:	45a2      	cmp	sl, r4
 80a2f4c:	db18      	blt.n	80a2f80 <_strtol_l.constprop.0+0xb8>
 80a2f4e:	2701      	movs	r7, #1
 80a2f50:	fb00 4003 	mla	r0, r0, r3, r4
 80a2f54:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a2f58:	e7ea      	b.n	80a2f30 <_strtol_l.constprop.0+0x68>
 80a2f5a:	2c2b      	cmp	r4, #43	; 0x2b
 80a2f5c:	bf04      	itt	eq
 80a2f5e:	782c      	ldrbeq	r4, [r5, #0]
 80a2f60:	1c85      	addeq	r5, r0, #2
 80a2f62:	e7cd      	b.n	80a2f00 <_strtol_l.constprop.0+0x38>
 80a2f64:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80a2f68:	f1bc 0f19 	cmp.w	ip, #25
 80a2f6c:	d801      	bhi.n	80a2f72 <_strtol_l.constprop.0+0xaa>
 80a2f6e:	3c37      	subs	r4, #55	; 0x37
 80a2f70:	e7e4      	b.n	80a2f3c <_strtol_l.constprop.0+0x74>
 80a2f72:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80a2f76:	f1bc 0f19 	cmp.w	ip, #25
 80a2f7a:	d804      	bhi.n	80a2f86 <_strtol_l.constprop.0+0xbe>
 80a2f7c:	3c57      	subs	r4, #87	; 0x57
 80a2f7e:	e7dd      	b.n	80a2f3c <_strtol_l.constprop.0+0x74>
 80a2f80:	f04f 37ff 	mov.w	r7, #4294967295
 80a2f84:	e7e6      	b.n	80a2f54 <_strtol_l.constprop.0+0x8c>
 80a2f86:	2f00      	cmp	r7, #0
 80a2f88:	da07      	bge.n	80a2f9a <_strtol_l.constprop.0+0xd2>
 80a2f8a:	2322      	movs	r3, #34	; 0x22
 80a2f8c:	4670      	mov	r0, lr
 80a2f8e:	f8c8 3000 	str.w	r3, [r8]
 80a2f92:	2a00      	cmp	r2, #0
 80a2f94:	d0a4      	beq.n	80a2ee0 <_strtol_l.constprop.0+0x18>
 80a2f96:	1e69      	subs	r1, r5, #1
 80a2f98:	e005      	b.n	80a2fa6 <_strtol_l.constprop.0+0xde>
 80a2f9a:	b106      	cbz	r6, 80a2f9e <_strtol_l.constprop.0+0xd6>
 80a2f9c:	4240      	negs	r0, r0
 80a2f9e:	2a00      	cmp	r2, #0
 80a2fa0:	d09e      	beq.n	80a2ee0 <_strtol_l.constprop.0+0x18>
 80a2fa2:	2f00      	cmp	r7, #0
 80a2fa4:	d1f7      	bne.n	80a2f96 <_strtol_l.constprop.0+0xce>
 80a2fa6:	6011      	str	r1, [r2, #0]
 80a2fa8:	e79a      	b.n	80a2ee0 <_strtol_l.constprop.0+0x18>
 80a2faa:	2430      	movs	r4, #48	; 0x30
 80a2fac:	2b00      	cmp	r3, #0
 80a2fae:	d1b5      	bne.n	80a2f1c <_strtol_l.constprop.0+0x54>
 80a2fb0:	2308      	movs	r3, #8
 80a2fb2:	e7b3      	b.n	80a2f1c <_strtol_l.constprop.0+0x54>
 80a2fb4:	2c30      	cmp	r4, #48	; 0x30
 80a2fb6:	d0a9      	beq.n	80a2f0c <_strtol_l.constprop.0+0x44>
 80a2fb8:	230a      	movs	r3, #10
 80a2fba:	e7af      	b.n	80a2f1c <_strtol_l.constprop.0+0x54>
 80a2fbc:	080a340f 	.word	0x080a340f

080a2fc0 <strtol>:
 80a2fc0:	4613      	mov	r3, r2
 80a2fc2:	460a      	mov	r2, r1
 80a2fc4:	4601      	mov	r1, r0
 80a2fc6:	4802      	ldr	r0, [pc, #8]	; (80a2fd0 <strtol+0x10>)
 80a2fc8:	6800      	ldr	r0, [r0, #0]
 80a2fca:	f7ff bf7d 	b.w	80a2ec8 <_strtol_l.constprop.0>
 80a2fce:	bf00      	nop
 80a2fd0:	2000000c 	.word	0x2000000c

080a2fd4 <__register_exitproc>:
 80a2fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a2fd8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a3088 <__register_exitproc+0xb4>
 80a2fdc:	4606      	mov	r6, r0
 80a2fde:	f8d8 0000 	ldr.w	r0, [r8]
 80a2fe2:	461f      	mov	r7, r3
 80a2fe4:	460d      	mov	r5, r1
 80a2fe6:	4691      	mov	r9, r2
 80a2fe8:	f000 f858 	bl	80a309c <__retarget_lock_acquire_recursive>
 80a2fec:	4b27      	ldr	r3, [pc, #156]	; (80a308c <__register_exitproc+0xb8>)
 80a2fee:	681c      	ldr	r4, [r3, #0]
 80a2ff0:	b934      	cbnz	r4, 80a3000 <__register_exitproc+0x2c>
 80a2ff2:	4c27      	ldr	r4, [pc, #156]	; (80a3090 <__register_exitproc+0xbc>)
 80a2ff4:	601c      	str	r4, [r3, #0]
 80a2ff6:	4b27      	ldr	r3, [pc, #156]	; (80a3094 <__register_exitproc+0xc0>)
 80a2ff8:	b113      	cbz	r3, 80a3000 <__register_exitproc+0x2c>
 80a2ffa:	681b      	ldr	r3, [r3, #0]
 80a2ffc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a3000:	6863      	ldr	r3, [r4, #4]
 80a3002:	2b1f      	cmp	r3, #31
 80a3004:	dd07      	ble.n	80a3016 <__register_exitproc+0x42>
 80a3006:	f8d8 0000 	ldr.w	r0, [r8]
 80a300a:	f000 f849 	bl	80a30a0 <__retarget_lock_release_recursive>
 80a300e:	f04f 30ff 	mov.w	r0, #4294967295
 80a3012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3016:	b35e      	cbz	r6, 80a3070 <__register_exitproc+0x9c>
 80a3018:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a301c:	b988      	cbnz	r0, 80a3042 <__register_exitproc+0x6e>
 80a301e:	4b1e      	ldr	r3, [pc, #120]	; (80a3098 <__register_exitproc+0xc4>)
 80a3020:	b923      	cbnz	r3, 80a302c <__register_exitproc+0x58>
 80a3022:	f8d8 0000 	ldr.w	r0, [r8]
 80a3026:	f000 f83a 	bl	80a309e <__retarget_lock_release>
 80a302a:	e7f0      	b.n	80a300e <__register_exitproc+0x3a>
 80a302c:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a3030:	f7fd fea6 	bl	80a0d80 <malloc>
 80a3034:	2800      	cmp	r0, #0
 80a3036:	d0f4      	beq.n	80a3022 <__register_exitproc+0x4e>
 80a3038:	2300      	movs	r3, #0
 80a303a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a303e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a3042:	2201      	movs	r2, #1
 80a3044:	6863      	ldr	r3, [r4, #4]
 80a3046:	2e02      	cmp	r6, #2
 80a3048:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a304c:	fa02 f203 	lsl.w	r2, r2, r3
 80a3050:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a3054:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a3058:	ea43 0302 	orr.w	r3, r3, r2
 80a305c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a3060:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a3064:	bf02      	ittt	eq
 80a3066:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a306a:	4313      	orreq	r3, r2
 80a306c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80a3070:	6863      	ldr	r3, [r4, #4]
 80a3072:	f8d8 0000 	ldr.w	r0, [r8]
 80a3076:	1c5a      	adds	r2, r3, #1
 80a3078:	3302      	adds	r3, #2
 80a307a:	6062      	str	r2, [r4, #4]
 80a307c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a3080:	f000 f80e 	bl	80a30a0 <__retarget_lock_release_recursive>
 80a3084:	2000      	movs	r0, #0
 80a3086:	e7c4      	b.n	80a3012 <__register_exitproc+0x3e>
 80a3088:	20000070 	.word	0x20000070
 80a308c:	20000540 	.word	0x20000540
 80a3090:	200004b4 	.word	0x200004b4
 80a3094:	00000000 	.word	0x00000000
 80a3098:	080a0d81 	.word	0x080a0d81

080a309c <__retarget_lock_acquire_recursive>:
 80a309c:	4770      	bx	lr

080a309e <__retarget_lock_release>:
 80a309e:	4770      	bx	lr

080a30a0 <__retarget_lock_release_recursive>:
 80a30a0:	4770      	bx	lr

080a30a2 <link_code_end>:
	...

080a30a4 <dynalib_user>:
 80a30a4:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a30b4:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
 80a30c4:	7620 7269 7574 6c61 4e00 4c55 004c 7665      virtual.NULL.ev
 80a30d4:	6e65 3d74 7325 6420 7461 3d61 7325 4100     ent=%s data=%s.A
 80a30e4:	656c 7472 5300 6174 7472 6465 5800 203a     lert.Started.X: 
 80a30f4:	6425 5900 203a 6425 5a00 203a 6425 0000     %d.Y: %d.Z: %d..

080a3104 <_ZTVN5spark10LogHandlerE>:
	...
 80a3114:	00a5 080a 00cd 080a                         ........

080a311c <_ZTVN5spark16SerialLogHandlerE>:
	...
 80a3124:	00d9 080a 010d 080a 1cb9 080a 00cf 080a     ................

080a3134 <_ZL14digitToSegment>:
 80a3134:	063f 4f5b 6d66 077d 6f7f 7c77 5e39 7179     ?.[Ofm}..ow|9^yq

080a3144 <_ZZN13TM1637Display13showNumberDecEibhhE8divisors>:
 80a3144:	0001 0000 000a 0000 0064 0000 03e8 0000     ........d.......
 80a3154:	6162 6475 5300 7265 6169 006c 5355 5342     baud.Serial.USBS
 80a3164:	7265 6169 316c 4a00 4f53 534e 7274 6165     erial1.JSONStrea
 80a3174:	4c6d 676f 6148 646e 656c 0072 7061 0070     mLogHandler.app.
 80a3184:	3025 3031 2075 5d00 0020 202c 2800 3a29     %010u .] ., .():
 80a3194:	0020 5b20 6300 646f 2065 203d 2500 0069      . [.code = .%i.
 80a31a4:	6564 6174 6c69 2073 203d 0d00 000a 006d     details = ....m.
 80a31b4:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
 80a31c4:	6961 006c                                   ail.

080a31c8 <_ZTVN5spark16JSONStreamWriterE>:
	...
 80a31d0:	107f 080a 10a5 080a 1063 080a 2763 080a     ........c...c'..

080a31e0 <_ZTVN5spark16StreamLogHandlerE>:
	...
 80a31e8:	1565 080a 157d 080a 1cb9 080a 00cf 080a     e...}...........

080a31f8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 80a3200:	1591 080a 15a5 080a 1e61 080a 106b 080a     ........a...k...

080a3210 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 80a3218:	107d 080a 10b3 080a 1c1d 080a 106d 080a     }...........m...

080a3228 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 80a3230:	107b 080a 10c1 080a 1485 080a 10e3 080a     {...............
 80a3240:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
 80a3250:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

080a325c <_ZTV9IPAddress>:
	...
 80a3264:	215f 080a 215d 080a 2191 080a               _!..]!...!..

080a3270 <_ZTV9USBSerial>:
	...
 80a3278:	222b 080a 2291 080a 2269 080a 0f5d 080a     +"..."..i"..]...
 80a3288:	225b 080a 222d 080a 223d 080a 228b 080a     ["..-"..="..."..
 80a3298:	224d 080a 2225 080a                         M"..%"..

080a32a0 <_ZTV11USARTSerial>:
	...
 80a32a8:	23c1 080a 2429 080a 2405 080a 0f5d 080a     .#..)$...$..]...
 80a32b8:	23d5 080a 23f1 080a 23e3 080a 23ff 080a     .#...#...#...#..
 80a32c8:	23c3 080a 23c7 080a                         .#...#..

080a32d0 <_ZTV7TwoWire>:
	...
 80a32d8:	2475 080a 24bf 080a 2497 080a 2477 080a     u$...$...$..w$..
 80a32e8:	249f 080a 24a7 080a 24af 080a 24b7 080a     .$...$...$...$..

080a32f8 <_ZTVN5spark9WiFiClassE>:
	...
 80a3300:	263b 080a 2631 080a 2627 080a 2599 080a     ;&..1&..'&...%..
 80a3310:	261b 080a 260f 080a 2699 080a 26a1 080a     .&...&...&...&..
 80a3320:	2603 080a 25fb 080a 25f1 080a 25e7 080a     .&...%...%...%..
 80a3330:	25a3 080a                                   .%..

080a3334 <_ZTVN5spark12NetworkClassE>:
	...
 80a333c:	2659 080a 2663 080a 266d 080a 2677 080a     Y&..c&..m&..w&..
 80a334c:	2681 080a 268d 080a 2699 080a 26a1 080a     .&...&...&...&..
 80a335c:	26a9 080a 26b5 080a 26bd 080a 26c7 080a     .&...&...&...&..
 80a336c:	26d1 080a 7525 7500 3025 7834                .&..%u.u%04x.

080a3379 <_ZSt7nothrow>:
 80a3379:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 80a3389:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
 80a3399:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
 80a33a9:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
 80a33b9:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
 80a33c9:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
 80a33d9:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
 80a33e9:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
 80a33f9:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
 80a3409:	646e 632e                                    nd.c.

080a340e <_ctype_>:
 80a340e:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a341e:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a342e:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a343e:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a344e:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a345e:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a346e:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a347e:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a348e:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a350f <link_const_variable_data_end>:
	...

080a3510 <link_constructors_location>:
 80a3510:	080a0435 	.word	0x080a0435
 80a3514:	080a0e21 	.word	0x080a0e21
 80a3518:	080a1ca9 	.word	0x080a1ca9
 80a351c:	080a1fd5 	.word	0x080a1fd5
 80a3520:	080a1ff1 	.word	0x080a1ff1
 80a3524:	080a2645 	.word	0x080a2645
 80a3528:	080a2721 	.word	0x080a2721
 80a352c:	080a2c75 	.word	0x080a2c75
